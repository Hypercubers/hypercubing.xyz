{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome","text":""},{"location":"#hypercubing","title":"Hypercubing","text":"<ul> <li> <p> Introduction to 4D</p> <p>Learn how the fourth dimension works</p> </li> <li> <p> Frequently Asked Questions</p> <p>Get answers to common questions</p> </li> <li> <p> Introduction to Hypercubing</p> <p>Jump into hands-on hypercubing</p> </li> <li> <p> Software</p> <p>Download hypercubing programs</p> </li> <li> <p> Discord server</p> <p>Chat with other hypercubers</p> </li> <li> <p> Progression</p> <p>Solve puzzles to build specific skills</p> </li> </ul> <p></p> <p>Hypercubing is the hobby of solving twisty puzzles (such as the Rubik\u2019s cube) in higher dimensions. The ways that twisty puzzles move are mathematically well defined, and can be generalized to higher spatial dimensions. These puzzles can then be visualized and simulated using computer software.</p> <p>The most well known 4D shape is the hypercube (also called the tesseract, 8-cell, octachoron, or 4-cube). It has 8 cubic sides that are called cells. Turning any of the cells involves rotating it like a cube to any of 24 orientations.</p> <p>Another definition of hypercubing is \u201cbeyond cubing.\u201d This includes all manner of exotic twisty puzzles beyond the handful of puzzles solved by most speedcubers.</p> <p>The short article Abstracting Rubik\u2019s Cube introduces a number of the hypercubing puzzles.</p>"},{"location":"contributing/","title":"Contributing","text":"<p>Welcome! If you\u2019d like to contribute, join the #wiki channel on the Discord server and ask what you can do to help or let us know what changes you want to make.</p> <p>If you aren\u2019t familiar with creating pull requests on GitHub, see this quick video tutorial.</p>"},{"location":"contributing/#setup","title":"Setup","text":"<ol> <li>Install Python 3.9 or later</li> <li>Install Git</li> <li>Clone the repository and install requirements:</li> </ol> <pre><code>git clone https://github.com/Hypercubers/hypercubing.xyz\ncd hypercubing.xyz\npython3 -m pip install -r requirements.txt --user\n</code></pre> <p>Run <code>python3 -m mkdocs serve</code> and go to http://127.0.0.1:8000/ in your web browser. As you edit files, the page will automatically refresh to show your changes.</p>"},{"location":"contributing/#file-layout","title":"File layout","text":"<p>Markdown files should have lowercase names, with hyphens to separate words. Choose shorter names when possible.</p>"},{"location":"contributing/#pages","title":"<code>.pages</code>","text":"<p>Some folders have a <code>.pages</code> file in them, which changes the order of pages in the navigation sidebar on the left. This feature uses the mkdocs-awesome-pages-plugin.</p>"},{"location":"contributing/#syntax","title":"Syntax","text":"<p>This site uses Markdown.</p> <p>For linking between files within the site, use an absolute link like this with no trailing <code>.md</code>:</p> <pre><code>[Melinda's physical 2^4^](/puzzles/physical/2x2x2x2/index.md) was the first 4D puzzle to have a 3D physical design.\n</code></pre> <p>This site uses the Material for MkDocs theme; in particular, this gives us admonitions, tables, footnotes, and subscripts &amp; superscripts. We also have MathJax, which uses <code>$</code> symbols:</p> <pre><code>The $n$th Fibonacci number is given by $F_n = F_{n-1} + F_{n-2}$.\n</code></pre> <p>The \\(n\\)th Fibonacci number is given by \\(F_n = F_{n-1} + F_{n-2}\\).</p>"},{"location":"contributing/#adding-images","title":"Adding images","text":"<p>We are hosting images using a private Nextcloud instance hosted on DigitalOcean. Contact HactarCE on Discord to get access to add images to be hosted there. Once you have an image somewhere in the <code>assets</code> folder, you can embed it in a page. When including any image, be sure to include a brief text description of the image for screen readers. For example:</p> <pre><code>![Erno Rubik inspecting Melinda's 2x2x2x2](https://assets.hypercubing.xyz/img/phys/melinda_2x2x2x2_erno_inspects.jpg)\n</code></pre>"},{"location":"contributing/#naming-images","title":"Naming images","text":"<ul> <li>Organize images into folders when possible. If you\u2019re adding many related images, consider making a new folder for them.</li> <li>Use underscores when naming.</li> <li>Use only lowercase, except when the filename includes twist notation.</li> <li>Try to stay consistent with existing filenames.</li> </ul>"},{"location":"contributing/#abbreviations","title":"Abbreviations","text":"<p>Abbreviations are listed in <code>includes/abbreviations.md</code>. Be careful adding new ones, lest you create another Grant Standingslice incident.</p>"},{"location":"contributing/#style","title":"Style","text":"<p>When naming a puzzle with a product in its name, prefer the cross symbol <code>x</code> over <code>x</code> (e.g. <code>3x3x3x3</code> vs. <code>3x3x3x3</code>). By using the unicode <code>x</code> in the source file, the site will automatically make it searchable using <code>x</code>. In an environment where you cannot use unicode <code>x</code>, use the HTML escape <code>&amp;times;</code>.</p>"},{"location":"discord/","title":"Discord","text":"<p>How did you get here?</p> <p>This page is supposed to redirect to the Discord server.</p>"},{"location":"external-links/","title":"External Links","text":""},{"location":"external-links/#leaderboards","title":"Leaderboards","text":"<ul> <li>Hypercubing Leaderboards \u2014 Hypercubing leaderboards, started at the beginning of 2023 and redone in 2025.</li> <li>Magic Cube 4D Hall of Fame \u2014 Original Hall of Fame, listing the first known solves of hypercube puzzles and some FMC records. New solvers are no longer accepted since reaching 500 solvers.</li> <li>Magic Cube 4D Extended Records \u2014 Records for many other puzzles found in MC4D.</li> <li>Magic Cube 5D Hall of Insanity \u2014 List of all known solvers of 2<sup>5</sup>-7<sup>5</sup> and FMC records.</li> <li>Magic Cube 7D Solvers \u2014 List of all known solvers of 6D and 7D puzzles in MC7D.</li> <li>Magic 120 Cell Solvers \u2014 List of all known solvers of 120-cell puzzles in M120C or MPU.</li> <li>MagicTile Klein Bottle challenge \u2014 List of the first 100 people to solve the Klein Bottle Rubik\u2019s Cube from a competition video made by Mathologer.</li> <li>Speedsolving Wiki List of Unofficial World Records \u2014 List of a few speedsolving and FMC records. This is often out of date compared to the Hypercubing Leaderboards</li> </ul>"},{"location":"faq/","title":"FAQ","text":""},{"location":"faq/#other-faqs","title":"Other FAQs","text":"<ul> <li>MC4D FAQ on superliminal.com</li> <li>quickfur\u2019s 4D FAQ on qfbox.info</li> </ul>"},{"location":"faq/#table-of-contents","title":"Table of contents","text":"<ul> <li>What is hypercubing?<ul> <li>Isn\u2019t the 4th dimension time?</li> <li>How can we visualize 4D?</li> <li>Where can I interact with other hypercubers?</li> <li>How do I start hypercubing?</li> </ul> </li> <li>Virtual puzzles<ul> <li>What program should I download?</li> <li>How do I learn to solve the 3x3x3x3?</li> <li>Is it always possible to solve a 1-move scramble in one move?</li> <li>I can\u2019t solve a 4-move scramble!</li> <li>What methods exist for the 3x3x3x3?</li> <li>Why not start with the physical 2x2x2x2?</li> <li>Why not start with the virtual 2x2x2x2?</li> <li>What is God\u2019s number for [puzzle]?</li> </ul> </li> <li>Physical puzzles<ul> <li>What is a physical 4D puzzle?</li> <li>How can I buy a physical 2x2x2x2?</li> <li>How can I buy other physical puzzles?</li> <li>Can I download 3D files for the physical 2x2x2x2?</li> <li>What physical 4D puzzles have been built?</li> <li>What physical 4D puzzles are possible?</li> </ul> </li> <li>Hyperspeedcube<ul> <li>Does Hyperspeedcube run on my OS?</li> <li>I get an error when I try to run Hyperspeedcube</li> <li>How do I use keybinds in Hyperspeedcube?</li> <li>How do I use piece filters in Hyperspeedcube?</li> <li>Why does Hyperspeedcube drop my keystrokes?</li> </ul> </li> <li>Hyperspeedcube 2<ul> <li>When will Hyperspeedcube 2 be ready?</li> <li>What features are planned for Hyperspeedcube 2?</li> <li>Does Hyperspeedcube 2 have [feature] yet?</li> <li>Can I download the latest development build?</li> <li>I\u2019m having trouble with Hyperspeedcube 2?</li> <li>Where can I follow the latest development updates?</li> </ul> </li> <li>Speedsolving<ul> <li>What are the speedsolving records for 4D puzzles?</li> <li>Why not use speedrun.com?</li> <li>I don\u2019t know full OLL/PLL/ZBLL/etc. Can I still get fast at 4D?</li> <li>What 4D algorithms are there?</li> <li>4D Sexy Move</li> <li>How can I get faster at solving 3x3x3x3?</li> <li>How could the 3x3x3x3 record be improved?</li> </ul> </li> <li>Does this puzzle exist?<ul> <li>2D Rubik\u2019s Cube</li> <li>4D Square-1</li> <li>4D Skewb</li> <li>8-dimensional and higher</li> <li>3D Rubik\u2019s Clock</li> <li>How do I make a 4D [thing]?</li> </ul> </li> </ul>"},{"location":"faq/#what-is-hypercubing","title":"What is hypercubing?","text":"<p>Hypercubing is the hobby of solving twisty puzzles (like the Rubik\u2019s cube) in higher dimensions and exotic geometries.</p>"},{"location":"faq/#isnt-the-4th-dimension-time","title":"Isn\u2019t the 4th dimension time?","text":"<p>While time is one dimension in 4D spacetime, it behaves completely differently from the three spatial dimensions. Hypercubing deals with higher dimensions of space, where all dimensions are interchangeable.</p>"},{"location":"faq/#how-can-we-visualize-4d","title":"How can we visualize 4D?","text":"<p>Our eyes see only a 2D projection of the 3D world, and we\u2019re able to reconstruct the 3D world around us with only minimal difficulty. Using mathematics, we can project a 4D shape onto 3D, and then project that 3D shape onto 2D to be displayed on a computer screen. With enough practice, it\u2019s possible to reason intuitively about higher-dimensional space using these visualizations.</p>"},{"location":"faq/#where-can-i-interact-with-other-hypercubers","title":"Where can I interact with other hypercubers?","text":"<ul> <li>The Hypercubers Discord Server has the most active community of hypercubers and contains the latest updates on developing projects and speedsolving strategies.</li> <li>The Hypercubing Google Group is a good option for those who prefer mailing lists or less frequent updates.</li> <li>The r/Hypercubers subreddit is mostly inactive.</li> </ul> <p>Before the Google Group or Discord server, there was a Yahoo Groups mailing list. Those messages are archived here.</p>"},{"location":"faq/#how-do-i-start-hypercubing","title":"How do I start hypercubing?","text":"<p>We recommend starting by figuring out how to solve the 3x3x3x3. This will build lots of core concepts useful for understanding and solving other puzzles.</p> <p>If you don\u2019t yet know how to solve a 3D Rubik\u2019s cube, we recommend starting with that first.</p>"},{"location":"faq/#virtual-puzzles","title":"Virtual puzzles","text":""},{"location":"faq/#what-program-should-i-download","title":"What program should I download?","text":"<p>For getting started, we recommend Hyperspeedcube. See the software page for a list of hypercubing software and feature comparisons.</p>"},{"location":"faq/#how-do-i-learn-to-solve-the-3333","title":"How do I learn to solve the 3x3x3x3?","text":"<p>We highly recommend that you figure out how to solve the 3<sup>4</sup> on your own. It\u2019s a fantastic puzzle and you\u2019ll learn a lot!</p> <ol> <li>Learn how to solve a 3x3x3, ideally intuitively. There are plenty of tutorials online, although you should try it on your own first. It\u2019s a good challenge!</li> <li>Download Hyperspeedcube or use the web version.</li> <li>Follow this video to get acquainted with the program:</li> </ol> <p>Once you feel comfortable solving 3<sup>3</sup> from a full scramble and 3<sup>4</sup> from a 1-move scramble, you know everything you need to do a full solve. If you get stuck, you can ask for help on the Hypercubers Discord server.</p>"},{"location":"faq/#is-it-always-possible-to-solve-a-1-move-scramble-in-one-move","title":"Is it always possible to solve a 1-move scramble in one move?","text":"<p>Well yes, but actually no. </p> <p>It is always possible to solve in one twist, but that twist may require multiple clicks or holding down number keys to select inner layers. Don\u2019t worry about solving 1-move scrambles with one click, as long as you can solve them confidently. You want to be able to look at a 1-move scramble and immediately know exactly what to do to solve it, even if it takes multiple clicks.</p>"},{"location":"faq/#i-cant-solve-a-4-move-scramble","title":"I can\u2019t solve a 4-move scramble!","text":"<p>Neither can we! The purpose of solving partial scrambles is to gain confidence with how single turns work and how to control the software. 1-move scrambles are enough for this; solving 2-move or 3-move or 4-move scrambles is a fun challenge but will not bring you any closer to a full solve.</p> <p>If you can confidently solve 1-move scrambles, then you\u2019re ready for a full scramble.</p>"},{"location":"faq/#what-methods-exist-for-the-3333","title":"What methods exist for the 3x3x3x3?","text":"<p>Many 3D methods can just be scaled up and used on the 4D cube. Some notable methods are:</p> <ul> <li>Layer-by-layer</li> <li>By piece type</li> <li>CFOP</li> <li>3-Block (4D FreeFOP)</li> <li>Octachoroux (4D Roux)</li> </ul> <p>As of 2024, 3-Block is the most popular speedsolving method and what\u2019s used in the world record, but CFOP is also competitive.</p>"},{"location":"faq/#why-not-start-with-the-physical-2222","title":"Why not start with the physical 2x2x2x2?","text":"<p>You will never understand physical puzzles before understanding virtual puzzles. Computer simulations are the most direct way to experience 4D puzzles, and it\u2019s what all physical puzzles are emulating. It\u2019s effectively impossible to develop new physical puzzles without first understanding the equivalent virtual puzzles.</p> <p>Grant Staten</p> <p>I think that approaching hypercubing by starting with only physical puzzles does not lead to an understanding of how the puzzles actually work. Even if you can solve them.</p> <p>Before I touched a virtual puzzle, I had:</p> <ul> <li>almost gotten sub-2 on a physical 2<sup>4</sup> I\u2019d built</li> <li>started building physical 2x2x2x3</li> <li>rendered physical 2x2x2x3, 2x2x3x3, 2x3x3x3 (piggybacking off of Luna\u2019s work and just following patterns in place)</li> </ul> <p>However, looking back, I 100% honestly did not yet understand how any of those puzzles actually worked at the time.</p> <p>I have absolutely nothing against someone only focusing on physical puzzles. But in my experience you don\u2019t gain an actual understanding of how the puzzles work through solely using the physical puzzles.</p>"},{"location":"faq/#why-not-start-with-the-virtual-2222","title":"Why not start with the virtual 2x2x2x2?","text":"<p>The 2<sup>4</sup> is particularly disorienting for beginners because half of the puzzle turns at once. As a result, while the 2<sup>4</sup> strategy is technically simpler, it\u2019s actually more challenging to wrap your head around, especially when you\u2019re new to 4D puzzles. Just like how the 3<sup>3</sup> is a better starting puzzle in 3D, you can learn lots of important concepts from the 3<sup>4</sup> that will help you with other 4D puzzles.</p> <p>Sergej Volkov</p> <p>I regret not starting with a 3<sup>4</sup>. I first solved virtual 2<sup>4</sup> using Rowan\u2019s physical method and it was extremely painful and did not really help to develop any 4D intuition. I ended up just drawing the physical representation of the puzzle on a piece of paper.</p>"},{"location":"faq/#what-is-gods-number-for-puzzle","title":"What is God\u2019s number for [puzzle]?","text":"<p>See God\u2019s Number.</p>"},{"location":"faq/#physical-puzzles","title":"Physical puzzles","text":""},{"location":"faq/#what-is-a-physical-4d-puzzle","title":"What is a physical 4D puzzle?","text":"<p>The physical 4D puzzles are puzzles that are perfectly analogous to the virtual 4D puzzles, but implemented in the physical world. See these links:</p> <ul> <li>Physical Puzzles on this site</li> <li>Physical Puzzle on the Superliminal Wiki</li> <li>Rowan Fortier\u2019s video about the history of physical hypercubes</li> </ul>"},{"location":"faq/#how-can-i-buy-a-physical-2222","title":"How can I buy a physical 2x2x2x2?","text":"<p>See the Ordering Melinda\u2019s 2x2x2x2 on the Superliminal website. Also see Melinda\u2019s 2x2x2x2 on the Superliminal site, which includes the history, statistics, and Hall of Fame.</p>"},{"location":"faq/#how-can-i-buy-other-physical-puzzles","title":"How can I buy other physical puzzles?","text":"<p>Melinda\u2019s 2<sup>4</sup> is the only physical puzzle for sale. The physical 3<sup>4</sup> and hypercuboids are currently one-of-a-kind. If you want one, you need to design and 3D print it yourself.</p>"},{"location":"faq/#can-i-download-3d-files-for-the-physical-2222","title":"Can I download 3D files for the physical 2x2x2x2?","text":"<p>No. Melinda has put a lot of work into her physical 2<sup>4</sup> designs, and invested quite a bit of her own capital into selling prototypes at a loss and getting them mass-produced, so we respect her wishes to not make those files public. If you want to create your own files modeling Melinda\u2019s physical 2<sup>4</sup> and 3D print them, that is fine, but we ask that you do not make the files available for download unless Melinda is OK with it.</p>"},{"location":"faq/#what-physical-4d-puzzles-have-been-built","title":"What physical 4D puzzles have been built?","text":"<p>See Physical Puzzles for a comprehensive list.</p>"},{"location":"faq/#what-physical-4d-puzzles-are-possible","title":"What physical 4D puzzles are possible?","text":"<p>While it\u2019s always possible to just arrange the stickers on a table, the real challenge is in finding a design that is piece-based instead of sticker-based and fits in a compact shape that isn\u2019t too horrendous to turn. This requires some out-of-the-box thinking and, in extreme cases, application of group theory. We currently have several renderings for physical puzzles that haven\u2019t been built in real life yet; see the Physical Puzzles page for an incomplete list.</p>"},{"location":"faq/#hyperspeedcube","title":"Hyperspeedcube","text":""},{"location":"faq/#does-hyperspeedcube-run-on-my-os","title":"Does Hyperspeedcube run on my OS?","text":"<p>Hyperspeedcube runs natively on Windows, macOS, and Linux. There is also a web version, which runs on Chromebooks or other devices where the downloaded version does not work. For mobile phones, it is possible to run Hyperspeedcube in a browser but not recommended. See Software for alternatives.</p>"},{"location":"faq/#i-get-an-error-when-i-try-to-run-hyperspeedcube","title":"I get an error when I try to run Hyperspeedcube","text":"<p>See Hyperspeedcube - Troubleshooting.</p>"},{"location":"faq/#how-do-i-use-keybinds-in-hyperspeedcube","title":"How do I use keybinds in Hyperspeedcube?","text":""},{"location":"faq/#how-do-i-use-piece-filters-in-hyperspeedcube","title":"How do I use piece filters in Hyperspeedcube?","text":""},{"location":"faq/#why-does-hyperspeedcube-drop-my-keystrokes","title":"Why does Hyperspeedcube drop my keystrokes?","text":"<p>If you are pressing multiple keys at once, your keyboard may not detect subsequent ones. This is called \u201ckeyboard ghosting\u201d and it is a limitation found in the hardware of many computers keyboards. Microsoft has an excellent post explaining why it happens, and an interactive test you can use to see if that\u2019s your issue.</p>"},{"location":"faq/#hyperspeedcube-2","title":"Hyperspeedcube 2","text":""},{"location":"faq/#when-will-hyperspeedcube-2-be-ready","title":"When will Hyperspeedcube 2 be ready?","text":"<p>When it\u2019s done. Hopefully before the end of 2025.</p>"},{"location":"faq/#what-features-are-planned-for-hyperspeedcube-2","title":"What features are planned for Hyperspeedcube 2?","text":"<p>See Hactar\u2019s website.</p>"},{"location":"faq/#does-hyperspeedcube-2-have-feature-yet","title":"Does Hyperspeedcube 2 have [feature] yet?","text":"<p>See Hactar\u2019s website.</p>"},{"location":"faq/#can-i-download-the-latest-development-build","title":"Can I download the latest development build?","text":"<p>You can access the latest development builds either by donating to Hactar on Ko-fi (any amount one time should work) or building it yourself from the source code, which takes some time to set up but generally isn\u2019t too hard.</p>"},{"location":"faq/#im-having-trouble-with-hyperspeedcube-2","title":"I\u2019m having trouble with Hyperspeedcube 2?","text":"<p>Please do not ask Hactar for help building or using development builds of Hyperspeedcube 2 unless the build on Ko-fi is broken. Everything in the program is subject to change, and any time spent helping an individual user is time that could instead be spent writing documentation.</p>"},{"location":"faq/#where-can-i-follow-the-latest-development-updates","title":"Where can I follow the latest development updates?","text":"<p>See the Hyperspeedcube 2.0 Development Updates thread in #hyper-forum on the Hypercubers Discord Server. Once Hyperspeedcube 2.0 is ready for general use, there will be an announcement that pings the @Hyperspeedcube Update role (and possibly @everyone).</p>"},{"location":"faq/#speedsolving","title":"Speedsolving","text":""},{"location":"faq/#what-are-the-speedsolving-records-for-4d-puzzles","title":"What are the speedsolving records for 4D puzzles?","text":"<p>See the leaderboards. To get on the leaderboard, read the submission rules and submit a video of your solve to the solve submission form. You will have to sign into the leaderboards using either a Discord account (which must be a member of the Hypercubers Discord Server) or an email address.</p>"},{"location":"faq/#why-not-use-speedruncom","title":"Why not use speedrun.com?","text":"<p>Speedrun.com does not allow \u201cgeneric Rubik\u2019s Cube simulators.\u201d We applied and were rejected.</p>"},{"location":"faq/#i-dont-know-full-ollpllzblletc-can-i-still-get-fast-at-4d","title":"I don\u2019t know full OLL/PLL/ZBLL/etc. Can I still get fast at 4D?","text":"<p>Absolutely! Most 4D speed methods are highly intuitive, and world-record times often use just 2-look OLL and PLL. Executing algorithms is a very negligible part of the solve compared to the massive amounts of pair or block building.</p> <p>Hactar (mid-2024)</p> <p>Ok I actually ran the numbers:</p> <ul> <li>My 2:05.30 PB solve had full-step 2-look OLL + 2-look PLL and took 8 seconds</li> <li>My 1:56.42 WR solve had an easy full OLL (OCLL skip) + U perm (CPLL skip) and took 4 seconds</li> </ul> <p>Consider that the second solve is basically the best case for a 2-look last layer (the goal of full OLL+PLL), using algorithms that have really nice RKT cancels and are easy to execute with my keybinds and I\u2019ve practiced them a ton, but it was still only 4 seconds faster, which is ~2% of the total solve. Additionally, my experience is that it takes much more practice to execute 4D algorithms at max speed with a keyboard compared to executing 3D algorithms at max speed on a 3^3.</p> <p>Based on all that, I can confidently say I don\u2019t think full OLL+PLL will ever be meaningfully better than RKT-canceled 2-look OLL + 2-look PLL, with one exception: There\u2019s a handful of full OLL algorithms (namely the ones composed of fruruf and sune) that I think are worth using if you know them from 3D, but aren\u2019t at all crucial. I do use these during 4D solves when I recognize them, and with some effort we may be able to find a few more cases with easy cancels, but I don\u2019t think it\u2019s worth learning these just for 4D solves.</p>"},{"location":"faq/#what-4d-algorithms-are-there","title":"What 4D algorithms are there?","text":"<p>There\u2019s so many cases for each step of the solve that creating a complete algorithm set is basically impossible, and there\u2019s so many options for moves that algorithm explorers are infeasible. Almost every algorithm we have is based on an algorithm from 3D, and the only search program we have is a sort of optimizer for one very specific kind of algorithm derived from 3D.</p>"},{"location":"faq/#4d-sexy-move","title":"4D Sexy Move","text":"<p>In 2022, Rowan made a 3<sup>4</sup> Beginner\u2019s Method Tutorial video. In an attempt to make it as simple to learn as possible, he taught a \u201c4D Sexy Move\u201d as an algorithm, when in reality it was an application of a technique called RKT. This lead to a lot of people having limited understanding of the puzzle and why certain things worked. Some people joined the discord server and talked about the 4D Sexy Move like it was some magical algorithm, when it was actually just a certain thing you can do with a general technique that can do more than a single algorithm.</p>"},{"location":"faq/#how-can-i-get-faster-at-solving-3333","title":"How can I get faster at solving 3x3x3x3?","text":"<p>First, learn 3-Block! Pairs are more popular since the recognition is easier, but solutions using triplets tend to be shorter; as far as we know, both are viable. If you\u2019re getting times in the 8-15 minute range, do slowsolves where you focus on efficient solutions to F2L pairs/triplets.</p> <p>Hactar</p> <p>From most to least significant:</p> <ul> <li>1-key-per-move keybinds that prioritize <code>R</code> and <code>I</code> cells. This is more than 2x faster than default keybinds, because you do not need to time the release of keys.</li> <li>1-key-per-move RKTbinds with RKT cancels. These two optimizations complement each other so well, because it spreads out the work among all your fingers.</li> <li>Single keys for some 180-degree turns, because repeated keys are slow! By adding keys for <code>x2</code> and <code>y2</code>, you can reorient a cell into any orientation with just two keypresses.</li> <li>RKT-canceled triggers during F2L-3. I leave debt on <code>U</code> and have muscle memory for the common RKT-canceled trigger <code>R (flip) U' R' (flip)</code> (where <code>(flip)</code> = <code>{1-2}Ozx2</code>), its inverse <code>(flip) R U (flip) R'</code>, and their back and left-handed forms. This + <code>U</code> moves accounts for basically everything you do in F2L other than <code>R U2 R'</code>, which you can usually avoid or in worst case just <code>(flip) R (flip) U2 (flip) R' (flip)</code>.</li> </ul>"},{"location":"faq/#how-could-the-3333-record-be-improved","title":"How could the 3x3x3x3 record be improved?","text":"<p>Hactar (mid-2025)</p> <p>Here\u2019s what I think would make a big difference, from most to least significant:</p> <ul> <li>Orientation recognition during F2L-b (\u201cclockwise strats\u201d). This enables more efficient F2L-b solutions and guarantees that every case can be solved in one look.</li> <li>Optimal last-4-corners on OLC. There\u2019s probably few enough cases that it\u2019s feasible to enumerate all of them and memorize the best solution for each one.</li> <li>Lookahead during F2L-b. I already do this a little bit, but there\u2019s room for improvement.</li> </ul>"},{"location":"faq/#does-this-puzzle-exist","title":"Does this puzzle exist?","text":""},{"location":"faq/#2d-rubiks-cube","title":"2D Rubik\u2019s Cube","text":"<p>Depending on how you define \u201c2D Rubik\u2019s cube,\u201d it might or might not exist.</p> <p>A 3D Rubik\u2019s cube has 6 square faces and each face twists within its 2D plane (with 4 possible rotations). A 4D Rubik\u2019s cube has 8 cubic cells and each cell twists within its 3D plane (with 24 possible rotations). By analogy, a 2D Rubik\u2019s cube has 4 edges and each edge can be rotated within its 1D line \u2026 but there\u2019s no way to do a rotation in 1D. So if twists have to be rotations, then a 2D Rubik\u2019s cube doesn\u2019t have any turns and so isn\u2019t a puzzle (or is a trivial one).</p> <p>Using different definitions, we can create a few different puzzles that could reasonably be called a 2D Rubik\u2019s cube:</p> <ul> <li>If we allow reflections instead of rotations, we get the Reflesquare, which generalizes to the Reflecube.</li> <li>If we allow translations instead of rotations, we get Loopover.</li> <li>If we allow circular cuts instead of flat cuts, we get various MagicTile puzzles, including some that are actually equivalent to an ordinary 3D Rubik\u2019s cube!</li> </ul>"},{"location":"faq/#4d-square-1","title":"4D Square-1","text":"<p>Square-1 is fundamentally a bandaged dodecagonal prism. There are so many ways to extend that into 4D that there isn\u2019t really a canonical \u201c4D square-1\u201d</p>"},{"location":"faq/#4d-skewb","title":"4D Skewb","text":"<p>There\u2019s so many ways to generalize a skewb to 4D that we have a whole page full of them!</p>"},{"location":"faq/#8-dimensional-and-higher","title":"8-dimensional and higher","text":"<p>Above five dimensions, cube puzzles aren\u2019t more difficult or interesting, just more tedious and computationally expensive. But there might be some wild higher-dimensional puzzles yet to be discovered, say one based on the very special geometry of the E8 Lattice!</p>"},{"location":"faq/#3d-rubiks-clock","title":"3D Rubik\u2019s Clock","text":"<p>Instead of rotating circles in 2D, you can rotate spheres in 3D. This is a more interesting puzzle than the traditional Rubik\u2019s Clock because moves don\u2019t commute. No one\u2019s written a program yet to simulate it but you totally could!</p>"},{"location":"faq/#how-do-i-make-a-4d-thing","title":"How do I make a 4D [thing]?","text":"<p> Generalizing Things to 4D: A Handy Guide </p> <ol> <li>Understand and define the thing you\u2019re generalizing</li> <li>Find where your definitions reference or assume something dimension-specific</li> <li>Rewrite your definitions to avoid dimension-specific references or assumptions</li> <li>Find what 4D object fits your new definitions (there may be one, several, or none)</li> </ol>"},{"location":"glossary/","title":"Glossary","text":"<p>This is a glossary of terms used in the hypercubing community. We take a mostly prescriptivist<sup>1</sup> approach: terminology has a great effect on how we think about puzzles, and we try to be mindful when naming concepts and inventing notation to ensure that they encourage better understanding of puzzles and are useful in as many contexts as possible.</p> <p>Before you propose new terminology \u2026</p> <p>We\u2019ve wrestled in the past with poor terminology that actively hurt understanding. First, gain hands-on experience and intuition for the thing you want to describe, and then see what terms are actually needed. There\u2019s no value in making up words for the pieces on a 7-dimensional puzzle, for example, if there\u2019s no need to communicate about them.</p>"},{"location":"glossary/#puzzle-elements","title":"Puzzle elements","text":"<p>A 1-dimensional turning axis is not always well-defined for higher-dimensional puzzles, because rotations generally happen in a plane, not around an axis.</p>"},{"location":"glossary/#polytope-elements","title":"Polytope elements","text":"<p>For an \\(N\\)-dimensional polytope: (Some of these terms are from Polytope - Wikipedia)</p> <ul> <li>vertex = rank 0, single point</li> <li>edge = rank 1, line connecting two vertices</li> <li>face = rank 2, polygon constructed from edges</li> <li>cell = rank 3, polyhedron constructed from faces</li> <li>\u2026</li> <li>\\(N\\)-face = rank \\(N\\), polytope constructed from rank \\(N-1\\) elements</li> <li>peak = \\(N-3\\) face</li> <li>ridge = \\(N-2\\) face</li> <li>facet = rank \\(N-1\\), polytope constructed from rank \\(N-2\\) elements</li> </ul> <p>In 4D, we prefer facet rather than cell. In simple terms: on most puzzles, a facet is the thing with a single color.</p>"},{"location":"glossary/#pieces","title":"Pieces","text":"<p>Basic definitions for an \\(N\\)-dimensional hypercubic puzzle:</p> <ul> <li>corner = piece with \\(N\\) colors (4 colors in 4D)</li> <li>edge = piece with \\(N-1\\) colors (3 colors in 4D)</li> <li>peak or 3c = piece with 3 colors (5D+)</li> <li>ridge or 2c = piece with 2 colors (4D+)</li> <li>center or 1c = piece with 1 color</li> </ul> <p>We prefer words rather than 1c, 2c, etc. because the words generalize better to other, non-facet-turning puzzles and describe how a piece behaves rather than how it looks.</p>"},{"location":"glossary/#moves","title":"Moves","text":"<ul> <li>axis or turning axis = ray start from the center of the puzzle, around which puzzle elements rotate during twists</li> <li>twist or move or turn = movement of pieces that changes the puzzle state</li> <li>rotation or full-puzzle rotation = rotation of the whole puzzle that does not change its state</li> </ul>"},{"location":"glossary/#puzzle-state","title":"Puzzle state","text":"<ul> <li>A puzzle\u2019s state graph is the graph of all its states. Each state of the puzzle has a node, and the nodes are connected by single moves.</li> <li>A piece\u2019s attitude is the transformation from its solved state to its current state. For example, each piece on 3x3x3 has 24 possible attitudes.</li> <li>A piece\u2019s attitude can be decomposed into its permutation, the component that affects its grip signature, and its orientation, the component that does not. For example, each corner on a 3x3x3 has 8 permutations and 3 orientations.</li> <li>Pieces are indistinguishable if swapping them never affects whether the puzzle is solved. For example, the blue center pieces on a standard 4x4x4 are all indistinguishable.</li> <li>Pieces are distinguishable if swapping them can affect whether the puzzle is solved.</li> <li>Piece orientations are indistinguishable if changing one orientation to the other never affects whether the puzzle is solved. For example, each center on a standard 3x3x3 has 4 orientations, all of which are indistinguishable.</li> <li>Piece orientations are distinguishable if changing one orientation to the other can affect whether the puzzle is solved.</li> </ul> <p>Revealing information that distinguishes indistinguishable pieces or orientations makes them no longer distinguishable, thus changes the puzzle.</p>"},{"location":"glossary/#puzzle-properties","title":"Puzzle properties","text":""},{"location":"glossary/#algebraic-properties","title":"Algebraic properties","text":"<ul> <li>A move is blocked in a particular puzzle state if there is some feature of the puzzle preventing the move from being applied. Generally this is because there is a piece that is partially inside and partially outside of the region affected by the move.</li> <li>Bandaging is the process of combining pieces in order to block moves.</li> <li>Unbandaging is the process of splitting pieces in order to make more moves possible.</li> <li>A puzzle is doctrinaire or fully unbandaged if every move is always accessible (not blocked).</li> <li>A puzzle is bandaged if it is not doctrinaire, but can be finitely unbandaged to a doctrinaire puzzle.</li> <li>A puzzle is jumbling if it has infinitely many grips. For finite puzzles, this simpler definition is equivalent: A puzzle is jumbling if it cannot be finitely unbandaged to a doctrinaire puzzle.</li> </ul>"},{"location":"glossary/#visual-modifications","title":"Visual modifications","text":"<ul> <li>A sticker mod of a puzzle is a modification that involves changing the coloring of a puzzle. A sticker mod may have different indistinguishable pieces than the original puzzle.</li> <li>A shape mod of a puzzle is a modification that involves changing the shape of the puzzle without changing the behavior of pieces. A shape mod may have different indistinguishable pieces than the original puzzle. A shape mod sometimes requires modifying the coloring as well.</li> <li>A puzzle is shapeshifting if the visible shape of the puzzle depends on its state.</li> </ul> <p>Note that shapeshifting has nothing to do with algebraic properties (doctrinaire/bandaging/jumbling).</p> <ul> <li>Any puzzle can be made shapeshifting by changing the shape of one of the pieces.</li> <li>Any single-core twisty puzzle can be made non-shapeshifting by carving it from a sphere.</li> </ul>"},{"location":"glossary/#constructions","title":"Constructions","text":"<ul> <li>A solid is a construction of a puzzle by cutting a finite polytope, possibly with some pieces removed.</li> <li>A tiling is a construction of a puzzle by cutting a filled space, typically with no pieces removed.</li> <li>A soup is a construction of a puzzle by adding objects to an initially empty space.</li> </ul>"},{"location":"glossary/#physicality","title":"Physicality","text":"<p>These definitions are bespoke to the hypercubing community, and have been refined over time as we discover more strange cases. Unlike most other terms on this page, these do not have rigid definitions; they may change as more possibilities are discovered.</p> <p>The exact assignment of \u201cphysical\u201d and \u201cmechanical\u201d is a historical quirk inherited from Melinda\u2019s \u201cphysical\u201d 2<sup>4</sup>.</p> <ul> <li>The geometric rank of a puzzle is the rank of its geometry; that is, the dimension of its stickers/facets plus one. Examples:<ul> <li>The Rubik\u2019s cube has rank 3.</li> <li>3<sup>4</sup> has rank 4.</li> <li>MagicTile puzzles all have rank 3.</li> <li>Circle puzzles have rank 3.</li> <li>Loopover has rank 3.</li> <li>Reflesquare has rank 2.</li> </ul> </li> <li>A virtual puzzle is one simulated on a computer. In hypercubing, this is the closest we can get to the true form of the puzzle.</li> <li>A mechanical puzzle is one that uses a physical mechanism in a number of dimensions that is the geometric rank of the puzzle, typically using geometric constraints to hold pieces together. For example, a mechanical 3<sup>4</sup> uses 4 dimensions. A mechanical circle puzzle uses 3 dimensions. The typical Rubik\u2019s cube is a mechanical 3<sup>3</sup>.<ul> <li>A mechanical puzzle may exist in geometry other than 3D Euclidian space; one may talk about a mechanical face-turning Klein Quartic puzzle in quotiented H3 or H2xE space.</li> </ul> </li> <li>A physical puzzle is one that is built in a dimension lower than its geometric rank, typically (but not always) using rigid pieces. For example, Melinda\u2019s physical 2<sup>4</sup> uses 3D space. A physical 2<sup>5</sup> may use 3D or 4D space. A physical 3<sup>3</sup> uses 2D space. All known physical higher-dimensional puzzles are documented in this wiki.<ul> <li>A physical puzzle must have the same state space and allowed moves as the original, although some moves may take multiple steps to achieve.</li> </ul> </li> <li>A move is accessible on a physical puzzle if it can be performed in one or very few actions.<ul> <li>A good physical puzzle has many accessible moves.</li> </ul> </li> <li>A gyro is a multi-step action on a physical puzzle that changes the accessible moves. Gyros often correspond to higher-dimensional rotations.</li> <li>A half gyro or partial gyro is a multi-step action on a physical puzzle that performs an inaccessible move.</li> <li>A virtual physical (\u201cvirt phys\u201d) puzzle is a computer simulation of a physical puzzle.</li> </ul>"},{"location":"glossary/#completions","title":"Completions","text":"<ul> <li>A real puzzle is one with all interior pieces. For example, a real 7x7x7 has \\(7^3=343\\) pieces, compared to \\(7^3-5^3=218\\) pieces for a standard 7x7x7.</li> <li>A complex puzzle is one with a piece for each possible grip signature using the grip-theoretic construction. These puzzles have \\(2^n\\) pieces, where \\(n\\) is the number of grips on the puzzle.</li> <li>A laminated puzzle is one with a piece for each possible grip signature using a laminated construction. A laminated puzzle is a subset of the complex puzzle.</li> <li>A multi puzzle is one with pieces from several different cut depths. An example is the Multidodecahedron. A multi puzzle is a subset of the laminated puzzle.</li> <li>A circle puzzle is one with circles carved into the faces, where pieces inside one or more of the circles do not turn with their face. A circle where all circles behave equivalently is a subset of the complex puzzle. For example, see this video of a circle 3x3x3.</li> <li>A super puzzle is one where all orientations are distinguishable.</li> </ul> <p>Real, complex, and laminated puzzles are often implicitly super. For example, the super real 5x5x5 has 125 pieces, all distinguishable (and with all distinguishable attitudes). It is equivalent to the Double Circle Real 5x5x5 (video).</p>"},{"location":"glossary/#cut-depths","title":"Cut depths","text":"<p>Cut depth terminology varies by community. Listed here are the definitions we use in hypercubing.</p> <ul> <li>A shallow cut is any cut equivalent to the shallowest possible cut. An example is the Megaminx.</li> <li>A deep cut is any cut deeper than a shallow cut.</li> <li>A half cut is a cut that passes through the center of the puzzle into two identical halves. An example is the Pentultimate.</li> <li>A to-adjacent cut is a cut that passes through the center of an adjacent face. An example is the Pyraminx Crystal. A to-adjacent cut is exactly the depth required to not have axis pieces (pieces that turn with exactly one grip).</li> <li>A deeper-than-adjacent cut is any cut deeper than a to-adjacent cut. An example is the Curvy Starminx or Litestarminx.</li> <li>A deeper-than-origin cut is any cut deeper than a half cut. An example is Deeper Madness, especially compared to Shallower Madness. Another example is the Enabler Cube.</li> </ul>"},{"location":"glossary/#other-cut-types","title":"Other cut types","text":"<ul> <li>A cut is accessible if there is some move that separates pieces along it.</li> <li>A stored cut is one that is not accessible from the solved state of the puzzle. For example, the extra cuts present on a Curvy Copter Plus are stored cuts; compare to the Curvy Copter, which has no stored cuts.</li> <li>A wedge cut is a cut comprised of multiple cut planes, where twists are parallel to both planes. This is only possible in 4D+. An example is the wedge-turning 3<sup>4</sup>.</li> </ul>"},{"location":"glossary/#solving","title":"Solving","text":""},{"location":"glossary/#actions","title":"Actions","text":"<p>An action is sequence of moves that preserves invariants of the stage. Usually, an action keeps certain pieces solved. For example, when a 4<sup>n</sup> has been reduced to a 3<sup>n</sup> using big cube reduction, outer layer moves are the only actions. In this case, the actions are reduced moves. Another common set of actions is RKT.</p>"},{"location":"glossary/#parity","title":"Parity","text":"<p>There is no community consensus on the definitions of parity. Below are some proposed definitions:</p> <ul> <li>group theory parity = a case where the puzzle is in an unexpected coset of a subgroup of index 2<ul> <li>It is often more broadly applied to a case where the puzzle is in an unexpected coset of a subgroup of any index.</li> </ul> </li> <li>cuber parity = a case that is difficult to solve that the solver didn\u2019t expect<ul> <li>Melinda\u2019s definition: a local maximum, where the puzzle is largely solved but requires many moves to fix</li> <li>Hactar\u2019s definition: a case which cannot be solved using the actions expected at this stage in the solve</li> </ul> </li> </ul> <p>None of these definitions are satisfactory. According to most of these definitions, RKT parity is not parity at all, but is more accurately called \u201cRKT error.\u201d According to Melinda\u2019s definition, most PLL cases are parity. The first definition given for \u201ccuber parity\u201d is highly subjective, but is the only one that captures its current use.</p> <p>Open questions</p> <ul> <li>Is there a definition for \u201ccuber parity\u201d that captures the way it\u2019s naturally used?</li> <li>Is there a catchy term we can use instead of \u201cRKT parity\u201d? Melinda proposes \u201cRKT error.\u201d</li> </ul>"},{"location":"glossary/#f2l","title":"F2L","text":"<p>F2L is a very general solving strategy that works by building a small block of pieces and then inserting the block into its solved position. F2L stands for \u201cfirst two layers\u201d because it was originally developed to solve the first two layers of 3<sup>3</sup>, but in hypercubing we use it for many other puzzles.</p>"},{"location":"glossary/#f2l-axes","title":"F2L axes","text":"<ul> <li>free axes = axes which affect only unsolved pieces; can be turned freely</li> <li>side axes = axes which affect some unsolved pieces and some solved pieces; can be turned, but must be turned back to restore solved pieces</li> <li>base axes = non-free and non-side axis that is not completely solved; usually mostly solved, rarely turned during F2L</li> <li>top axis = the free axis currently being worked on</li> </ul> <p>Examples</p> <ul> <li>In F2L on a 3<sup>3</sup>, <code>D</code> is the only base axis, <code>U</code> is the top axis (the only free axis), and <code>R</code>, <code>L</code>, <code>F</code>, &amp; <code>B</code> are all side axes.</li> <li>When beginning F2L on a megaminx there are, 6 free axes, 5 side axes, and 1 base axis.</li> <li>Near the end of F2L on a megaminx there are, 1 free axis, 5 side axes, and 5 base axes.</li> </ul> <p>We use the letter <code>T</code> to represent the top axis, <code>R</code> &amp; <code>F</code> to represent intersecting side axes, and <code>R</code> &amp; <code>L</code> to represent non-intersecting side axes.</p>"},{"location":"glossary/#f2l-blocks","title":"F2L blocks","text":"<p>An F2L block or pair is a group of pieces that is paired and solved as one unit. There\u2019s usually a head and body, where the head intersects with more twisting axes than the body.</p> <p>The base sticker of a head is the sticker which will be facing the base axis when it is solved. The facing direction of the head of a block is whatever direction its base sticker is facing. The facing direction of the body of a block is the same as the head, when they are paired. This notion of which direction a head or body faces gives a way to describe edge orientation before the pieces have been paired, which is helpful especially in 4D+ where edge orientation is otherwise difficult to define.</p> <p>Examples</p> <ul> <li>On the 3<sup>3</sup> an F2L pair consists of a corner (the head) and an edge (the body).</li> <li>On the 3<sup>4</sup>, an F2L-a pair consists of an edge (the head) and a ridge (the body).</li> </ul> <ul> <li>paired = fully assembled</li> <li>split pair = one move away from paired, or can be paired as part of inserting the block</li> </ul>"},{"location":"glossary/#f2l-action-terminology","title":"F2L action terminology","text":"<ul> <li>breaking the base = unsolving some pieces that were solved</li> <li>restoring the base = re-solving some pieces</li> <li>push = a twist of a side axis that breaks the base and puts new pieces on top</li> <li>pull = a twist of a side axis that restores the base and puts new pieces on top</li> <li>overpush = push again after pushing (e.g., R U R U R2\u2019)</li> <li>overpull = push as a continuation of a pull (e.g., R U R2\u2019 U\u2019 R)</li> <li>push pair = formation of a pair via a push</li> <li>pull pair = formation of a pair via a pull</li> <li>hide = to remove a piece from the top (using a push or pull)</li> <li>reveal = to bring a piece to the top (using a push or pull)</li> <li>rebase or reorient = to reorient a piece to face a different direction (i.e., change where its base sticker is facing)</li> <li>cap = to twist <code>T</code> to form a pair (where the head is on top and the body is not on the top)</li> <li>uncap = to separate the head and body of a pair by twisting <code>T</code></li> </ul> <p>Open question</p> <p>What should we call a move like <code>RT</code> on 3<sup>4</sup>, which doesn\u2019t change the set of pieces on <code>T</code> and might or might not unsolve some pieces?</p>"},{"location":"glossary/#methods-in-higher-dimensions","title":"Methods in higher dimensions","text":"<p>In higher and higher dimensions, it gets annoying to have to say stuff like \u201cpermuting the last cell of the last cell of the\u2026\u201d etc. To avoid the verbosity, we simply add a hyphen and the rank of the thing you\u2019re solving at the end. Examples:</p> <ul> <li>PLL-4 is the PLL step on a rank-4 object, which permutes a rank-3 object. With CFOP on 3<sup>4</sup>, it consists of permuting the 2c pieces, then permuting the rest like a 3<sup>3</sup>.</li> <li>For F2L, you put the number before the letter at the end e.g. F2L-5a, F2L-6d, etc.</li> <li>If you were solving a 3<sup>6</sup> with pure CFOP and you were solving the F2L of the final cube with triple RKT, that would be F2L-3 of PLL-4 of PLL-5 of PLL-6.</li> </ul>"},{"location":"glossary/#to-do","title":"To-do","text":"<p>This section is a work-in-progress.</p> <ul> <li>Sliding vs. twisting</li> <li>Cuboid terms (tower, brick, floppy, domino, pancake)</li> <li>Other common puzzle families: weirdling, bubbloid, rotate-gap, sliding-gap (15-puzzle), loopover</li> </ul> <ol> <li> <p>Go ahead, run us over with the descriptivist bus.\u00a0\u21a9</p> </li> </ol>"},{"location":"history/","title":"History of Hypercubing","text":""},{"location":"history/#1988-2002-the-beginning-of-hypercubing","title":"1988-2002: The Beginning of Hypercubing","text":"<p>MagicCube4D in 2001</p> <p></p> <p>Shortly after the Rubik\u2019s Cube was invented in 1974, people began thinking about different versions of the puzzle. The idea of higher dimensional analogues was intriguing to many people. This article from 1982 is one of the earliest known documents theorizing properties of the 4D Rubik\u2019s Cube. In 1988 Melinda Green and Don Hatch wrote MagicCube4D, and the first solutions to the 3<sup>4</sup> puzzle came shortly thereafter. The Superliminal website was created some time around 2001, and Charles Doan has an excellent video about an old version of MC4D. Communication was very difficult because of how extremely niche hypercubing was.</p>"},{"location":"history/#2002-present-mailing-list-years","title":"2002-Present: Mailing List Years","text":"<p>In August 2003, the Hypercubing Yahoo Groups mailing list was created. Anyone could subscribe to the list and join the discussion via email. This greatly improved the speed of sharing knowledge. Many new people joined and discussed methods and puzzles, and even had some speedsolving competitions! It was moderately active until Yahoo groups began removing content in 2019. Nowadays, there is an archive of the messages from the Yahoo Groups mailing list.</p> <p>After the end of the Hypercubing Yahoo Groups mailing list, the Hypercubing Google Groups mailing list was created, with pretty much the same members and type of discussions as before. It wasn\u2019t until 2021 that a Discord server was created to speed up communication even more.</p>"},{"location":"history/#2010-2017-andreys-influence","title":"2010-2017: Andrey\u2019s Influence","text":"<p>Andrey Astrelin was a Russian programmer that became known to the hypercubing community when he claimed to have programmed and solved a 3<sup>4</sup> before MC4D was created in 1988. He had no evidence for this claim, but was able to program a new simulator in only 129 lines of code, which certified his legitimacy. Andrey\u2019s main legacy came in the form of creating many programs for the community, including Magic Puzzle Ultimate, Magic Cube 7D, Magic Simplex 5D, and Magic Hyperbolic Tile. These programs unlocked a massive amount of higher dimensional puzzles that were probably never seen or solved before, enriching the hypercubing community. Unfortunately Andrey passed away in 2017<sup>1</sup>, but his contributions to the hypercubing community will never be forgotten.</p>"},{"location":"history/#2017-present-making-physical-4d-puzzles","title":"2017-Present: Making Physical 4D Puzzles","text":"<p>Throughout 2013 and 2014, Melinda Green got in contact with Oskar van Deventer to try and think of any possible mechanism for a physical 2<sup>4</sup>. After failing to find a reasonable physical mechanism, they ended up going with only using magnets in order to stick the hypercubies together. In 2017 the first design was finalized, and Melinda began selling the puzzles by 3D printing the parts from Shapeways. The quality of the puzzle improved in 2022 when Melinda secured a deal with a company to mass produce the pieces via injection moulding.</p> <p>In late 2021, some speculation began as to if you could expand the physical 2<sup>4</sup> into a physical 2x2x2x3 hypercuboid. After Rowan learned that Grant had 3D printed his own physical 2<sup>4</sup>, he challenged him to build a physical 2x2x2x3. Grant completed the challenge, and began designing and printing many more physical puzzles, all the way up to the physical 3x3x3x3. Many physical puzzle designs have still yet to be built\u2026</p> <p>Physical puzzles page</p> <ul> <li>2013-2015: Brainstorming ideas to make the 2x2x2x2 in 3D space</li> <li>2017 Feb 08: First puzzle made with magnetic dice mechanism</li> <li>2017 Apr 26: 2nd 2<sup>4</sup> made using 3D printing from Shapeways</li> <li>2022 Feb 03: Grant finishes the 2x2x2x3</li> <li>2023 May: First brainstorming of floppyhypercubes</li> <li>2022 May 14: Grant finishes the 2x2x3x3</li> <li>2022 Jul 06: Grant finishes the 2x3x3x3</li> <li>2022 Jul 22: Grant finishes the 3x3x3x3</li> <li>2022 Aug: Markceluna designs a physical simplex</li> <li>2024 Jan: Tymon finishes making 1x2x2x2 through 1x3x3x3 hypercuboids</li> <li>2024 Jan: Dietl builds a physical simplex based on a completely different design than Markceluna\u2019s</li> </ul>"},{"location":"history/#2022-present-the-hyperspeedsolving-revolution","title":"2022-Present: The Hyperspeedsolving Revolution","text":"<p>On 2021 Jun 10, Rowan Fortier created the Hypercubers Discord server, and in late 2021 Hactar began working on the Hyperspeedcube program, which was a massive upgrade over older programs like MC4D. Features like piece filters and customizable keybinds were instrumental to lowering solving times. November 2022 saw the beginning of the race for the 3<sup>4</sup> world record. The record was traded almost exclusively by Grant and Hactar, smashing all the barriers from sub-10 minutes all the way down to sub-2 minutes! There were also a few smaller record races for bigger layered n<sup>4</sup>s.</p> <p>In early 2024, the first speedsolves of the 3<sup>5</sup> were done. A lot of hypercubers were waiting for HSC 2 to come out so they could use keybinds and better piece filters to solve in 5D, but using MC7D or MPU isn\u2019t that bad at all.</p> <ul> <li>2022 Jan: HSC v0.1 includes 3<sup>3</sup> and 3<sup>4</sup>, filtering by piece type (not color), and customizable keybinds.</li> <li>2022 Aug: HSC v0.8 adds modern piece filters. HSC v0.9 adds multiple keybind sets.</li> <li>2022 Nov 06: First 3<sup>4</sup> sub-10:00 by Hactar</li> <li>2022 Nov 18: First 3<sup>4</sup> sub-9:00 by Rowan</li> <li>2022 Nov 19: First 3<sup>4</sup> sub-8:00 by Hactar</li> <li>2022 Nov 22: First 3<sup>4</sup> sub-7:00 by Grant</li> <li>2022 Nov 23: First 3<sup>4</sup> sub-6:00 by Hactar</li> <li>2022 Nov 26: First 3<sup>4</sup> sub-5:00 by Hactar</li> <li>2022 Dec 07: First 3<sup>4</sup> sub-4:00 by Grant</li> <li>2022 Dec 22: First 3<sup>4</sup> sub-3:00 by Hactar</li> <li>2023 May 13: First 3<sup>4</sup> sub-2:00 by Hactar</li> </ul> <ol> <li> <p>Read Andrey\u2019s biography \u21a9</p> </li> </ol>"},{"location":"intro-4d/","title":"Introduction to 4D","text":"<p>This page aims to teach you the fundamentals of understanding higher dimensional space, some of the shapes that exist in them, and how we can turn them into twisty puzzles to play with.</p>"},{"location":"intro-4d/#what-is-the-4th-dimension","title":"What is the 4th dimension?","text":"<p>The dimensionality of a space/object is the number of coordinates needed to describe its position. First, think of a 1-dimensional number line. To describe a position on the number line, all you need is one set of numbers for the coordinate. In 2-dimensional space like a graph, you need 2 sets of numbers to represent a point, such as \\((3,4)\\). This continues on to higher dimensions, where you need more and more numbers in order to locate a point.</p> <p>The 4th dimension is a space where you need 4 sets of numbers to describe the coordinates of something. As 3D beings in a 3D universe, we can\u2019t interact with or see the 4th dimension. But computers can easily simulate higher dimensions, and project it down to 2D so we can see it on a computer screen.</p> <p>Dimension Levels (by NerdBoy1392 - Own work, CC BY-SA 3.0, link)</p> <p></p>"},{"location":"intro-4d/#understanding-4d-shapes","title":"Understanding 4D shapes","text":"<p>Hypercube rotating</p> <p></p> <p>Puzzles are (usually) based on physical geometric shapes, so you have to understand what 4D shapes there are. 4D shapes have sides, or cells, that take the form of 3D shapes, and enclose some amount of \u201chypervolume\u201d. As the most popular 4D puzzles are the hypercubes, so it\u2019s important to at least understand its geometry.</p> <p>A hypercube (also known as a tesseract, 8-cell, octachoron, or 4-cube) is a shape with 8 cubic sides. 3 sides meet at each edge, giving it the Schl\u00e4fli symbol {\\(4,3,3\\)}. Watch the animation below, as the tesseract unfolds itself into its 3-dimensional net.</p> <p></p> <p>But of course, there are many other shapes besides the tesseract. Check out these resources for a deeper understanding:</p> <ul> <li>Perfect Shapes in Higher Dimensions - Numberphile</li> <li>Regular polytope</li> <li>Regular 4-polytope</li> </ul>"},{"location":"intro-4d/#making-puzzles-out-of-shapes","title":"Making puzzles out of shapes","text":"<p>To make twisty puzzles out of higher dimensional shapes, you have to slice it up! Adding two evenly spaced planar cuts along each dimension, we get the 3x3x3x3, or 3<sup>4</sup>.</p> Congratulations, you have completed the tutorial!"},{"location":"jokes/","title":"Hypercubing community in-jokes","text":"<p>Like any niche internet community, we\u2019ve accumulated some in-jokes over the years. In an effort to be welcoming to newcomers, here\u2019s a list of them!</p> <p>This page is specifically for in-jokes that have been used by multiple people over a relatively long time, and wouldn\u2019t be obvious to newcomers.</p>"},{"location":"jokes/#my-carrerr","title":"My carrerr","text":"<p>On 2022-10-31, Grant did a one-handed solve of the physical 2<sup>4</sup> on a whim and immediately set a world record of 3:55.62, beating Rowan\u2019s prior record by two and a half minutes and breaking three minute barriers. In response:</p> <p>Rowan: I worked so hard for my sub-7:00 Rowan: wth is this Grant: first try too Grant: lol Grant: it\u2019s uploading rn Rowan: wow Grant: first sub 6, sub 5, and sub 4 Luna: rowan in shambles Luna: what will he do Rowan: my carrerr Rowan: it\u2019s over</p> <p></p>"},{"location":"jokes/#sticker-soup","title":"Sticker soup","text":"<p>Hactar: You can always just make a soup of flat stickers with rules about how to move them around. It just becomes less and less usable. Physical 2<sup>4</sup> is special because the rules are fairly straightforward.</p> <p>In the wake of the Rowan\u2019s video The Quest to Build a 4D Rubik\u2019s Cube, many people joined the server proposing \u201c3D physical\u201d puzzles, which are flat 2D constructions of 3D puzzles. Generally, hypercubers are only interested in these as a way to explain how 4D physical puzzles work, since \u201c3D physical\u201d puzzles aren\u2019t mathematically interesting in their own right and they\u2019re more difficult to use than real 3D puzzles. They tend to become a \u201csoup\u201d of stickers that move according to arbitrary rules, a generalization of twisty puzzles that throws away all geometric relations.</p> <p>Luna: how many times do I have to say this Luna: dimensional \ud83d\udc4f analogies \ud83d\udc4f don\u2019t \ud83d\udc4f work \ud83d\udc4f for \ud83d\udc4f physical \ud83d\udc4f puzzle \ud83d\udc4f design \ud83d\udc4f</p> <p>Designing physical versions of 4D+ puzzles is generally very difficult and is usually mathematically impossible to do well. In the end, most end up becoming sticker soup.</p> <p></p>"},{"location":"jokes/#dunning-kruger-graph","title":"Dunning-Kruger graph","text":"<p>From Dunning-Kruger effect - Wikipedia</p> <p>The Dunning\u2013Kruger effect is a cognitive bias whereby people with low ability, expertise, or experience regarding a type of task or area of knowledge tend to overestimate their ability or knowledge.</p> <p>The Dunning-Kruger effect is especially common in hypercubing, which lies at the intersection of puzzle theory and higher-dimensional geometry, two niche mathematical fields. Of course, you don\u2019t need to be an expert in math to solve 4D puzzles, but if you have no 4D mathematical foundations then your understanding will probably be wrong at first.</p> <p>The Dunning-Kruger effect is sometimes described using this graph, where \u201ccompetence\u201d increases to the right and \u201cconfidence\u201d increases upward:</p> <p></p> <p>Of course, in reality the effect is not quite so extreme, and varies from person to person.</p>"},{"location":"jokes/#jambling","title":"Jambling","text":"<p>On 2023-01-03, in Hypercubers voice chat, a very sleepy Hactar mispronounced the word \u201cjumbling\u201d as \u201cjambling.\u201d Since then, some hypercubers have been using the phrases \u201cjambling\u201d or \u201cjamble\u201d instead of \u201cjumbling\u201d.</p>"},{"location":"jokes/#fake-anderson","title":"Fake Anderson","text":"<p>On 2023-01-12, in Hypercubers voice chat, Hactar and Luna were conversing with Anderson Taurence. During that time, a user named Jedi Cabanna Boy (Andreas Thompson) joined and continued the conversation, and Anderson left. But, their voices were similar enough that Hactar, who was distracted speedsolving 5<sup>4</sup>, didn\u2019t notice the switch, and repeatedly addressed Jedi as Anderson. Luna noticed and did not correct him.</p> <p>Once Hactar finally realized what was happening, Jedi changed their nickname on the server to Anderson (Beta), and later \ud83c\udd71a n d e r s o n.</p>"},{"location":"jokes/#cactus","title":"Cactus","text":"<p>On 2023-02-19, several members were brainstorming possible shapes for physical 5D puzzle pieces and named one of them \u201cCactus.\u201d</p> <p>Banderson: then yeah I think (compound of four cubes)-generated tetragonal icositetrahedron is good; C4CTi or something Banderson: C4QTi ? troller: \ud83c\udf35 Banderson: oh wait no C4Ct.I Banderson: or better yet I\u2019ll let akkei make a shorthand/pick a better name to describe it lol troller: Cacti Rowan: squeez cheezahedron Grant: Your shape, your name akkei Akkei: i still like the Akkei: we Do Not Have A Scheme for the cactus Grant: Cactus LOL \u2026 Grant: I don\u2019t care what actual name we end up giving it, I\u2019m calling it cactus in this channel</p>"},{"location":"jokes/#silence-derivative","title":"Silence, derivative","text":"<p>In early 2018, at the 13th Gathering for Gardner, Melinda\u2019s physical 2x2x2x2 was shown to Ern\u0151 Rubik himself. It was reported that his only comment was that none of the derivative puzzles matter and that only his original invention is important.</p> <p>On the night of 2023-06-25, Kitcen lay awake, unable to sleep, their mind plagued with the thought of Ern\u0151 Rubik with lasers coming out of his eyes to blow up a physical 2<sup>4</sup> while denouncing it and calling it \u201cderivative.\u201d</p> <p>30 minutes later, Akkei responded wordlessly with this image:</p> <p></p>"},{"location":"jokes/#grant-standingslice","title":"Grant Standingslice","text":"<p>In earlier versions of hypercubing.xyz, individual letters such as R, F, etc. showed tooltips indicating their use in common notation. On 2023-01-06, Hactar posted a screenshot of the leaderboards page in which the \u201cS\u201d in \u201cGrant S.\u201d had a tooltip that said \u201cStanding slice (parallel to F).\u201d</p> <p>Hactar: Fun fact: the \u201cS\u201d in Grant\u2019s name stands for \u201cStanding slice\u201d</p>"},{"location":"jokes/#mimcaf-and-celse-pign","title":"Mimcaf and Celse pign","text":"<p>Many hypercubers play Minecraft and Celeste, and have adopted common misspellings of those games. Akkei was the first to use \u201cmimcaf\u201d on 2022-12-03, and Rowan was the first to use the phrase \u201ccelse pign\u201d on 2023-09-30 as a misspelling of \u201cCeleste ping.\u201d</p>"},{"location":"jokes/#that-may-i-can","title":"That may I can","text":"<p>On 2024-11-09, OmnipotentEntity sent the following message in #offtopic-or-memes:</p> <p>I don\u2019t often remember my dreams. Last night I dreamt that xkcd started including puns of the phrase \u201cthat may I can.\u201d And it was supposed to be a reference to something. And everyone but me got it, and no one would explain it to me.</p> <p>Several members then responded with various images punning on the phrase.</p> <p> </p>"},{"location":"leaderboard-rules/","title":"Hypercubing Leaderboard Submission Rules","text":"<p>These rules are not written in legalese. Please don\u2019t try to exploit them. Ask in the Hypercubers Discord if you have any questions, comments, or concerns about these rules.</p> <p>These rules may be flexible, especially for new categories. For example, if you\u2019re speedsolving a really big puzzle that no one\u2019s done before, it might be reasonable to allow macros for it.</p>"},{"location":"leaderboard-rules/#general-rules","title":"General rules","text":"<ul> <li>These programs are recommended for speedsolving. If using a program not listed here, you should ask on the Discord first.</li> <li>The puzzle must be solved from a full scramble.<ul> <li>If the program you are using has a selectable scramble length, use the maximum finite length.</li> <li>No twists may be applied between the puzzle being scrambled and the timer starting, or else the solve counts as a DNF. Full-puzzle rotations, including gyros, are allowed.</li> <li>When the timer is stopped the puzzle must be solved, or else the solve counts as a DNF.</li> </ul> </li> <li>Spectators may commentate, but must not help the solver.</li> <li>Algorithm reference sheets are strongly discouraged.<sup>1</sup></li> <li>Reversing the scramble is not allowed; the solution must be novel.</li> </ul>"},{"location":"leaderboard-rules/#speedsolving-rules","title":"Speedsolving rules","text":"<p>These rules apply generally to speedsolving submissions unless the category has specific rules.</p> <ul> <li>Changing view settings mid-solve is allowed, even for no-filters categories.</li> <li>All speedsolves require video evidence, such as an uninterrupted screen recording.<ul> <li>The video must include scrambling the puzzle. When using Hyperspeedcube, the statusbar must be visible with the text \u201cScrambled fully.\u201d</li> <li>A timer must be visible on the screen during the solve. Timers built into the puzzle software are preferred.<ul> <li>Exceptions may be made for certain puzzle programs (such as Nan Ma\u2019s 11-cell) that have an integrated timer. On-screen timer is still recommended.</li> <li>The timer should have precision of 0.01 seconds or better. If it has less precision, it will be rounded up to the worst possible time with that precision a la WCA regulation A7c+.</li> </ul> </li> <li>Inspection time must not exceed 60 seconds. In other words, the solve timer must be started within 60 seconds of the puzzle being completely scrambled.</li> <li>If any moves are executed on the solved puzzle shortly after the timer stops, the moderators may retime or reject the solve at their discretion.</li> </ul> </li> <li>If using keyboard controls:<ul> <li>If possible, a keybinds reference must be visible during the solve.<sup>3</sup></li> <li>The keybinds should not be hyperoptimized for specific algorithms.<sup>4</sup></li> </ul> </li> <li>Log file is not required, but you should still save your PBs!</li> <li>Using software to compute a solution to the puzzle state is not allowed.</li> </ul>"},{"location":"leaderboard-rules/#filters","title":"Filters","text":"<ul> <li>Filter presets may be defined during the solve or beforehand.</li> <li>Changing sticker colors mid-solve or during inspection is considered equivalent to using piece filters.</li> <li>Highlighting or hiding pieces based on their current location does not count as piece filters, and so is allowed in no-filters categories.</li> </ul>"},{"location":"leaderboard-rules/#macros","title":"Macros","text":"<ul> <li>Macros consisting of a single move STM do not count as macros, and so are allowed in no-macros categories, provided that they are created during the solve or demonstrated in the video before the solve starts.</li> <li>Macros consisting of more than a single move must be defined during the speedsolve.</li> </ul>"},{"location":"leaderboard-rules/#average-rules","title":"Average rules","text":"<ul> <li>Average of 5 is computed according to WCA regulations 9f8 and 9f9.</li> <li>The screen recording must be uninterrupted for the entire average.</li> <li>There must not be excessive time (&gt;30 minutes) between solves.</li> <li>Scrambles must not be rejected between attempts.<ul> <li>If any scramble is rejected (not solved), it counts as a DNS (Did Not Start).</li> </ul> </li> </ul>"},{"location":"leaderboard-rules/#blindsolving-rules","title":"Blindsolving rules","text":"<ul> <li>Macros are allowed during solving.</li> <li>Piece filters/highlights are allowed during memorization but not during solving.</li> <li>All blindsolves require video evidence of the solver that clearly shows the screen and that they are not cheating by using some external reference.</li> <li>The solver does not need to be blindfolded, but the colors on the puzzle must be invisible during the solve.</li> <li>Using software to compute a solution to the puzzle state is not allowed.</li> <li>Besides those rules, typical blindsolving rules apply:<ul> <li>Final time = memorization time + solving time.</li> <li>Writing anything down isn\u2019t allowed.</li> </ul> </li> </ul>"},{"location":"leaderboard-rules/#one-handed-solving","title":"One Handed Solving","text":"<ul> <li>During the solve, you must use only one hand to operate the puzzle. You cannot use the assistance of other body parts. Penalty: disqualification of the attempt (DNF).</li> <li>You cannot switch hands during the solve, once you turn the puzzle with one hand, you cannot use the other hand for the rest of the attempt.</li> <li>You may use both hands during inspection.</li> <li>Physical:</li> <li>Usage of the table or other surfaces as a support is allowed.</li> <li>You may scramble the puzzle with both hands</li> <li>Virtual:</li> <li>Submissions must show video of the keyboard/mouse being operated by only one hand during the duration of the attempt.</li> </ul>"},{"location":"leaderboard-rules/#real-life-puzzle-rules","title":"Real-life puzzle rules","text":"<ul> <li>All real-life puzzle solves must have video evidence that shows the puzzle fully in frame throughout the solve and shows the entire scrambling and solving process as well as the timer.</li> <li>Scrambles must be generated by a computer program that produces a random state or at least this many random moves:<ul> <li>Physical 2<sup>4</sup>: see below</li> <li>Hemimegaminx: 30 moves</li> <li>(Virtual) Physical 3<sup>4</sup>: 3 Physical 2<sup>4</sup> scrambles with at least 4 secondary axis changes</li> </ul> </li> </ul>"},{"location":"leaderboard-rules/#physical-hypercube-rules","title":"Physical Hypercube rules","text":"<p>See Canonical Moves for more details.</p> <ul> <li>All rules for real-life puzzles apply.</li> <li>Allowed moves for physical hypercube events are limited to 2 categories, the canonical moveset originally made by the hypercubing mailing list for the physical 2x2x2x2 as well as a few additional moves:<ul> <li>Canonical moves:<ul> <li>All R and L cell rotations</li> <li>U/D y2</li> <li>F/B z2</li> <li>I/O x* (a.k.a. axial twist)</li> <li>Any of many equivalent gyro algorithms</li> </ul> </li> <li>Additional moves:<ul> <li>U/D x2/z2</li> <li>F/B x2/y2</li> <li>I y2/z2</li> </ul> </li> <li>3<sup>4</sup> specific moves:<ul> <li>Any equivalent primary or secondary axis gyro</li> <li>Half gyro (i.e. gyroing a cell, applying any rotation, and ungyroing it)</li> </ul> </li> </ul> </li> <li>For 2<sup>4</sup>, scrambles must be generated by this page or any equivalent scramble generator.<ul> <li>Hand scrambles are no longer allowed, as they have an increased chance to have an easier solution than random state scrambles.</li> <li>It\u2019s ok if you mess up the computer generated scramble a little bit. It should still be way more random than any hand scramble.</li> </ul> </li> <li>Any full puzzle rotation that doesn\u2019t change the state (including the Gyro) may be applied to the puzzle during inspection; other moves may not.</li> </ul>"},{"location":"leaderboard-rules/#fewest-moves-solving-rules","title":"Fewest-moves solving rules","text":"<ul> <li>Log files are required for submission.</li> <li>Video evidence is not required.</li> <li>Collaboration is allowed; each collaborator must be given the option to be credited for the solve, and should be credited if their contributions were significant.</li> <li>Moves are counted using STM.</li> <li>Use of computer software to generate a partial or full solution is allowed, but must be noted in the submission.</li> </ul>"},{"location":"leaderboard-rules/#principles-when-writing-new-speedsolving-software","title":"Principles when writing new speedsolving software","text":"<p>If you\u2019re thinking of writing a new program for speedsolving or suggesting a new feature for Hyperspeedcube, here are some principles we try to follow:</p> <ul> <li>No more than one move per keypress.</li> <li>If your program has keybinds (especially customizable ones), add some reference that shows what keys are being pressed and what they\u2019re doing.</li> <li>New features should hopefully make solving strategy more interesting. Some examples:<ul> <li>Macros on the 3<sup>4</sup> encourage commutator spam, which is very boring compared to layer-by-layer or F2L methods, so they are not allowed for speedsolves.</li> <li>Piece filters reduce time spent looking for pieces, which is boring to do and boring to watch. There\u2019s a trade-off there: piece filters encourage a stricter solving order, which is less interesting in a way, but this also enables 3-Block, a very interesting method.</li> </ul> </li> <li>New features should ideally have some justification based on 3D speedsolving. For example, multiple keybind sets is analogous to different grips on a 3D puzzle.<sup>2</sup></li> </ul> <ol> <li> <p>We can\u2019t stop you from using an algorithm reference, but it\u2019s not in the spirit of the competition and it\u2019ll probably slow you down.\u00a0\u21a9</p> </li> <li> <p>You might hold a 3<sup>3</sup> differently to execute <code>&lt;M,U&gt;</code> moves more efficiently compared to <code>&lt;R,U,F&gt;</code> moves. Similarly, a 4D creature might have a specialized grip on the 3<sup>4</sup> for RKT compared to general moves.\u00a0\u21a9</p> </li> <li> <p>If the program doesn\u2019t have a built-in keybinds reference (such as Akkei\u2019s physical 3<sup>4</sup> simulator) then you probably don\u2019t need one.\u00a0\u21a9</p> </li> <li> <p>You should not be able to execute a meaningful algorithm by pressing a sequence of keys in a line on the keyboard. Keybinds should be laid out in a way that makes more sense than a way that is useful for an algorithm. A keybind set optimized for general RKT is fine. If you have a question about these rules, ask on the Hypercubers Discord server.\u00a0\u21a9</p> </li> </ol>"},{"location":"notation/","title":"Notation","text":"<p>This page explains notation specifically for cell-turning virtual n<sup>d</sup> puzzles.</p>"},{"location":"notation/#4d-notation","title":"4D Notation","text":""},{"location":"notation/#cells","title":"Cells","text":"<p>Yellow cell rotating</p> <p> </p> <p>Each side of an n<sup>4</sup> hypercube is called a cell, and consists of a cubic grid of n<sup>3</sup> stickers. Because each side is cubic, they can be rotated with cubic symmetry. A cube has 24 different possible orientations, meaning that each side of a 4D puzzle can be oriented in 24 different ways.</p> <p>There are eight cells, six of them using the same letters as that of the 3<sup>3</sup>: <code>U</code> (up), <code>D</code> (down), <code>F</code> (front), <code>B</code> (back), <code>R</code> (right), <code>L</code> (left). The one that you can see on the inside is called <code>I</code> (inside), and the one opposite of that (which is hidden) is called <code>O</code> (outside). This means we use the letters <code>R</code> <code>L</code> <code>U</code> <code>D</code> <code>F</code> <code>B</code> <code>O</code> <code>I</code>.</p>"},{"location":"notation/#pieces","title":"Pieces","text":"<p>Cell-turning hypercubes have 4 different types of pieces (with some slight variations for big hypercubes). These are the 1c (1-colored) centers, 2c ridges, 3c edges, and 4c corners. You can label each piece based on which cells it is on. The 3c piece that has stickers on the <code>I</code>nside, <code>R</code>ight, and <code>U</code>p cells would be called the <code>IUR</code> piece.</p>"},{"location":"notation/#twists","title":"Twists","text":"<p>Twists are notated based on which piece you click on to do the turn, with the first letter determining which sticker of that piece to click on. For example:</p> <ul> <li><code>RO'</code> means to left click the R cell sticker of the RO piece.</li> <li><code>IUR</code> means to left click the I sticker of the IUR piece (edge twists are symmetrical, so it doesn\u2019t matter if you left or right click).</li> <li><code>FRUI</code> means to right click the F sticker of the FRUI piece.</li> </ul> <p>For the slice layers, we use <code>M</code> <code>E</code> <code>S</code> <code>P</code>, where P is the slice between <code>I</code> and <code>O</code> (although with n<sup>5</sup> notation now using P for Posterior, this may be changed in the future). Each slice follows twists the same direction as which side on the axis it is closer to in the alphabet. For example, <code>M</code> follows <code>L</code> because it is closer to <code>L</code> than <code>R</code> in the alphabet. This means that <code>E</code> follows <code>D</code>, <code>S</code> follows <code>F</code>, and <code>P</code> follows <code>O</code>.</p> <p>Wide moves are tricky, as we are now using the letter <code>w</code> for the 4th dimension axis. One way to get around this is to write the numbers you hold down on the keyboard (in MC4D/MPU etc) while clicking on a piece. On a 3-layered puzzle, holding down 2 does a slice move, and holding down 1 and 2 will do a wide move.</p> <ul> <li><code>{2}RO</code> means to hold 2 while doing an RO move (essentially an M move).</li> <li><code>{2-3}UO'</code> means to hold 2 and 3 while doing a UO\u2019 move.</li> <li><code>{2-4}IF</code> means to hold 2, 3, and 4</li> </ul>"},{"location":"notation/#commutators","title":"Commutators","text":"<p>Many algorithms are constructed using commutators and conjugates, so there is a compact notation for them using square brackets. See Commutators - Notation.</p>"},{"location":"notation/#algorithms","title":"Algorithms","text":"<p>A shorter notation was developed to write specific algorithms, such as RKT cancels. All letters besides <code>I</code> and <code>O</code> correspond to their -O variants. <code>R U R' U'</code> would mean <code>RO UO RO' UO'</code>. For the wide O cell flips, they are notated with 3D rotations, such as <code>{1-2}Oxz2</code>. Using 3D rotations in this way is totally arbitrary, and its only purpose is for execution.</p> <p>There is also a notation where you put a star after the name of a cell to mean that you twist it in any direction, such as <code>R*</code>.</p>"},{"location":"notation/#rotations","title":"Rotations","text":"<p>3D notation for rotations doesn\u2019t really generalize to higher dimensions. For example, we call an <code>x</code> rotation x because it rotates the puzzle \u201caround the x-axis\u201d. However, this is unhelpful because rotations don\u2019t actually happen around an axis. Instead it\u2019s better to think of rotations as happening within a 2D plane. When you\u2019re doing an <code>x</code>, the whole puzzle is really being rotated within the zy plane. And writing rotations like this generalizes to higher dimensions, so that is what we use.</p> <p>First, we make a certain side from each axis be the \u201cpositive\u201d side. There are standards for this in 3D (such as the right-handed rule). On the x-axis, going to the right is positive and going left is negative. This makes <code>R</code> the positive side from the x-axis. The same goes for the other axes: <code>U</code>, and <code>F</code> are the positive sides in 3D. In 4D we add two new sides, and have to decide which one is positive and which one is negative. Because of the projection, the side that we can\u2019t see is closer to the 4D camera, making <code>O</code> the positive w-axis cell, and <code>I</code> the negative.</p> <p>To actually notate the rotations, write the letters of the two axes that form the plane that the puzzle is rotating in, in the order of which positive side on that axis goes to the positive side of the other axis. For example: rotating the positive y-axis side to the positive x-axis side (rotating U to R) would be written <code>yx</code> (and looks like <code>z</code> in 3D notation).</p> <ul> <li><code>yw</code>: bring +y to +w (rotate U to O)</li> <li><code>xz</code>: bring +x to +z (rotate R to F (this is called <code>y</code> in 3D rotation notation))</li> </ul> <p>Note how we don\u2019t have to use the <code>'</code> prime symbol because you can just swap the letters (wy is the inverse of yw). You can also add a <code>2</code> to the end for double rotations, e.g. <code>wx2</code>, <code>yz2</code> etc.</p> <p>This makes it a really nice system because it only ever uses two letters, no matter how many dimensions. You can also use it on n<sup>3</sup> puzzles in order for more multi-dimensional consistency: <code>xy</code> means move x+ to y+ (R to U [z\u2019 rotation]).</p>"},{"location":"notation/#turn-metrics","title":"Turn metrics","text":"<p>There are many different ways to count the number of twists performed during a solve. All of these metrics (besides ETM) have their own Quarter Turn counterparts, where twists are broken up into 90\u00b0 twists. For example, a 180\u00b0 face twist takes two 90\u00b0 twists, while a 120\u00b0 edge twist takes three. Listed below are the metrics used by HSC. STM is used the most, but others are sometimes relevant.</p> ATM <ul> <li>Consecutive twists of the same axis are combined, even with different layers.</li> <li>Whole-puzzle rotations are not counted.</li> </ul> ETM <ul> <li>Twists are counted as they are executed, including whole-puzzle rotations.</li> </ul> STM <ul> <li>Whole-puzzle rotations are not counted.</li> <li>Slice twists count as one move.</li> <li>Consecutive twists of the same axis and layers are combined.</li> </ul> BTM <ul> <li>Whole-puzzle rotations are not counted.</li> <li>Noncontiguous slice twists are split into contiguous slice twists.</li> <li>Consecutive twists of the same axis and layers are combined.</li> </ul> OBTM <ul> <li>Whole-puzzle rotations are not counted.</li> <li>Slice twists are split into contiguous outer-block twists.</li> <li>Consecutive twists of the same axis and layers are combined.</li> </ul> MC4DTM <p>a.k.a. \u201cwhatever MC4D says\u201d</p> <ul> <li>Twists are counted as they are executed.</li> <li>Whole-puzzle rotations counted only if they are executed as moves.</li> <li>Double rotations and certain reorientations are impossible to execute as one move.</li> <li>Any move that counts as 1 STM is possible with 1 or 2 MC4DTM moves.<sup>1</sup></li> </ul>"},{"location":"notation/#5d-notation","title":"5D+ Notation","text":"<p>Below is a table of the standardized letters for each pair of cells up to 10 dimensions. The 5D cell names are <code>A</code> (anterior) and <code>P</code> (posterior). The rest of them are just Greek letters, with no names for the side.</p> Side (+) Side (-) Axis name R L x U D y F B z O I w A P v \u0393 \u0394 u \u0398 \u039b t \u039e \u03a0 s \u03a3 \u03a6 r \u03a8 \u03a9 q <p>In 5+ dimensions, using 2 letters (eg. <code>RO</code>) is no longer enough information to determine the twist because a cell could be rotated in more than 1 plane simultaneously. This means that we have to break up a cell\u2019s twists into all 90 or 180 degree moves. For the moves of each cell, we use the 4D puzzle rotation notation. For example, <code>Rzy</code> means to do a twist of the <code>R</code> cell that rotates its current positive <code>z</code>-axis to the positive <code>y</code>-axis. You can put a 2 at the end for a 180 degree twist. Finally, slice layers use the layer mask notation instead of new letters for each slice (eg. <code>{1-2}\u0393yw2</code>). </p> <ol> <li> <p>This is due to the 2-click theorem.^[citation needed]^\u00a0\u21a9</p> </li> </ol>"},{"location":"progression/","title":"Progression","text":"<p>This is an outline of how to make your way through the world of hypercubing. Learning puzzles in another order could lead to confusion or an incomplete understanding in the long run.</p> <p>Hactar</p> <p>It\u2019s very difficult to understand what\u2019s really going on in a physical puzzle without first understanding virtual puzzles. We recommend starting with virtual 3^4 for the same reason that 3D cubers typically recommend starting with 3x3x3.</p>"},{"location":"progression/#getting-started","title":"Getting Started","text":"<p>Completely new to twisty puzzles? Never solved a Rubik\u2019s Cube? Here\u2019s where to start:</p> <p>K-Card Game is a basic piece cycling puzzle using cards. Can you rearrange them into the correct order? After completing it a few times, try and lower your movecount to reach the optimal solution. Also notice how you\u2019re always just swapping 2 cards, and you need to do cycles of swaps to rearrange them correctly.</p> <p>Loopover is similar to sliding puzzles (such as the infamous 15-puzzle) but there\u2019s no missing tile and the board loops over (hence the name). It might look overwhelming, but it\u2019s actually recommended to start with a 5x5 size board. After solving that puzzle, try a 4x4 board, and discover the differences between odd and even size boards.</p> <p>Now on to actual twisty puzzles. You only have 1 chance to try and solve a Rubik\u2019s Cube by yourself with no tutorial. Definitely give that a shot first if you\u2019re brave enough. Otherwise, look up some tutorials and try and get beginners 3D intuition manipulating the cube. If you don\u2019t yet own a Rubik\u2019s Cube, you can play with this interactive widget below, but it\u2019s very much recommended to get a physical puzzle and feel the geometry of it.</p>"},{"location":"progression/#nnnns","title":"NxNxNxN\u2019s","text":"<p>First, make sure you know how to solve a 3x3x3 Rubik\u2019s Cube. At the very minimum, knowing a beginner\u2019s method is enough, but knowing more advanced methods or  techniques, such as blockbuilding or intuitive F2L, could make getting into hypercubing easier. In addition, you should have at least a basic understanding of 4-dimensional space. You can browse our introduction, or watch some of the hypercubing playlists.</p> <pre><code>flowchart LR\n    A[3x3x3]\n    B[3x3x3x3]\n    C[2x2x2x2]\n    D[4x4x4x4]\n    E[5x5x5x5+]\n    F[Physical 2x2x2x2]\n    G[Virtual Physical 3x3x3x3]\n    A --&gt; B\n    B --&gt; C\n    B --&gt; D\n    C --&gt; F\n    D --&gt; E\n    F --&gt; G</code></pre>"},{"location":"progression/#other-4d-puzzles","title":"Other 4D Puzzles","text":"<p>There are many types of 4D puzzles, not just the hypercubes. These include hypercuboids, duoprisms, reqular 4D polytopes, and more. These puzzles require much more knowledge than just the 3x3x3. You\u2019ll need to know how to solve 3D cuboids, and generally be able to figure out new puzzles using commutators.</p> <pre><code>flowchart LR\n    Hypercuboids --&gt; Duoprisms --&gt; Polytopes\n\n    subgraph Polytopes\n    direction LR\n    Q[5-cell]\n    R[16-cell]\n    S[24-cell]\n    T[120-cell]\n    U[600-cell]\n    end\n\n    subgraph Duoprisms\n    direction LR\n    Z[\"{5}x{4}\"]\n    Y[\"{5}x{3}\"]\n    X[\"{5}x{5}\"]\n    end\n\n    subgraph Hypercuboids\n    direction LR\n    D[1x3x3x3]\n    E[2x3x3x3]\n    F[2x2x2x3]\n    G[2x2x3x3]\n    end</code></pre>"},{"location":"progression/#non-euclidean-puzzles","title":"Non-Euclidean Puzzles","text":"<p>MagicTile features a bunch of puzzles where the dimensions behave differently. Our normal dimensions are called Euclidean, whereas you can build virtual puzzles using Non-Euclidean geometry. Magic Hyperbolic Tile {6,3,3} is a program for a puzzle in 3D hyperbolic space.</p> <pre><code>flowchart LR\n    A[Torus Rubik]\n    B[Klein Bottle Rubik]\n    C[Hyperbolic Rubik]\n    E[Hemi-Megaminx]\n    D[Other]\n    A --&gt; B\n    A --&gt; C\n    B --&gt; E --&gt; D</code></pre>"},{"location":"progression/#5d-puzzles","title":"5D+ puzzles","text":"<p>Jumping to 5D puzzles after solving your first 4D puzzle may seem intimidating. Once you\u2019ve become familiar with 4D puzzles, making the jump is basically the same as going from 3D to 4D. Start with the 3<sup>5</sup> and other N<sup>5</sup> sizes. Then you might want to try some of the 5D hypercuboids or other 5D puzzles in MPU. After that you might want to explore even higher dimensions.</p> <pre><code>flowchart TD\n    subgraph 5D\n    direction LR\n    B[\"3\u2075\"]\n    C[\"2\u2075\"]\n    D[\"4\u2075\"]\n    F[5D simplex]\n    B --&gt; C --&gt; D\n    F\n    end\n    subgraph 6D\n    direction LR\n    G[\"3\u2076\"]\n    H[\"Other n\u2076\"]\n    G --&gt; H\n    end\n    subgraph 7D\n    direction LR\n    V[\"3\u2077\"]\n    Q[\"Other n\u2077\"]\n    V --&gt; Q\n    end\n    5D --&gt; 6D --&gt; 7D</code></pre>"},{"location":"videos/","title":"YouTube Videos &amp; Playlists","text":"<p>List of popular videos and playlists related to hypercubing.</p>"},{"location":"videos/#youtube-videos","title":"YouTube Videos","text":"<ul> <li>Demystifying the 4D Rubik\u2019s Cube</li> <li>Cracking the 4D Rubik\u2019s Cube with simple 3D tricks</li> <li>How to Solve a 4D Rubik\u2019s Cube | Beginner\u2019s Method Tutorial</li> <li>The Quest to Build a 4D Rubik\u2019s Cube</li> </ul>"},{"location":"videos/#youtube-playlists","title":"YouTube Playlists","text":"<ul> <li>Introduction to Hypercubing</li> <li>Hypercubing Crash Course</li> <li>Melinda\u2019s 2x2x2x2 UWRs in order</li> <li>3x3x3x3 UWRs</li> <li>4D Twisty Puzzles</li> <li>Melinda\u2019s 2x2x2x2</li> <li>Grant\u2019s hypercubing videos</li> </ul>"},{"location":"algorithms/","title":"Index","text":"<p>This page lists resources for various 4D+ algorithms.</p> <p>These won\u2019t help you solve a puzzle for the first time</p> <p>Please note that you do not need to learn additional algorithms for hypercubing to get started. These are for speedsolving at an advanced level and shave off mere seconds or fractions of a second from solve times. </p> <p>RKT Cancel Algorithms</p>"},{"location":"algorithms/#external-links","title":"External Links","text":"<ul> <li>3<sup>4</sup> Commutators List by Alvin (RKT parity algs are near the bottom)</li> <li>PLL + RKT parity algs by Eff</li> <li>2<sup>4</sup> OLL List by PKEarth</li> <li>PBLBC+RPA by Rowan (For physical 2<sup>4</sup>)</li> <li>3x3x3x3 Beginners Algorithm Sheet by Alvin</li> <li>2<sup>4</sup> algs by Luna</li> <li>3<sup>4</sup> PLL-4 2c algs + recognition by Josie</li> </ul>"},{"location":"algorithms/rkt-cancel-algs/","title":"RKT Cancel Algorithms","text":"<p>These won\u2019t help you solve a puzzle for the first time</p> <p>You do not need to learn RKT cancel algs to solve any puzzle. RKT can and should be done completely intuitively unless you are already speedsolving at a high level and wish to improve this step.</p> <ul> <li>See Notation and Commutator notation first.</li> <li>Single letters represent \u201cBig 3D\u201d moves. (<code>R</code> = <code>RO</code>, <code>U</code> = <code>UO</code>, etc.)</li> </ul>"},{"location":"algorithms/rkt-cancel-algs/#rkt-cancel-algorithms_1","title":"RKT Cancel Algorithms","text":""},{"location":"algorithms/rkt-cancel-algs/#44-edge-swap-parity","title":"4<sup>4</sup> edge swap parity","text":"Image Description RKT Cancel Algorithm UF and UR edges swapped <code>[f' l': [[r' U' l': D2], Iy2]]</code>"},{"location":"algorithms/rkt-cancel-algs/#f2l-triggers","title":"F2L triggers","text":"Image Description 2RKT Cancel Algorithm Made Insert <code>R {1-2}Ozx2 U' R' {1-2}Ozx2 U</code> Split Insert <code>{1-2}Ozx2 R U {1-2}Ozx2 R' U'</code> Double Sexy <code>R U R' U' {1-2}Ozx2 R U R' U' {1-2}Ozx2</code>"},{"location":"algorithms/rkt-cancel-algs/#eoll","title":"EOLL","text":"Image Name RKT Cancel Algorithm Dots <code>F (R U R' U') F' 2Oy2 Fw (R U R' U') Fw'</code> L <code>F ({1-2}Ozx2 U R {1-2}Ozx2 U' R') F'</code> Line <code>F (R U {1-2}Ozx2 R' U' {1-2}Ozx2) F'</code>"},{"location":"algorithms/rkt-cancel-algs/#ocll","title":"OCLL","text":"Image Name RKT Cancel Algorithm Sune <code>R U R' {1-2}Ozx2 U R {1-2}Ozx2 U2 R'</code> Antisune <code>R U2 {1-2}Ozx2 R' U' {1-2}Ozx2 R U' R'</code> H <code>R U2 R' U' {1-2}Ozx2 R U R' U' {1-2}Ozx2 R U' R'</code> U <code>(R U R' U R U2 R') Iy (R U2 R' U' R U' R') Iy'</code> T <code>(R U R' U R U2 R') Iy' (R U2 R' U' R U' R') Iy</code> L <code>(R U R' U R U2 R') Iy2 (R U2 R' U' R U' R') Iy2</code> Pi <code>R U2 {1-2}Ozx2 R2 U' R2 U' R2 {1-2}Ozx2 U2 R</code>"},{"location":"algorithms/rkt-cancel-algs/#cpll","title":"CPLL","text":"<p>To avoid RKT parity</p> <ul> <li>solve your RKT debt.</li> <li>if you have an adjacent corner swap, put the solved LL corner in IUFL and do the respective A-perm.</li> <li>if you have a diagonal corner swap,<ul> <li>if the IUFR corner belongs in IUBR, do a Iy.</li> <li>so now the IUFR corner belongs in IUFL.</li> <li>do Na-perm.</li> </ul> </li> </ul> Image Name RKT Cancel Algorithm Aa <code>(Ix) R' U {1-2}Oz R' D2 R {1-2}Oz' U' R' D2 {1-2}Oz' R2</code> Ab <code>(Ix) R2 {1-2}Oz D2 R U {1-2}Oz R' D2 R {1-2}Oz' U' R</code> Na <code>R U' L U2 R' U L' {1-2}Oy2 R U' L U2 R' U L'</code> TODO Nb"},{"location":"algorithms/rkt-cancel-algs/#epll","title":"EPLL","text":"Image Name RKT Cancel Algorithm Ub <code>R2 U R U {1-2}Ozx2 R' U' R' U' R' {1-2}Ozx2 U R'</code> Ua <code>R U' {1-2}Ozx2 R U R U R {1-2}Ozx2 U' R' U' R2</code> Z <code>(R U' R U R U R U' R' U' R2) Iy2 (R2 U R U R' U' R' U' R' U R') Iy2</code>alternate: <code>M2 U' M U2 M' Iy2 M U2 M' U M2</code> H <code>M2 U' M2 U2 M Iy2 M' U2 M Iy2 M U M2</code>alternate: <code>R2 U2 R U2 {1-2}Ozx2 R2 U2 R2 {1-2}Ozx2 U2 R U2 R2</code>"},{"location":"algorithms/rkt-cancel-algs/#2rkt-cancel-algorithms","title":"2RKT Cancel Algorithms","text":"Image Description 2RKT Cancel Algorithm Double Sexy Move <code>R U {1-2}Ozx2 R' U' {1-2}Azx2 R U {1-2}Ozx2 R' U' {1-2}Azx2</code>"},{"location":"algorithms/rkt-cancel-algs/#ocll_1","title":"OCLL","text":"Image Name RKT Cancel Algorithm H <code>R U2 {1-2}Azx2 R' U' {1-2}Ozx2 R U {1-2}Azx2 R' U' {1-2}Ozx2 R U' R'</code> U <code>(R U R' {1-2}Azx2 U R {1-2}Azx2 U2 R') Iy (R U2 {1-2}Azx2 R' U' {1-2}Azx2 R U' R') Iy'</code> T <code>(R U R' {1-2}Azx2U R {1-2}Azx2 U2 R') Iy' (R U2 {1-2}Azx2 R' U' {1-2}Azx2 R U' R') Iy</code> L <code>(R U R' {1-2}Azx2 U R {1-2}Azx2 U2 R') Iy2 (R U2 {1-2}Azx2 R' U' {1-2}Azx2 R U' R') Iy2</code>"},{"location":"algorithms/rkt-cancel-algs/#epll_1","title":"EPLL","text":"Image Name RKT Cancel Algorithm Z <code>(R U' {1-2}Azx2R U R U R {1-2}Azx2 U' R' U' R2) Iy2 (R2 U R U {1-2}Azx2 R' U' R' U' R' {1-2}Azx2 U R') Iy2</code>"},{"location":"drafts/","title":"Drafts","text":"<p>Put drafts for pages in this directory</p>"},{"location":"drafts/grip-theory/","title":"Grip theory","text":""},{"location":"drafts/grip-theory/#rkt-rank","title":"RKT rank","text":"<p>As above, the existence of RKT was caused by the existence of a certain stabilizer of two grips. However, not all such stabilizers will enable RKT. On the 3x3x3 grip system, there is a stabilizer of <code>R</code> and <code>L</code> that can only rotate the anti-middle layer (the intersection of the <code>R</code> and <code>L</code> layers) and cannot cause the <code>R</code> layer to emulate another puzzle. In order for the emulation to work, there must be a twist whose axis is <code>R</code> that does not fix <code>L</code>. In general, RKT is possible on a puzzle when there are two grips \\(a\\) and \\(b\\) where there is a non-identity element that fixes \\(a\\) and \\(b\\), and a different element that fixes \\(a\\) but moves \\(b\\).</p> <p>This can be generalized even further. We can define an RKT rank-0 puzzle to be one with no twists, i.e. one where the stabilizer of any grip is the whole group. Then, we proceed recursively: an RKT rank-\\((n+1)\\) puzzle is one where there is some grip \\(a\\) such that the \\(a\\)-stabilizer of the grip group is an RKT rank-\\(n\\) puzzle, after removing grips that are stabilized by every element of the stabilizer. This definition correlates with the geometric rank of a puzzle; the RKT rank of a 3<sup>n</sup> puzzle is \\(n-2\\) for \\(n\\geq 2\\).</p> <p>TODO THIS NEEDS DEVELOPMENT</p>"},{"location":"drafts/hyper-puzzle-notation/","title":"Hyper Puzzle Notation","text":"<p>This is a draft</p> <p>This document is NOT final and might be outdated! Before making anything based on this (including software, documentation, or learning resources), please ping Hactar and/or Luna.</p>"},{"location":"drafts/hyper-puzzle-notation/#syntax","title":"Syntax","text":"<p>Syntax is the same across all puzzles, so that a move sequence may be unambiguously parsed without first selecting a puzzle. Some semantics are shared.</p>"},{"location":"drafts/hyper-puzzle-notation/#node","title":"Node","text":"<p>A node is a unit of notation.</p> <p>All node types (except exceptions for specific puzzles) can be repeated and/or inverted using a multiplier immediately after them.</p>"},{"location":"drafts/hyper-puzzle-notation/#move","title":"Move","text":"<p>A move is a node representing a twist or rotation of the puzzle. It has four components:</p> <ul> <li>Layer mask (optional)</li> <li>Family (required)</li> <li>Bracketed transform (optional)</li> </ul> <p>Because moves are a kind of node, they can also have a multiplier after them.</p>"},{"location":"drafts/hyper-puzzle-notation/#layer-mask","title":"Layer mask","text":"<p>A layer mask is an optional tilde <code>~</code> optionally followed by one of the following:</p> <ul> <li>Positive integer.<ul> <li>Example: <code>3R</code> means \u201c<code>R</code> on the 3rd layer\u201d</li> </ul> </li> <li>Range of positive integers separated by <code>-</code>.<ul> <li>Example: <code>2-4R</code> means \u201c<code>R</code> on layers 2, 3, and 4\u201d</li> </ul> </li> <li>Curly braces with positive and negative integers and ranges separated by <code>..</code>.<ul> <li>Example: <code>{2..4}R</code> means \u201c<code>R</code> on layers 2, 3, and 4\u201d (equivalent to <code>2-4R</code>)</li> <li>Example: <code>{1,3..5,7}R</code> means \u201c<code>R</code> on layers 1, 3, 4, 5, and 7\u201d</li> <li>Example: <code>{1..-1}R</code> means \u201c<code>R</code> on all layers\u201d</li> <li>Example: <code>{2..-2}D</code> is one generalization of <code>E</code> to NxNxN puzzles with many layers</li> <li>Example: <code>{3,-2}R</code> means \u201c<code>R</code> on layer 3 and the 2nd layer from the other side\u201d</li> </ul> </li> </ul> <p>Reversed ranges are the same: <code>{1..-1}</code> is the same as <code>{-1..1}</code> and <code>1-3</code> is the same as <code>3-1</code>.</p>"},{"location":"drafts/hyper-puzzle-notation/#family","title":"Family","text":"<p>A move family is a string of uppercase or lowercase Latin or Greek letters.</p> <p>Move families on 3<sup>3</sup> include <code>R</code>, <code>F</code>, <code>Rw</code>, <code>x</code>, etc. Move families on 3<sup>4</sup> include <code>R</code>, <code>RO</code>, <code>LDBI</code>, <code>wz</code>, etc. Move families on 3<sup>5</sup> include <code>U</code>, <code>A</code>, <code>Azx</code>, etc.</p> <p>A move family often represents a complete move (as is the case on 3<sup>3</sup>), but not always. On 3<sup>4</sup> and 3<sup>5</sup>, move families such as <code>R</code> require a bracketed transform afterward to specify a complete move.</p>"},{"location":"drafts/hyper-puzzle-notation/#bracketed-transform","title":"Bracketed transform","text":"<p>A bracketed transform is a set of square brackets <code>[]</code> with contents inside consisting of letters, numbers, and symbols (not allowing more square brackets <code>[]</code>).</p> <p>Different puzzles can use bracketed transforms in different ways. There are two common ways most puzzles use them: sequential transforms and transform constraints.</p>"},{"location":"drafts/hyper-puzzle-notation/#sequential-transforms","title":"Sequential transforms","text":"<p>On some puzzles, a single move is most efficiently written as a composition of two moves on the same axis. For example, <code>Rj</code> represents the small jumbling angle ~70.5287794\u00b0, so <code>R[1 j']</code> is equivalent to <code>&amp;(R Rj')</code>.</p> Why are sequential transforms necessary? <p>Consider a complex layer mask, like <code>{1,3,5,7}</code> (common for checkerboards). Without sequential transforms, we must duplicate the layer mask: <code>{1,3,5,7}R {1,3,5,7}Rj'</code>. With sequential transforms, we can write <code>{1,3,5,7}R[1 j']</code>.</p>"},{"location":"drafts/hyper-puzzle-notation/#transform-constraints","title":"Transform constraints","text":"<p>On some puzzles, moves can only be written using a list of constraints separated by <code>|</code>, where each constraint is two axes separated by <code>-&gt;</code>. For example, <code>I[F-&gt;U | R-&gt;P]</code> represents a double rotation twist on 3<sup>5</sup>. When a transform is underconstrained, the \u201csimplest\u201d transform that matches the constraints is typically correct. (This should only be used for moves where there is an obvious answer.)</p> <p>This also allows writing moves in an abstract or puzzle-general way.</p> <ul> <li>Example: <code>R[F-&gt;U]</code> represents an <code>R</code> move on 3<sup>3</sup> and FTO, and an analogous move on all higher-dimensional 3<sup>n</sup></li> </ul> Why <code>|</code>? <ul> <li>It\u2019s not used for anything else in notation.</li> <li>It\u2019s unlikely to be useful for anything else.</li> <li>If it is ever useful for anything else, this is only a very narrow context in which it is already used.</li> <li>It\u2019s already used to introduce constraints in set-builder notation: \\(\\{ x | x &lt; 5 \\}\\).</li> <li>Comma <code>,</code> and colon <code>:</code> are already used for commutators and conjugates.</li> </ul> Open questions <ul> <li>How to write a fixed axis? Possibilities:</li> <li><code>I[R-&gt;U | F]</code></li> <li><code>I[R-&gt;U | F-&gt;F]</code></li> <li>some symbol before <code>F</code></li> </ul>"},{"location":"drafts/hyper-puzzle-notation/#rotation","title":"Rotation","text":"<p>A rotation is a node representing a rotation of the whole puzzle. It is similar to a move, but it has no layer mask and the family is optional. A rotation has three components:</p> <ul> <li><code>@</code></li> <li>Family (optional)</li> <li>Bracketed transform (optional)</li> </ul> <p>Examples:</p> <ul> <li><code>@R</code> is a rotation that moves like an <code>R</code> move.</li> <li><code>@[F-&gt;U]</code> is a rotation that takes <code>F</code> to <code>U</code>.</li> </ul> <p>Because rotations are a kind of node, they can also have a multiplier after them.</p> Why <code>@</code>? <ul> <li>It\u2019s a mnemonic for \u201call.\u201d</li> <li>It looks round, like a rotation.</li> <li>It\u2019s not already in use, and is unlikely to be used for anything else.</li> </ul>"},{"location":"drafts/hyper-puzzle-notation/#pause","title":"Pause","text":"<p>A pause is a node representing a pause. It is written using <code>.</code>.</p> <p>Pauses are sometimes used for reconstruction of speedsolves.</p> <p>Because pause are a kind of node, they can also have a multiplier after them.</p>"},{"location":"drafts/hyper-puzzle-notation/#group","title":"Group","text":"<p>A group is a sequence of moves surrounded by parentheses <code>()</code>, with an optional symbol before the opening parenthesis. There are four kinds of groups:</p> <ul> <li>Simple groups, which represent a logical grouping<ul> <li>Simple groups have no prefix symbol. Example: <code>(R U R' U')</code></li> <li>A simple group\u2019s move count should be equivalent to the moves on their own.</li> <li>A simple group may affect animation speed slightly or not at all.</li> </ul> </li> <li>Macro groups, which represent moves done using a macro in software.<ul> <li>Macro groups have <code>!</code> as a prefix symbol. Example: <code>!(R U R' U')</code></li> <li>A macro group\u2019s move count should be equivalent to the moves on their own.</li> <li>A macro group should animate very quickly or not at all.</li> </ul> </li> <li>Simultaneous groups, which represent moves done simultaneously.<ul> <li>Simultaneous groups have <code>&amp;</code> as a prefix symbol. Example: <code>&amp;(U D2)</code></li> <li>A simultaneous group should count as 1 ETM.</li> <li>A simultaneous group should animate simultaneously if possible. It may animate sequentially, but should take the same amount of time as a single move.</li> </ul> </li> <li>NISS groups, which represent moves done on the inverse puzzle state.<ul> <li>NISS groups have <code>^</code> as a prefix symbol. Example: <code>^(U F' D2)</code></li> <li>A NISS group\u2019s move count should be equivalent to the moves on their own.</li> <li>A NISS group\u2019s moves may be animated inverted before the scramble (most useful while constructing a solution) or inverted after the forwards solution (most useful while viewing a completed solution). These two might not be equivalent if the combined scramble + forwards solution + NISS solution is not the identity.</li> </ul> </li> </ul> <p>Simultaneous groups must not contain any groups. All other groups may contain any group inside them.</p> <p>Because groups are a kind of node, they can also have a multiplier after them.</p> Why don\u2019t macros count as 1 ETM? <p>Historically, hypercubing fewest-moves has effectively used ETM in whatever program, subject to the types of moves that program allowed. E.g., \u201cMC4DTM\u201d is a shorthand for \u201cETM, using only moves accessible in MC4D.\u201d This is a common concept that we want to have a name for.</p> <p>In software where a single move may take multiple mouse clicks or keypresses, ETM is already detached from the number of interactions, which is really the important metric for speedsolving.</p>"},{"location":"drafts/hyper-puzzle-notation/#commutator","title":"Commutator","text":"<p>A commutator is two sequences of moves in square brackets separated by a comma. Example: <code>[A, B]</code>. It is equivalent to <code>A B A' B'</code>.</p> <p>Because commutators are a kind of node, they can also have a multiplier after them.</p>"},{"location":"drafts/hyper-puzzle-notation/#conjugate","title":"Conjugate","text":"<p>A conjugate is two sequences of moves in square brackets separated by a comma. Example: <code>[A: B]</code>. It is equivalent to <code>A B A'</code>.</p> <p>Because conjugates are a kind of node, they can also have a multiplier after them.</p>"},{"location":"drafts/hyper-puzzle-notation/#multiplier","title":"Multiplier","text":"<p>A multiplier is an optional positive integer and an optional apostrophe <code>'</code>, pronounced \u201cprime,\u201d which negates the multiplier. <code>2</code>, <code>'</code>, <code>2'</code>, and <code>42'</code> are all multipliers.</p>"},{"location":"drafts/hyper-puzzle-notation/#comment","title":"Comment","text":"<p>A line comment starts with <code>//</code> and extends to the next newline. Line comments have no effect on the puzzle.</p>"},{"location":"drafts/hyper-puzzle-notation/#exceptions","title":"Exceptions","text":"<p>Certain puzzles use special notation.</p>"},{"location":"drafts/hyper-puzzle-notation/#square-1","title":"Square-1","text":"<p>Square-1 moves are of the form <code>(n, d)</code> (where <code>n</code> and <code>d</code> are signed integers) and <code>/</code>. These cannot be used with layer masks, transforms, or multipliers.</p>"},{"location":"drafts/hyper-puzzle-notation/#megaminx-scrambling","title":"Megaminx scrambling","text":"<p>Megaminx scrambling uses the moves <code>R++</code>, <code>R--</code>, <code>D++</code>, and <code>D--</code>. These cannot be used with layer masks, transforms, or multipliers.</p>"},{"location":"drafts/hyper-puzzle-notation/#physical-2x2x2x2-scrambling","title":"Physical 2x2x2x2 scrambling","text":"<p>Physical 2x2x2x2 scrambling uses the move <code>#</code>. This cannot be used with layer masks, transforms, or multipliers.</p>"},{"location":"drafts/hyper-puzzle-notation/#conventions","title":"Conventions","text":"<p>This section defines common conventions for axes and move families. These should be considered when developing notation for new puzzles. These are not strict rules.</p> <ul> <li>Uppercase Latin alphabet: <code>ABCDEFGHIJKLMNOPQRSTUVWXYZ</code></li> <li>Uppercase Greek alphabet: <code>\u0393\u0394\u0398\u039b\u039e\u03a0\u03a3\u03a6\u03a8\u03a9</code> (Greek letters that are visually similar to Latin letters have been excluded)</li> <li>Lowercase Latin alphabet: <code>abcdefghijklmnopqrstuvwyxz</code></li> <li>Lowercase Greek alphabet<ul> <li>Large lowercase: <code>\u03b2\u03b4\u03b6\u03b8\u03bb\u03be</code></li> <li>Small lowercase: <code>\u03b1\u03b5\u03b7\u03ba\u03bc\u03c0\u03c4\u03c6\u03c7\u03c8\u03c9</code> (Greek letters that are visually similar to Latin letters have been excluded)</li> </ul> </li> </ul> <p>Other Greek letters are recommended to NOT be used because they are too similar in appearance to Latin letters.</p>"},{"location":"drafts/hyper-puzzle-notation/#uppercase-latin-alphabet-semantic","title":"Uppercase Latin alphabet (semantic)","text":"Letter Common uses A Anterior (5D+) B Back (3D-) C D Down (2D-) E Equitorial (2D slice) F Front (3D+) G H I In (4D-) J K L Left (1D-) M Middle (1D slice) N O Out (4D+) P Posterior (5D-) Q R Right (1D-) S Standing (3D slice) T \u201cTop\u201d (generalized F2L) U Up (2D+), 6th axis V W X Y Z <p>The unused letters here are reserved for execution notation, for variable names, for ad-hoc notation, or for specific puzzles (e.g., <code>X</code> and <code>Y</code> in 120-cell notation<sup>1</sup>).</p>"},{"location":"drafts/hyper-puzzle-notation/#uppercase-alphabet-sequential","title":"Uppercase alphabet (sequential)","text":"<p>The uppercase letters <code>A</code>-<code>Z</code> are often used to name elements in an ordered sequence, such as the rectangular faces of a polygonal prism. If there are more than 26 names needed, a single letter from the uppercase Greek alphabet may be added as a prefix, in the order <code>\u0393\u0394\u0398\u039b\u039e\u03a0\u03a3\u03a6\u03a8\u03a9</code>:</p> Letter sequence Number A 1 B 2 \u2026 \u2026 Z 26 \u0393A 27 \u0393B 28 \u2026 \u2026 \u0393Z 52 \u0394A 53 \u2026 \u2026 \u03a9Z 286 <p>The {100}x{4} duoprism serves as an example of a puzzle that requires more than 26 sequential names.<sup>2</sup></p>"},{"location":"drafts/hyper-puzzle-notation/#lowercase-latin-alphabet-semantic","title":"Lowercase Latin alphabet (semantic)","text":"<ul> <li>Specialty uses in 3D notation (<code>rludfb</code>, <code>mes</code>)</li> <li>3D whole-puzzle rotations (one letter from <code>xyz</code>)</li> <li>4D+ whole-puzzle rotations (two letters from <code>xyzwvu...</code>)</li> </ul> Letter Common uses a b <code>2Bw</code> c d <code>2Dw</code> e <code>{2..-2}E</code> f <code>2Fw</code> g h Half turn (jumbling) i j First jumble angle k Second jumble angle l <code>2Lw</code> m <code>{2..-2}M</code> n o p q r <code>2Rw</code> s <code>{2..-2}S</code> t u <code>2Uw</code> v Whole-puzzle rotation around twist/element, 5th axis w Wide move suffix, 4th axis x 1st axis y 2nd axis z 3rd axis <p>See Jumbling notation for more about <code>h</code>, <code>j</code>, and <code>k</code>.</p> <p>In 3D, a single axis letter indicates a rotation around that axis. E.g., <code>y</code> is a rotation around the Y axis from +X to +Z; its inverse is <code>y'</code>.</p> <p>In 4D+, two axis letters indicates a rotation in that plane from one axis to the other. E.g., <code>zw</code> is a rotation from +Z to +W; its inverse is <code>zw'</code> or <code>wz</code>.</p> <p>In 5D, two axis letters may be used after an axis name for execution notation.</p>"},{"location":"drafts/hyper-puzzle-notation/#lowercase-greek-alphabet-sequential","title":"Lowercase Greek alphabet (sequential)","text":"<p>For when there are multiple sets of axes assigned Latin letters, they can be distinguished using a small lowercase Greek prefix. For example:</p> Group Names 1 <code>\u03b1A</code>, <code>\u03b1B</code>, <code>\u03b1C</code>, \u2026 2 <code>\u03b3A</code>, <code>\u03b3B</code>, <code>\u03b3C</code>, \u2026 3 <code>\u03b5A</code>, <code>\u03b5B</code>, <code>\u03b5C</code>, \u2026"},{"location":"drafts/hyper-puzzle-notation/#cube-axes","title":"Cube axes","text":"<p>Cube axes use the following symbols:</p> Dimension Axis name Side (+/-) 1 X R, L 2 Y U, D 3 Z F, B 4 W O, I 5 V A, P 6 U \u0393, \u0394 7 \u0398, \u039b 8 \u039e, \u03a0 9 \u03a3, \u03a6 10 \u03a8, \u03a9 <p>These can also serve as letters or letter pairs for when a handful of additional axes are needed and the preferred uppercase Latin letters are unavailable. For example, a megaminx prism (4D) uses <code>I</code> and <code>O</code> for the two additional axes, but if some other 3D puzzle already used those letters then a 4D prism of it could use <code>\u0393</code> and <code>\u0394</code> for the two additional axes.</p>"},{"location":"drafts/hyper-puzzle-notation/#execution-notation","title":"Execution notation","text":"<p>Keybinds for high-dimensional puzzles typically assign short (1-2 letter) uppercase names to axes and short (1-2 letter) lowercase names to twist directions. An axis and a twist direction can be combined to specify a move.</p> <p>Examples: - 3<sup>4</sup> uses the letters <code>x</code>, <code>y</code>, and <code>z</code> after an axis name to specify a twist. - Polygonal duoprisms reuse the hypercube letters <code>I</code>, <code>U</code>, <code>D</code>, <code>F</code>, <code>R</code>, <code>L</code> (all except <code>O</code> and <code>B</code>)</p>"},{"location":"drafts/hyper-puzzle-notation/#jumbling-notation","title":"Jumbling notation","text":"<ul> <li><code>h</code> indicates half of a doctrinaire turn (common on Bagua and mixup cubes)</li> <li><code>j</code> indicates some other jumbling angle</li> <li><code>k</code> indicates a second jumbling angle, for when <code>j</code> is already taken</li> </ul>"},{"location":"drafts/hyper-puzzle-notation/#rationale","title":"Rationale","text":""},{"location":"drafts/hyper-puzzle-notation/#why-use-greek-letters","title":"Why use Greek letters?","text":"<p>In high dimensions, Greek letters become useful.</p> <ul> <li>Greek letters provide an extension to the Latin alphabet with more nuanced aesthetics, aiding readability.<ul> <li>Greek uppercase letters fit in well with Latin uppercase letters.</li> <li>Greek lowercase letters contrast very strongly with Latin uppercase letters.<ul> <li>Small lowercase letters provide a good set of prefixes.</li> <li>Large lowercase letters are reserved for future use.</li> </ul> </li> </ul> </li> <li>We want to avoid lowercase letters, because this conflicts with 3D conventions that use lowercase letters for wide moves or inner moves. We also want to avoid uppercase letters with existing uses (M, E, S, P, x, y, z, w, v).<ul> <li>This is partially a compatibility concern, but mostly a psychological semantic one. Humans reading lowercase letters may have misconceptions about their uses based on uses in other cubing notation.</li> </ul> </li> <li>Greek letters allow us to keep facet names prefix-free while still using single-character names for sequences of 26 elements of fewer.<ul> <li>Using only the Latin alphabet, we would get <code>A</code>, <code>B</code>, \u2026, <code>Z</code>, <code>AA</code> (not prefix-free!)</li> <li>We could force names to be 2 letters long when there\u2019s more than 26 of them, but now the rule becomes more complicated.</li> <li>This especially simplifies code to generate these puzzles; <code>generate_nth_uppercase_name()</code> is now a pure function depending only on <code>n</code> and not the total number of names.</li> </ul> </li> <li>We want to preserve uppercase letters for ad-hoc definitions, both for nonrigorous communication between humans and for rigorous move input.</li> <li>Writing moves manually using Greek letters is likely to be extremely rare outside a handful of people.<ul> <li>E.g., Duoprisms have ASCII execution notation for a common subset of moves.</li> </ul> </li> <li>Flat Hypercube already uses greek letters for hypercubes of dimension 6+:</li> <li>We want to preserve certain letters for mathematical notation.<ul> <li>E.g., \\(G\\) for the grip group</li> <li>E.g., \\(S\\) for \u201c\\(S\\)-doctrinaire\u201d</li> </ul> </li> </ul>"},{"location":"drafts/hyper-puzzle-notation/#why-curly-brace-layer-sets","title":"Why curly-brace layer sets?","text":"<p>It is a very common convention in hypercubing software to hold down any set of number keys to apply a \u201clayer mask\u201d to a move. Given that individual moves may require many characters to write (such as <code>I[F-&gt;B,U-&gt;R]</code>) it is very awkward to require duplicating this many times.</p> <ul> <li>E.g., Suppose we want to write the 7<sup>4</sup> move <code>{1,3,5,7}IUR</code> using only ridge turns. (This is a contrived example because we do have a way to write edge turns on n<sup>4</sup>, but on some puzzles these moves can only be easily written using simultaneous move notation.) With layer sets, we can write <code>&amp;({1,3,5,7}IF {1,3,5,7}IR2)</code>; without layer sets, we must write <code>&amp;(IF 3IF 5IF 7IF IR2 3IR2 5IR2 7IR2)</code>.<ul> <li>We could write it the long way, but we lose important semantics and it becomes much less readable.</li> <li>Transform notation makes this problem even worse: <code>{1,3,5,7}I[U-&gt;R,F-&gt;B]</code> vs. <code>&amp;(I[U-&gt;R,F-&gt;B] 3I[U-&gt;R,F-&gt;B] 5I[U-&gt;R,F-&gt;B] 7I[U-&gt;R,F-&gt;B])</code></li> <li>Any layer mask can be used for a single move in hypercubing software, and we treat it as a single move! It should be possible to express concisely in notation</li> </ul> </li> <li>Checkerboard patterns on big cubes are a major example where this problem appears.</li> <li>Negative numbers count from the other side (generalized big cube algorithms!)<ul> <li>Generic middle slice on big cubes: <code>~{1,-1}R</code> or <code>{2..-2}R</code></li> </ul> </li> </ul>"},{"location":"drafts/hyper-puzzle-notation/#why-invert-layer-masks","title":"Why invert layer masks?","text":"<ul> <li>Complex 3<sup>3</sup> has an anti-<code>R</code> move (equivalent to <code>&amp;(R x')</code>) that is distinct from <code>Lw</code> (which does not exist) because <code>R</code> and <code>L</code> are no longer opposites.<ul> <li>Technically you could do <code>2R</code> by assuming the 6-axis 2-layer laminated construction but that\u2019s very unintuitive and does not generalize to ordinary 3<sup>3</sup>.</li> </ul> </li> <li>RKT cancels use \u201ceverything except <code>I</code>\u201d extensively<ul> <li>E.g., <code>~IUR</code> for \u201cthe UR flip,\u201d which appears constantly in RKT cancel algorithms.</li> </ul> </li> <li>Another tool for notation that is generic with respect to number of layers in the puzzle.</li> </ul>"},{"location":"drafts/hyper-puzzle-notation/#why-not-v-suffix-for-whole-puzzle-rotations","title":"Why not <code>v</code> suffix for whole-puzzle rotations?","text":"<ul> <li><code>v</code> doesn\u2019t actually apply to twists; it applies to elements.<ul> <li><code>URv</code> is a rotation around the <code>UR</code> edge, but software might not know how to concatenate two axes.</li> <li>This doesn\u2019t generalize at all in higher dimensions.</li> <li>This doesn\u2019t generalize to many shapes; e.g., most edges and all vertices on a polygonal prism do not correspond to rotations that preserve the puzzle symmetry.</li> </ul> </li> <li>Syntax for rotations using arbitrary transforms is unclear.<ul> <li><code>U[R-&gt;F]v</code>?</li> <li><code>Uv[R-&gt;F]</code>?</li> <li><code>v[R-&gt;F]</code></li> <li><code>[R-&gt;F]v</code>?</li> </ul> </li> <li>Lowercase <code>v</code> may refer to the 5th dimension, particularly in execution notation. (e.g., <code>xv</code> for the rotation from +X to +V)</li> </ul>"},{"location":"drafts/hyper-puzzle-notation/#why-use-for-whole-puzzle-rotations","title":"Why use <code>@</code> for whole-puzzle rotations?","text":"<ul> <li><code>~</code> on its own is more useful to mean \u201call except the first layer\u201d<ul> <li>e.g., <code>~IUR</code> for the very common \u201cUR flip\u201d in RKT cancels on 3<sup>4</sup> (otherwise expressed as <code>{2..-1}IUR</code> or <code>{1..-2}OUR</code>)</li> </ul> </li> <li><code>*</code> is already used colloquially as a wildcard.<ul> <li>e.g., \u201cYou can do RKT using either <code>&lt;RO*, I*&gt;</code> or <code>&lt;*O, ~I*&gt;</code>.\u201d</li> </ul> </li> <li><code>@</code> has the mnemonic \u201call\u201d</li> </ul>"},{"location":"drafts/hyper-puzzle-notation/#why-have-execution-notation-in-addition-to-general-notation","title":"Why have execution notation in addition to general notation?","text":"<ul> <li>Execution notation is usually optimized for particular puzzles and particular viewpoints.<ul> <li>Execution notation often lacks access to certain moves.</li> </ul> </li> <li>Execution notation might be more compact or require fewer symbols, making it easier to translate to/from keybinds.</li> <li>Execution notation may provide a way to translate moves between puzzles; e.g., <code>Uy</code> has meaning on both 3<sup>4</sup> and polygonal duoprisms even though these puzzles are very different.</li> <li>Execution notation can be defined ad-hoc.</li> </ul>"},{"location":"drafts/hyper-puzzle-notation/#rust-data-structure","title":"Rust data structure","text":"<p>Below is a draft of a Rust data structure representing the notation.</p> <pre><code>pub enum Node {\n    Repeated {\n        inner: RepeatableNode,\n        amount: Option&lt;i32&gt;,\n    },\n\n    /// `(n, m)`\n    SquanMove(i32, i32),\n    /// `/`\n    SquanSlash,\n    /// `R++`, `R--`, `D++`, `D--`\n    MegaminxScrambleMove(MegaminxScrambleMove),\n    /// `#`\n    Phys24ScrambleRestack,\n}\n\npub enum RepeatableNode {\n    Move(Move),\n    /// `@`\n    Rotation(Rotation),\n    /// `.`\n    Pause,\n    /// Parenthetical group with optional prefix symbol.\n    ///\n    /// These moves can always be executed in sequence.\n    Group {\n        layer_mask: Option&lt;LayerMask&gt;,\n        kind: GroupKind,\n        elements: Vec&lt;Node&gt;,\n    },\n    /// ^(...)\n    ///\n    /// This is separate because it requires special handling.\n    Niss(Vec&lt;Node&gt;),\n    /// `[A, B]`\n    Commutator([Vec&lt;Node&gt;; 2]),\n    /// `[A: B]`\n    Conjugate([Vec&lt;Node&gt;; 2]),\n\n}\n\npub enum MegaminxScrambleMove {\n    Rpp,\n    Rmm,\n    Dpp,\n    Dmm,\n}\n\npub enum GroupKind {\n    Basic, // no char\n    Simultaneous, // &amp;\n    Macro, // !\n}\n\npub struct Move {\n    pub layer_mask: LayerMask,\n    pub family: String,\n    pub transform: Option&lt;BracketedTransformSeq&gt;,\n}\n\npub struct Rotation {\n    pub family: Option&lt;String&gt;,\n    pub transform: Option&lt;BracketedTransformSeq&gt;,\n}\n\npub struct BracketedTransformSeq {\n    /// Sequence of transforms. Each transform can be parsed into a `FamilySuffix` or `ConstraintSet` using [`bracketed_transform_util`] (generally only one will be used depending on the puzzle).\n    pub transform_sequence: Vec&lt;String&gt;,\n}\n\nmod bracketed_transform_util {\n    pub struct FamilySuffix {\n        pub family_suffix: String,\n        pub multiplier: Option&lt;i32&gt;,\n    }\n\n    pub struct ConstraintSet {\n        pub constraints: Vec&lt;Constraint&gt;,\n    }\n    pub enum Constraint {\n        Fixed {\n            pub element: String,\n        },\n        Moving {\n            pub element_start: String,\n            pub element_end: String,\n        },\n    }\n}\n\nimpl BracketedTransform {\n    pub fn as_family_suffix() -&gt; Option&lt;(String, i32)&gt;;\n    pub fn as_constraints() -&gt; Option&lt;ConstraintSet&gt;;\n}\n\npub struct LayerMask {\n    pub invert: bool,\n    pub ranges: Vec&lt;LayerRange&gt;,\n}\n\n/// Layer range\n///\n/// If start &amp; end are the same, it's a single layer\npub struct LayerRange {\n    pub start: i32,\n    pub end: i32,\n}\n</code></pre> <ol> <li> <p>The facets of the 120-cell can be divided into eight 15-cell clusters, each containing 12 facets corresponding to faces of a dodecahedron plus three extra ones. Those three extra ones are called <code>I</code> (\u201cIn\u201d), <code>X</code> and <code>Y</code>. Each cluster corresponds to one facet of a hypercube.\u00a0\u21a9</p> </li> <li> <p>This puzzle was created as a joke but has actually been solved. It has 104 cells, which in this proposal would be named <code>\u03b1A</code>, <code>\u03b1B</code>, \u2026, <code>\u03b1\u0398U</code>, <code>\u03b1\u0398V</code>, <code>\u03b3A</code>, <code>\u03b3B</code>, <code>\u03b3C</code>, <code>\u03b3D</code> \u21a9</p> </li> </ol>"},{"location":"drafts/gentle-introduction/","title":"A Gentle Introduction","text":"<p>This series is under construction</p> <p>This series is an introduction to grip theory that requires only high school math knowledge.</p> <p>Grip theory is a framework for analyzing many different kinds of twisty puzzles in a geometry-independent way. It was first developed on the TwistyPuzzles forum in 2009, and has since been further developed by the members of the Hypercubers Discord, particularly Milo Jacquet and Mniip. Grip theory was originally used to describe doctrinaire puzzles in 3D, but it can be extended to describe bandaged puzzles, jumbling puzzles, higher-dimensional puzzles, and more.</p> <p>Grip theory is built on group theory, which is itself built on set theory. This series explains just the fundamentals of each of those, enough to understand grip theory.</p>"},{"location":"drafts/gentle-introduction/grip-theory-tutorial/","title":"Grip Theory Tutorial","text":""},{"location":"drafts/gentle-introduction/grip-theory-without-math/","title":"Grip Theory","text":"<p>This whole page is under construction</p>"},{"location":"drafts/gentle-introduction/grip-theory-without-math/#grips","title":"Grips","text":"<p>A grip is a thing you can turn. Every puzzle has a grip set.</p> <p>On a 3x3x3, the grip set is \\(\\{ R, L, U, D, F, B \\}\\).</p>"},{"location":"drafts/gentle-introduction/grip-theory-without-math/#twists","title":"Twists","text":"<p>A twist has two things:</p> <ul> <li>A grip from the grip set, which we\u2019ll call \\(\\gamma\\) (\u201cgamma\u201d).</li> <li>A rearrangement of all the grips in the grip set, which has to keep \\(\\gamma\\) in the same place.</li> </ul> <p>For example, on a 3x3x3 the <code>R'</code> twist has the grip \\(R\\) and the permutation that cycles \\(U \\to F \\to D \\to B \\to U\\) and keeps \\(R\\) and \\(L\\) fixed.</p>"},{"location":"drafts/gentle-introduction/grip-theory-without-math/#pieces","title":"Pieces","text":"<ul> <li>A piece is a thing that moves around. On a 3<sup>3</sup>, there are 27 pieces. Every puzzle has a piece set.</li> <li>Each piece has a grip signature, which is a subset of the puzzle\u2019s grip set that determines which twists affect the piece.</li> </ul> <p>For example, the grip signature of the RUF corner is \\(\\{ R, U, F \\}\\).</p> <p>Surprisingly, a grip signature is the only thing we need in order to describe where a piece goes after a sequence of moves.</p>"},{"location":"drafts/gentle-introduction/grip-theory-without-math/#applying-twists","title":"Applying twists","text":"<p>To apply a twist to a puzzle, take each piece that has the twist\u2019s grip in its grip signature and change the grips in the grip signature according to the twist\u2019s permutation.</p> <p>For example, <code>R'</code> changes the grip signature of the \\({U, R, F}\\) corner to \\({F, R, D}\\). Now that corner will be affected by <code>F</code>, <code>R</code>, and <code>D</code> moves, but not <code>U</code> moves.</p> <p>The rest of this page is under construction</p>"},{"location":"drafts/gentle-introduction/grip-theory-without-math/#attitudes","title":"Attitudes","text":""},{"location":"drafts/gentle-introduction/grip-theory-without-math/#grip-group-from-twists","title":"Grip group from twists","text":""},{"location":"drafts/gentle-introduction/grip-theory-without-math/#complex-puzzles","title":"Complex puzzles","text":""},{"location":"drafts/gentle-introduction/grip-theory-without-math/#anti-moves","title":"Anti moves","text":""},{"location":"drafts/gentle-introduction/grip-theory-without-math/#indistinguishable-pieces","title":"Indistinguishable pieces","text":"<p>TODO: attitude sets</p>"},{"location":"drafts/gentle-introduction/grip-theory-without-math/#blocked-grips","title":"Blocked grips","text":"<p>To model bandaging, \u2026</p> <p>TODO</p>"},{"location":"drafts/gentle-introduction/grip-theory-without-math/#jumbling","title":"Jumbling","text":"<p>TODO: ouch</p>"},{"location":"drafts/gentle-introduction/grip-theory/","title":"Grip Theory","text":"<p>This whole page is under construction</p> <p>Now that you understand the fundamentals of group theory, we can introduce grip theory. At its core, grip theory is very simple, but there are a lot of extensions that allow us to model more complicated puzzles.</p>"},{"location":"drafts/gentle-introduction/grip-theory/#grips","title":"Grips","text":"<ul> <li>A grip is a thing you can turn. Every puzzle has a grip set, denoted using \\(\\Gamma\\) (capital gamma).</li> <li>The grip group is a permutation group that acts on the grip set, denoted using \\(G\\).</li> </ul> <p>Info</p> <p>Note: The elements of the grip group are transformations, not grips. Each element of the grip group is a permutation of the grip set.</p> <p>On a 3x3x3:</p> <ul> <li>The grip set is \\(\\{ R, L, U, D, F, B \\}\\).</li> <li>The grip group is the group of rotations of a cube.</li> <li>The grip group acts on the set of grips the same way it acts on the faces of a cube.</li> </ul> <p>This is already enough to construct cube rotations. For example, a <code>y</code> rotation applies the 4-cycle \\((RFLB)\\) to the grip set.</p> <p>Exercise</p> <p>Consider an <code>x2</code> rotation on a 3x3x3.</p> <ul> <li>What is the permutation applied to the grip set? Answer: \\((UD)(FB)\\)</li> <li>What grips are fixed by the permutation? Answer: \\(\\{ R, L \\}\\)</li> </ul>"},{"location":"drafts/gentle-introduction/grip-theory/#twists","title":"Twists","text":"<p>A twist is defined using a grip \\(g \\in \\Gamma\\) and an element of the grip group \\(\\sigma \\in G\\) that keeps that grip fixed (i.e., \\(\\sigma[g] = g\\)).</p> <p>Confusing notation</p> <ul> <li>\\(\\Gamma\\) is the grip set. \\(g\\) is a grip.</li> <li>\\(G\\) is the group group. \\(\\sigma\\) is a group element.</li> </ul> <p>I\u2019m terribly sorry.</p> <p>In the wider world of mathematics, \\(G\\) is often used for groups and \\(\\sigma\\) is often used for permutations, so we really don\u2019t have many letters left to choose for \u201cgrip\u201d and \u201cgrip set.\u201d</p> <p>For example, on a 3x3x3 the <code>R'</code> twist is defined as \\(R[(UFDB)]\\).</p> <p>On most puzzles we care about, all valid twists exist. In other words, any grip can be have any transformation applied to it as long as that grip stays fixed.</p> <p>Exercises</p> <ul> <li>What is the <code>D2</code> twist? Answer: \\(D[(RL)(FB)]\\)</li> <li>Is \\(L[(URF)]\\) a valid twist on 3x3x3? Answer: No, because \\((URF)\\) is not an element of the grip group.</li> <li>Is \\(L[(URF)(LDB)]\\) a valid twist on 3x3x3? Answer: No, because \\((URF)(LDB)\\) doesn\u2019t keep \\(L\\) fixed.</li> </ul>"},{"location":"drafts/gentle-introduction/grip-theory/#pieces","title":"Pieces","text":"<ul> <li>A piece is a a thing that moves around. On a 3<sup>3</sup>, there are 27 pieces. Every puzzle has a set of pieces.</li> <li>A grip signature is a subset of a puzzle\u2019s grips.</li> <li>Each piece has a grip signature, which is a subset of the 6 grips that determines which twists affect the piece. For example, the grip signature of the RUF corner is \\(\\{ R, U, F \\}\\).</li> </ul> <p>The grip signature tells us which twists affect which pieces.</p> <p>Surprisingly, a grip signature is the only thing we need in order to describe how a piece behaves.</p>"},{"location":"drafts/gentle-introduction/grip-theory/#applying-twists","title":"Applying twists","text":"<p>To apply a twist \\(g[\\sigma]\\) to a puzzle:</p> <ol> <li>Take every piece that has the grip \\(g\\) in its grip signature.</li> <li></li> </ol> <p>The rest of this page is under construction</p>"},{"location":"drafts/gentle-introduction/grip-theory/#grip-group-from-twists","title":"Grip group from twists","text":""},{"location":"drafts/gentle-introduction/grip-theory/#complex-puzzles","title":"Complex puzzles","text":""},{"location":"drafts/gentle-introduction/grip-theory/#anti-moves","title":"Anti moves","text":""},{"location":"drafts/gentle-introduction/grip-theory/#indistinguishable-pieces","title":"Indistinguishable pieces","text":"<p>TODO: attitude sets</p>"},{"location":"drafts/gentle-introduction/grip-theory/#blocked-grips","title":"Blocked grips","text":"<p>To model bandaging, \u2026</p> <p>TODO</p>"},{"location":"drafts/gentle-introduction/grip-theory/#jumbling","title":"Jumbling","text":"<p>TODO: ouch</p>"},{"location":"drafts/gentle-introduction/group-theory/","title":"Group Theory","text":"<p>A group is a set of elements that can be composed using an operation to get a new element.</p> <p>Notation</p> <ul> <li>\\(G\\) is often a group.</li> <li>Lowercase letters are often group elements.<ul> <li>\\(e\\) is often the identity element (defined below).</li> </ul> </li> <li>Depending on the group, composing two elements \\(a\\) and \\(b\\) sometimes uses a symbol (like \\(a + b\\) or \\(a \\times b\\)) and sometimes uses no symbol (like \\(ab\\)).</li> <li>The inverse (defined below) of an element \\(a\\) is written \\(a^{-1}\\).</li> </ul> <p>The order of a group is the number of elements it has. The order of a group may be infinite.</p> <p>There are four group axioms, which are the requirements in order for something to be a group:</p> <ul> <li> <p> Closure</p> <p>\\(ab \\in G\\) (for all \\(a,b \\in G\\))</p> <p>Composing two elements in the group must give a new element in the group.</p> </li> <li> <p> Identity</p> <p>\\(ea = ae = a\\) (for all \\(a \\in G\\))</p> <p>There is some identity element \\(e\\) in the group that has no effect on other elements.</p> </li> <li> <p> Inverse</p> <p>\\(a a^{-1} = a^{-1} a = e\\) (for all \\(a \\in G\\))</p> <p>Every element has an inverse element in the group. Composing an element with its inverse on either side results in the identity element.</p> </li> <li> <p> Associativity</p> <p>\\((ab)c = a(bc)\\) (for all \\(a,b,c \\in G\\))</p> <p>Parentheses have no effect when composing elements, so we can just write \\(abc\\).</p> </li> </ul> <p>There are lots of structures in mathematics that obey these rules, so if we prove facts using only the group axioms then we know those facts will be true in a lot of different domains.</p> <p>Examples of groups</p> <p>Integer addition</p> <p>Addition on integers is an infinite group. The elements are integers and the operation is addition \\(a + b\\).</p> <ul> <li> Closure: Adding two integers results in an integer.</li> <li> Identity: \\(0 + a = a + 0 = a\\)</li> <li> Inverse: The inverse of an integer is its negative. \\(a + (-a) = (-a) + a = 0\\)</li> <li> Associativity: \\((a + b) + c = a + (b + c)\\)</li> </ul> <p>Before opening the other examples, ask yourself:</p> <ul> <li>What are the elements?</li> <li>What is the order?</li> <li>What is the operation?</li> <li>Which ones of the four group axioms does it obey?</li> </ul> <p>A structure is a group only if it obeys all four of the group axioms.</p> Integer subtraction <p>Subtraction on integers is not a group.</p> <ul> <li> Closure: Subtracting two integers results in an integer.</li> <li> Identity: \\(a - 0 = a\\), but \\(0 - a \\ne a\\)</li> <li> Inverse: The inverse of an integer is itself. \\(a - a = 0\\)</li> <li> Associativity: \\((a - b) - c \\ne a - (b - c)\\)</li> </ul> Integer multiplication <p>Multiplication on integers is not group.</p> <ul> <li> Closure: Multiplying two integers results in an integer.</li> <li> Identity: \\(a \\times 1 = 1 \\times a = a\\)</li> <li> Inverse: There is no integer \\(b\\) such that \\(0 \\times b = b \\times 0 = 1\\)</li> <li> Associativity: \\((a \\times b) \\times c = a \\times (b \\times c)\\)</li> </ul> Nonzero rational multiplication <p>Multiplication on nonzero rational numbers is an infinite group. The elements are rational numbers \\(\\frac a b\\) where \\(a\\) and \\(b\\) are nonzero integers, and the operation is multiplication.</p> <ul> <li> Closure: Multiplying two rational numbers \\(\\frac a b\\) and \\(\\frac c d\\) results in a rational number \\(\\frac{a c}{b d}\\).</li> <li> Identity: \\(\\frac a b \\times 1 = 1 \\times \\frac a b = \\frac a b\\).</li> <li> Inverse: The inverse of a rational number \\(\\frac a b\\) is \\(\\frac b a\\). \\(\\frac a b \\times \\frac b a = 1\\).<ul> <li>We can\u2019t include zero because it would have no inverse.</li> </ul> </li> <li> Associativity: \\(\\left( \\frac a b \\times \\frac c d \\right) \\times \\frac p q = \\frac a b \\times \\left( \\frac c d \\times \\frac p q \\right)\\)</li> </ul> Rotations of a square <p>The rotations of a square are a finite group of order 4. It has 4 elements:</p> <ul> <li> Identity (do-nothing transformation)</li> <li>three rotations ( 90\u00b0 clockwise,  90\u00b0 counterclockwise, and  180\u00b0 rotation)</li> </ul> <p>The operation is doing one rotation and then the other. For example, a 90\u00b0 clockwise rotation composed with a 180\u00b0 rotation results in a 90\u00b0 counterclockwise rotation.</p> <ul> <li> Closure: Doing one transformation after another is equivalent to doing just one transformation.</li> <li> Identity: The identity transformation has no effect when composed with another transformation.</li> <li> Inverse: Every transformation has an inverse, and composing a transformation with its inverse results in the identity.<ul> <li>The identity transformation it its own inverse.</li> <li>The inverse of each 90\u00b0 rotation is the other 90\u00b0 rotation.</li> <li>The inverse of the 180\u00b0 rotation is itself.</li> </ul> </li> <li> Associativity: \\((a b) c = a (b c)\\)</li> </ul> Rotations and reflections of a square <p>The rotations and reflections of a square are a finite group of order 8. It has 8 elements:</p> <ul> <li> Identity (do-nothing transformation)</li> <li>three rotations ( 90\u00b0 clockwise,  90\u00b0 counterclockwise, and  180\u00b0 rotation)</li> <li>four reflections ( horizontal,  vertical, and   two diagonals)</li> </ul> <p>The operation is doing one rotation after the other. For example, a horizontal reflection composed with a 90\u00b0 counterclockwise rotation results in a diagonal reflection.</p> <ul> <li> Closure: Doing one transformation after another is equivalent to doing just one transformation.</li> <li> Identity: The identity transformation has no effect when composed with another transformation.</li> <li> Inverse: Every transformation has an inverse, and composing a transformation with its inverse results in the identity.<ul> <li>The identity transformation it its own inverse.</li> <li>The inverse of each 90\u00b0 rotation is the other 90\u00b0 rotation.</li> <li>The inverse of the 180\u00b0 rotation is itself.</li> <li>Each reflection is its own inverse.</li> </ul> </li> <li> Associativity: \\((a b) c = a (b c)\\)</li> </ul> Rotations of a cube <p>The symmetry-preserving rotations of a cube are a finite group of order 24. It has 24 elements:</p> <ul> <li>identity (do-nothing transformation)</li> <li>six 90\u00b0 rotations around a face</li> <li>three 180\u00b0 rotations around a face</li> <li>six 180\u00b0 rotations around an edge</li> <li>eight 120\u00b0 rotations around a vertex</li> </ul> <p>The operation is doing one rotation and then the other. For example, a 90\u00b0 rotation clockwise around the top face composed with a 90\u00b0 clockwise rotation around the front face results in a 120\u00b0 clockwise rotation around the top-front-right vertex.</p> <ul> <li> Closure: Doing one transformation after another is equivalent to doing just one transformation.</li> <li> Identity: The identity transformation has no effect when composed with another transformation.</li> <li> Inverse: Every transformation has an inverse, and composing a transformation with its inverse results in the identity.</li> <li> Associativity: \\((a b) c = a (b c)\\)</li> </ul> Trivial group <p>The trivial group containing only the element \\(e\\) is a group.</p> <ul> <li> Closure: The only composition is \\(ee = e\\).</li> <li> Identity: The identity is \\(e\\). \\(ee = e\\).</li> <li> Inverse: \\(e^{-1} = e\\), so \\(ee^{-1} = e^{-1}e = ee = e\\).</li> <li> Associativity: \\((e e) e = e (e e)\\) because (and I cannot stress this enough) \\(ee = e\\).</li> </ul> <p>Group elements are not orientations</p> <p>A common misconception is that the orientations of a cube (or other shape) are group elements. Although there is a one-to-one correspondence between transformations and orientations, they are different kinds of objects. There is not an obvious way to compose orientations, so they are not group elements. Transformations, on the other hand, can be composed.</p> <p>There is a connection between transformations and orientations, which we\u2019ll explore later in the Group actions section.</p> <p>Composing transformations is like composing functions</p> <p>If you\u2019re familiar with function composition, you\u2019ll know that \\((f \\circ g \\circ h)(x) = f(g(h(x)))\\). To apply all three functions, you have to do \\(h\\) first and then \\(g\\) and then \\(f\\). Composing transformations works the same way: to apply \\(ab\\), we apply \\(b\\) first and then \\(a\\).</p> <p>Consider a square. If \\(a =\\)  (90\u00b0 clockwise rotation) and \\(b =\\)  (horizontal reflection), then to apply \\(ab\\) we apply  (horizontal reflection) first and then  (90\u00b0 clockwise rotation). The end result is  (diagonal reflection that swaps the top-left and bottom-right corners).</p> <p>When composing transformations, read the sequence right-to-left, like function application.</p> <p>Exercises</p> <p>Find a piece of paper and a writing utensil. A marker or sharpie that bleeds through paper will work best. Write a capital letter <code>F</code> on one side of the paper and write a mirrored letter <code>F</code> on the other side of the paper, tracing over the original <code>F</code>.</p> <ol> <li> <p>Apply each of the 8 elements of the group of rotations and reflections of a square to your piece of paper and see what happens.</p> <ul> <li> Identity</li> <li> 90\u00b0 clockwise rotation</li> <li> 90\u00b0 counterclockwise rotation</li> <li> 180\u00b0 rotation</li> <li> Horizontal reflection (flip the paper while holding the middle of the top and bottom edges)</li> <li> Vertical reflection (flip the paper while holding the middle of the left and right edges)</li> <li> TL-DR diagonal reflection (flip the paper while holding the top-right and bottom-left corners)</li> <li> TR-DL diagonal reflection (flip the paper while holding the top-left and bottom-right corners)</li> </ul> </li> <li> <p>Apply each of these compositions using your piece of paper and determine the resulting transformation:</p> <ul> <li> and  (90\u00b0 rotation counterclockwise \\(\\times\\) 90\u00b0 rotation counterclockwise)   Answer  180\u00b0 rotation</li> <li> and  (180\u00b0 rotation \\(\\times\\) 180\u00b0 rotation)   Answer  identity</li> <li> and  (horizontal reflection \\(\\times\\) TR-DL diagonal reflection) Remember that transformations compose right-to-left.   Answer:  90\u00b0 clockwise rotation</li> <li> and  (horizontal reflection \\(\\times\\) identity)   Answer:  horizontal reflection</li> <li> and  (TR-DL diagonal reflection \\(\\times\\) horizontal reflection)   Answer:  90\u00b0 counterclockwise rotation</li> <li> and  (TR-DL diagonal reflection \\(\\times\\) 90\u00b0 clockwise rotation)   Answer:  vertical reflection</li> </ul> </li> </ol>"},{"location":"drafts/gentle-introduction/group-theory/#cyclic-groups","title":"Cyclic groups","text":"<p>\\(\\mathbb{Z}_n\\) is the cyclic group of order \\(n\\). Its elements are usually written using the integers \\(0,1,\\dots,n-1\\). To compose two elements, add the numbers and add or subtract \\(n\\) to get back within the set. This is called modular arithmetic, and the \u201cadd or subtract \\(n\\)\u201d step is a specific way of taking the remainder after division called the modulo operation.<sup>1</sup></p> <p>Examples of cyclic groups</p> <p>Minutes on a clock</p> <p>Clocks use the cyclic group of order 60 to track minutes. The only valid minutes are the numbers \\(00,01,\\dots,59\\).</p> <ul> <li> Closure: Adding minutes past \\(59\\) wraps back around to \\(0\\).</li> <li> Identity: \\(a + 0 = 0 + a = a\\).</li> <li> Inverse: The inverse of an element \\(a\\) is \\(60-a\\) because \\(a + (60 - a) = 60\\), which wraps around to \\(0\\).<ul> <li>For example: \\(19 + (60-19) = 19 + 41 = 60\\)</li> </ul> </li> <li> Associativity: Addition is associative, and the modulo operation doesn\u2019t change this.</li> </ul> <p>Cyclic group of order 5</p> <p>The cyclic group of order 5 contains five elements: \\(\\{ 0,1,2,3,4 \\}\\).</p> <ul> <li> Closure: The only composition is \\(ee = e\\).</li> <li> Identity: The identity is \\(e\\). \\(ee = e\\).</li> <li> Inverse: \\(e^{-1} = e\\), so \\(ee^{-1} = e^{-1}e = ee = e\\).</li> <li> Associativity: \\((e e) e = e (e e)\\) because (and I cannot stress this enough) \\(ee = e\\).</li> </ul>"},{"location":"drafts/gentle-introduction/group-theory/#isomorphism","title":"Isomorphism","text":"<p>Two groups are isomorphic if you can make a two-way map elements between them relabel the elements of one group to get the other group such that composition still works the same way. To be more precise: if your mapping is \\(f\\), then applying the mapping before composition has to be equivalent to applying the mapping after composition: \\(f(a)f(b) = f(ab)\\).</p> <p>If two groups are isomorphic, we often say that they are \u201cthe same group.\u201d The labeling of the elements in a group is just a useful tool to let us talk about them; it doesn\u2019t actually matter for the correctness of the math.</p> <p>Exercise</p> <p>Find a mapping between the group of rotations of a square (identity, 90\u00b0 clockwise, 90\u00b0 counterclockwise, and 180\u00b0) and the cyclic group of order 4 \\(\\{ 0,1,2,3 \\}\\).</p>"},{"location":"drafts/gentle-introduction/group-theory/#commutative-groups","title":"Commutative groups","text":"<p>A group is commutative if \\(a b = b a\\) is always true for any elements \\(a\\) and \\(b\\). A commutative group is also called an abelian group.</p> <ul> <li> Integer addition is commutative because \\(a + b = b + a\\).</li> <li> Nonzero rational multiplication is commutative because \\(a \\times b = b \\times a\\).</li> <li> The rotation group of a cube is not commutative because these two sequences give different results:<ul> <li>A 90\u00b0 clockwise rotation around the top face followed by a 90\u00b0 clockwise rotation around the front face results in a 120\u00b0 clockwise rotation around the top-front-right vertex.</li> <li>A 90\u00b0 clockwise rotation around the front face followed by a 90\u00b0 clockwise rotation around the top face results in a 120\u00b0 clockwise rotation around the top-front-left vertex.</li> </ul> </li> </ul> <p>Exercises</p> <ul> <li> Prove that the group of rotations of a square is commutative by showing that for all 16 possible combinations of elements \\(a\\) and \\(b\\), \\(a b = b a\\).</li> <li> Prove that the group of rotations and reflections of a square is not commutative by finding two elements \\(a\\) and \\(b\\) such that \\(a b \\ne b a\\).</li> </ul>"},{"location":"drafts/gentle-introduction/group-theory/#generators","title":"Generators","text":"<p>A generatoring set for a group is a subset of the elements that can generate any element in the group using composition and inverses.</p> <p>Examples of generating sets for the integers under addition</p> <ul> <li> \\(\\{ 1 \\}\\) is a generating set for the integers under addition.<ul> <li>We can invert \\(1\\) to get \\(-1\\).</li> <li>We can compose \\(1\\) with \\(-1\\) to get \\(1 + (-1) = 0\\).</li> <li>We can compose \\(1\\) with itself to get \\(1 + 1 = 2\\).</li> <li>We can compose \\(2\\) with \\(1\\) to get \\(2 + 1 = 3\\).</li> <li>etc.</li> </ul> </li> <li> \\(\\{ -1 \\}\\) is a generating set for the integers under addition.</li> <li> \\(\\{ 1, 16, -544 \\}\\) is a generating set for the integers under addition. (We don\u2019t have to use \\(16\\) and \\(-544\\).)</li> <li> \\(\\{ 2 \\}\\) is not a generating set for the integers under addition because there is no way to generate \\(1\\).</li> <li> \\(\\{ 4, 17 \\}\\) is a generating set for the integers under addition.<ul> <li>We can generate \\(1\\) as \\(17 + (-4) + (-4) + (-4) + (-4)\\).</li> <li>We can generate all the other elements using \\(1\\).</li> </ul> </li> </ul> <p>Examples of generating sets for the nonzero rationals under multiplication</p> <ul> <li> A finite set can\u2019t generate all the nonzero rationals under multiplication.<ul> <li>For example, the set \\(\\{ 2, 3 \\}\\) can\u2019t generate any multiple of \\(5\\).</li> </ul> </li> <li> A set with only positive numbers can\u2019t generate the whole group, because it can\u2019t generate negative numbers.<ul> <li>Multiplying two positive numbers always results in a positive number.</li> <li>The inverse of a positive number is still positive.</li> </ul> </li> <li> The union of \\(\\{ -1 \\}\\) with the set of the prime numbers is a generating set for the nonzero rationals under multiplication.<ul> <li>For example, we can generate \\(-\\frac{22}{7}\\) as \\((-1) \\times 2 \\times 11 \\times 7^{-1}\\).</li> </ul> </li> </ul> <p>Exercises</p> <p>For each of the following groups, find one of the smallest possible generating sets and prove that it is a generating set by constructing every element in the group:</p> <ul> <li>Rotations of a square (4 elements total; smallest generating set should have 1 element)</li> <li>Rotations &amp; reflections of a square (8 elements total; smallest generating set should have 2 elements)</li> <li>Challenge: rotations of a cube (24 elements total; smallest generating set should have 2 elements)</li> </ul> <p>Every group generates itself. In other words, the set of all a group\u2019s elements is a generating set for the group.</p>"},{"location":"drafts/gentle-introduction/group-theory/#subgroups","title":"Subgroups","text":"<p>A subgroup is a group whose elements are a subset of another group. The operation of a subgroup has to be the same as the operation of the original group.</p> <p>Examples of subgroups</p> <ul> <li> The rotations of a square are a subgroup of the rotations &amp; reflections of a square.</li> <li> The reflections of a square are not a subgroup of the rotations &amp; reflections of a square.<ul> <li>There is no identity element.</li> <li>Composing two reflections may result in a rotation, which is not a reflection.</li> </ul> </li> <li> The positive integers are not a subgroup of the integers under addition.<ul> <li>The positive integers are not a group because there are no inverses.</li> </ul> </li> <li> The even integers (positive and negative) are a subgroup of integers under addition.</li> <li> The odd integers are not a subgroup of the integers under addition.<ul> <li>There is no identity element.</li> <li>Adding two odd integers results in an even integer.</li> </ul> </li> <li> In general, the positive and negative multiples of any integer \\(n\\) are a subgroup of integers under addition.</li> <li>The trivial group \\(\\{ e \\}\\) is a subgroup of every group.<ul> <li>Even if the identity element is named something other than \\(e\\) (like \\(1\\) or ) it is still equivalent in structure.</li> </ul> </li> </ul> <p>Just like a proper subset is a subset that is not equal to the original set, a proper subgroup is a subgroup that is not equal to the original group.</p> <p>The rest of this page is under construction</p>"},{"location":"drafts/gentle-introduction/group-theory/#cosets","title":"Cosets","text":"<p>Once you have a </p> <ul> <li>right cosets (because right action)</li> </ul>"},{"location":"drafts/gentle-introduction/group-theory/#permutation-groups","title":"Permutation groups","text":"<ul> <li>function notation to apply a permutation to an element</li> </ul>"},{"location":"drafts/gentle-introduction/group-theory/#cycle-notation","title":"Cycle notation","text":"<ul> <li>if an element stays in the same place, don\u2019t write it</li> </ul>"},{"location":"drafts/gentle-introduction/group-theory/#group-actions","title":"Group actions","text":"<ul> <li>Given an initial orientation, there is a one-to-one correspondence between transformations and orientations. Also, transformations tell you how to change one orientation into another. We\u2019ll learn more about this in group actions.</li> </ul>"},{"location":"drafts/gentle-introduction/group-theory/#examples-using-puzzles","title":"Examples using puzzles","text":"<ol> <li> <p>Taking the remainder of \\((-7) \\div 3\\) would usually result in \\(-1\\) because \\(-7 = 3 \\times (-2) + (-1)\\), but \\(-7 \\pmod 3\\) is \\(2\\) because the result must be one of \\(\\{ 0,1,2 \\}\\) and \\(-7 = 3 \\times (-3) + 2\\).\u00a0\u21a9</p> </li> </ol>"},{"location":"drafts/gentle-introduction/set-theory/","title":"Set Theory","text":"<p>A set is a collection of objects with no duplicates. Ordering within a set doesn\u2019t matter.</p> <p>Examples of sets</p> <ul> <li>\\(\\{ 1, 2, 3, 4, 5 \\}\\) is a set with five elements.</li> <li>\\(\\{ \\square, \\triangle \\}\\) is a set with two elements.</li> </ul> <p>Common infinite sets</p> <ul> <li>\\(\\mathbb{Z}\\) is the set of integers</li> <li>\\(\\mathbb{Q}\\) is the set of rational numbers (fractions)</li> <li>\\(\\mathbb{R}\\) is the set of real numbers (everything on the number line)</li> <li>\\(\\mathbb{Z}^+\\) is the set of positive integers</li> <li>\\(\\mathbb{Q}^+\\) is the set of positive rational numbers</li> <li>\\(\\mathbb{R}^+\\) is the set of positive real numbers</li> </ul> <p>The empty set \\(\\{\\}\\) has zero elements. It is often written with the symbol \\(\\varnothing\\).</p>"},{"location":"drafts/gentle-introduction/set-theory/#elements","title":"Elements","text":"<p>The symbol \\(\\in\\) (pronounced \u201cin\u201d or \u201celement of\u201d) can be used to write statements about whether an element is in a set. For example:</p> <ul> <li>\\(3 \\in \\{ 1, 2, 3, 4 \\}\\)</li> <li>\\(16 \\notin \\{ 1, 2, 3, 4 \\}\\)</li> <li>\\(\\pi \\in \\mathbb{R}\\)</li> <li>\\(\\pi \\notin \\mathbb{Q}\\)</li> </ul>"},{"location":"drafts/gentle-introduction/set-theory/#subsets","title":"Subsets","text":"<p>A set \\(A\\) is subset of another set \\(B\\) if all the elements in \\(A\\) are also elements in \\(B\\). This is often written \\(A \\subseteq B\\).</p> <p>Examples of subsets</p> <ul> <li>\\(\\varnothing\\), \\(\\{ 4 \\}\\), \\(\\{ 1, 3 \\}\\), and \\(\\{ 1, 2, 3, 4, 5 \\}\\) are all subsets of \\(\\{ 1, 2, 3, 4, 5 \\}\\).</li> <li>\\(\\{ 1, 2, 3, 4, 5 \\} \\subseteq \\mathbb{Z}\\)</li> <li>\\(\\mathbb{Z} \\subseteq \\mathbb{Q} \\subseteq \\mathbb{R}\\)</li> </ul> <p>Facts about subsets</p> <ul> <li>Every set is a subset of itself: \\(A \\subseteq A\\)</li> <li>\\(\\varnothing\\) is a subset of every set: \\(\\varnothing \\subseteq A\\)</li> <li>If \\(A \\subseteq B\\) and \\(B \\subseteq C\\), then \\(A \\subseteq C\\).</li> <li>If \\(A \\subseteq B\\) and \\(B \\subseteq A\\), then \\(A = B\\).</li> </ul> <p>A set \\(A\\) is a proper subset of \\(B\\) if \\(A \\subseteq B\\) and \\(A \\ne B\\). (The term strict subset is also used and means the same thing.) This is often written \\(A \\varsubsetneq B\\).<sup>1</sup></p>"},{"location":"drafts/gentle-introduction/set-theory/#union","title":"Union","text":"<p>The union of two sets is the set with all the elements in either one.</p> <p>Examples of unions</p> <p>The union of \\(\\{ 1, 2, 3, 4, 5 \\}\\) and \\(\\{ 2, 4, 6, 8, 10 \\}\\) is \\(\\{ 1, 2, 3, 4, 5, 6, 8, 10 \\}\\).</p>"},{"location":"drafts/gentle-introduction/set-theory/#intersection","title":"Intersection","text":"<p>The intersection of two sets is the set with all the elements in both.</p> <p>Examples of intersections</p> <p>The intersection of \\(\\{ 1, 2, 3, 4, 5 \\}\\) and \\(\\{ 2, 4, 6, 8, 10 \\}\\) is \\(\\{ 2, 4 \\}\\).</p>"},{"location":"drafts/gentle-introduction/set-theory/#permutation","title":"Permutation","text":"<p>A permutation of a rearrangement of the elements in a set.</p> <p>To-do: examples of permutations</p>"},{"location":"drafts/gentle-introduction/set-theory/#maps","title":"Maps","text":"<p>A map or function is a way of turning elements from an input set (the domain) into elements of an output set (the codomain). If you\u2019re familiar with the \u201cvertical line test\u201d on a graph, that\u2019s equivalent to saying that each element from the input maps to at exactly one element of the output.</p>"},{"location":"drafts/gentle-introduction/set-theory/#bijections","title":"Bijections","text":"<p>A bijection is a two-way map between sets where each element in one set matches with exactly one element from the other set. If the sets are finite, they must have the same number of elements, or else the map couldn\u2019t go both ways. A bijection always has an inverse bijection that goes the other wya.</p> <p>It\u2019s common to use the notation \\(x \\mapsto y\\) to mean \\(x\\) (from the input set) maps to \\(y\\) (from the output set).</p> <p>If the sets are finite, we can write a bijection by listing what each element maps to. If the sets are infinite, we have to be use variables to handle infinitely many values at once.</p> <p>Examples of bijections on finite sets</p> <p>Bijection</p> <p>Here is a bijection between \\(\\{ 0,1,2,3 \\}\\) and \\(\\{ A,B,C,D \\}\\):</p> <ul> <li>\\(0 \\mapsto C\\)</li> <li>\\(1 \\mapsto D\\)</li> <li>\\(2 \\mapsto A\\)</li> <li>\\(3 \\mapsto B\\)</li> </ul> <p>Here is its inverse:</p> <ul> <li>\\(A \\mapsto 2\\)</li> <li>\\(B \\mapsto 3\\)</li> <li>\\(C \\mapsto 0\\)</li> <li>\\(D \\mapsto 1\\)</li> </ul> <p>Not a bijection</p> <p>This is not a bijection between \\(\\{ 0,1,2,3 \\}\\) and \\(\\{ A,B,C,D \\}\\), because \\(2\\) and \\(3\\) both map to \\(B\\) and nothing maps to \\(D\\):</p> <ul> <li>\\(0 \\mapsto C\\)</li> <li>\\(1 \\mapsto A\\)</li> <li>\\(2 \\mapsto B\\)</li> <li>\\(3 \\mapsto B\\)</li> </ul> <p>Notice that we can\u2019t make the inverse bijection either:</p> <ul> <li>\\(A \\mapsto 1\\)</li> <li>\\(B \\mapsto {?}\\)</li> <li>\\(C \\mapsto 0\\)</li> <li>\\(D \\mapsto {?}\\)</li> </ul> <p>Examples of bijections on infinite sets</p> <ul> <li> \\(x \\mapsto x+1\\) is a bijection on the integers \\(\\mathbb{Z}\\). Its inverse is the bijection \\(x \\mapsto x-1\\).</li> <li> \\(x \\mapsto 2x\\) is not a bijection on the integers \\(\\mathbb{Z}\\). Nothing maps to odd numbers.</li> <li> \\(x \\mapsto 2x\\) is a bijection on the real numbers \\(\\mathbb{R}\\). Its inverse is the bijection \\(x \\mapsto \\frac{x}{2}\\).</li> </ul> <p>Exercises</p> <p>For each of the following maps, determine whether it is a bijection. If it is a bijection, find its inverse.</p> <p>You are welcome to use a graphing calculator to help.</p> <ul> <li>\\(x \\mapsto x^2 \\quad (\\mathbb{R} \\to \\mathbb{R})\\)   Answer:  This is not a bijection on the real numbers \\(\\mathbb{R}\\). Nothing maps to negative numbers.</li> <li>\\(x \\mapsto x^2 \\quad (\\mathbb{R}^+ \\to \\mathbb{R}^+)\\)   Answer:  This is a bijection on the positive real numbers \\(\\mathbb{R}^+\\). Its inverse is the bijection \\(x \\mapsto \\sqrt x\\).</li> <li>\\(x \\mapsto -\\sqrt[3]x \\quad (\\mathbb{R} \\to \\mathbb{R})\\)   Answer:  This is a bijection on the real numbers \\(\\mathbb{R}\\). Its inverse is the bijection \\(x \\mapsto x^3\\).</li> <li>\\(x \\mapsto 42 \\quad (\\mathbb{R} \\to \\mathbb{R})\\)   Answer:  This is not a bijection on the real numbers \\(\\mathbb{R}\\). Nothing maps to anything other than 42.</li> <li>\\(x \\mapsto \\begin{cases}2x+1 &amp; x \\ge 0 \\\\ -2x &amp; x &lt; 0\\end{cases} \\quad (\\mathbb{Z} \\to \\mathbb{Z}^+)\\)   Answer:  This is a bijection from the integers \\(\\mathbb{Z}\\) to the positive integers \\(\\mathbb{Z}^+\\). Its inverse is \\(x \\mapsto \\begin{cases}\\frac{x-1}{2} &amp; x \\text{ is odd} \\\\ -\\frac{x}{2} &amp; x \\text{ is even}\\end{cases} \\quad (\\mathbb{Z}^+ \\to \\mathbb{Z})\\)</li> </ul> <ol> <li> <p>We avoid the symbol \\(\\subset\\) because some authors use it to for subsets and some authors use it for proper subsets.\u00a0\u21a9</p> </li> </ol>"},{"location":"koans/","title":"Index","text":"<p>Welcome, neophyte!</p> <p>Here you will find a selection of short stories of other Learners such as yourself, who have become enlightened on the path of Hypercubing. To start, you might want to read about Neophyte Cherto\u2019s Application of Algorithms.</p> <p>This is a work of fiction. Resemblance to any persons, real or fictitious, is entirely coincidental. Resemblance to any puzzles, real or complex, is probably intentional.</p>"},{"location":"koans/adaptability/","title":"Adaptability","text":"<p>Hactar &amp; Luna, 2024-04-15</p> <p>Neophyte Grigor had been learning under Master Yuwi for several months, strengthening his skills with the 3x3x3. Over time, he grew frustrated; he had come to the Temple of Intuition to learn to solve more exciting puzzles.</p> <p>\u201cMaster Yuwi, thank you for your mentorship. You have taught me many new methods of solving a 3x3x3, but are these useful? I had already learned the method CFOP from the Temple of the Swift Solve, and could solve the cube in just 20 seconds. These new methods are slower and more confusing; what is their use?\u201d</p> <p>Master Yuwi nodded. \u201cThe techniques I have taught you are slower. Certainly your Method of the Swift Solve is superior.\u201d She then handed him an Astroid Attack. \u201cI trust you can solve this using CFOP.\u201d</p> <p>The neophyte stared at the puzzle for a moment. It was like nothing he had ever seen before. Certainly the Orientation and Permutation algorithms of CFOP would be of no use here. Nonetheless, when he applied the slower methods of Commutators and Blockbuilding, he was able to completely solve the puzzle piece by piece. By the end, he had understood exactly the purpose of each and every move in his solution.</p> <p>At that moment, Grigor was enlightened.</p>"},{"location":"koans/algorithms/","title":"Applications of Algorithms","text":"<p>Hactar, 2024-04-15</p> <p>Neophyte Cherto toiled into the late hours of the night, eager to complete their latest assignment: producing a written guide to their own solution to Rubik\u2019s Puzzle of Four Dimensions. They had solved the puzzle once before, but Master Nazir had suggested that they solve it again before beginning their writing, for there was a case they had not yet encountered.</p> <p>As Cherto approached the end of the Orientation of the Last Cell of their 3x3x3x3, they found that only a single piece was twisted in place. Cherto, being wise in the ways of Isolation and the construction of Commutators, was easily able to solve this case. They carefully noted the sequence of moves they had performed, added it to their guide, and then continued on.</p> <p>Some days later, another disciple came upon Cherto and addressed them. \u201cI am Neophyte Nima. I have nearly solved my puzzle, save for a single 3-color piece twisted in place. Its stickers are permuted in a cycle, and I cannot seem to rotate it without rotating another piece. Master Nazir said that you had recently solved this case and suggested that I learn from the solution from you.\u201d</p> <p>Cherto excitedly withdrew the latest draft of their solution guide and began copying their algorithm onto a slip of parchment for Nima to read. They began: <code>U R2 ...</code></p> <p>Later that day, Master Nazir found Nima still struggling on the same monotwist case, and inquired whether she had found help from Cherto. She replied: \u201cCherto was kind enough to provide their method, but I believe they copied it wrong, for my puzzle becomes scrambled when I apply their algorithm!\u201d</p> <p>\u201cCherto has given you an algorithm?\u201d Master Nazir peered over her shoulder. \u201cI see you struggle with the application of Cherto\u2019s algorithm. Did they explain the derivation of this algorithm to you?\u201d Nima responded that they had not. Master Nazir left the room, leaving Nima to her struggles.</p> <p>Shortly after, Master Nazir returned with Neophyte Cherto. Cherto watched Nima diligently applying their algorithm to the hemimegaminx in front of her, unaware of its 4-dimensional origins.</p> <p>At that moment, Cherto was enlightened.</p>"},{"location":"koans/behold/","title":"Behold!","text":"<p>Hactar, 2024-04-15</p> <p>Neophyte Horatio had been studying hyperbolic tilings under Master Nikolai for nearly a month, and was learning well the ways of the petal, the fourfold corner, and orientability. He woke up to find an envelope outside his door containing a message from his mentor, Master Nikolai:</p> <p></p> <p>Neophyte Horatio, I have fallen ill and cannot attend your instruction today. Enclosed is a hyperbolic tiling which I am sure you have solved before. I expect you will have it solved by tomorrow. - Master Nikolai</p> <p>The neophyte unfolded the puzzle and gasped in horror. The polygons of this tiling were eight-sided, and six met at each vertex! He had learned by now that each additional polygon at a vertex immensely increased the complexity of the cut interactions, so surely this puzzle would require some extensive sequences to isolate pieces. But he had no room! The puzzle had only six colors, and often the same face met multiple times at one vertex! Nonetheless, he began building an edge, a petal, another edge, another petal, \u2026 but as he inserted the second petal, the first petal popped out. Try as he might, he could not remove the second petal without replacing the first as well.</p> <p>Horatio sat and pondered. He had heard fragments from Neophyte Atenea, who had been studying The Theory of Grips, and had an idea. He counted the colors, the cuts, the interactions between pieces, \u2026</p> <p>At that moment, Horatio was enlightened.</p> <p>He solved the rest of the puzzle trivially, using not a single hyperbolic technique.</p>"},{"location":"koans/projection/","title":"Projection","text":"<p>Rowan, 2024-06-12</p> <p>Neophyte Reyhan had recently seen Neophyte Horatio ascend the dimensional barrier by conquering the legendary 3x3x3x3x3 puzzle, and wanted to join him in this accomplishment. But Reyhan was confused by the spell Horatio used for the construction of his puzzle. It seemed to show stickers and pieces in strange locations that she couldn\u2019t make sense of.</p> <p>Later that night, Reyhan went to the altar and crafted her dimensional spell. Finally after several days of solving, she had solved the puzzle! Reyhan excitedly rushed to find Horatio, to tell him about her tremendous achievement, but Horatio was also confused about Reyhan\u2019s puzzle. </p> <p>\u201cWhy do you have so many duplicate stickers?\u201d he asked. \u201cFurthermore, even with those duplicate stickers, you still cannot see every piece at the same time.\u201d</p> <p>That\u2019s when Master Nilu strolled past, casually solving a 3x3x3x3x3 (formed using yet another different spell). Both Reyhan and Horatio ran up to Nilu and started arguing about whose puzzle was correct.</p> <p>\u201cMy neoyphytes\u201d, Nilu sighed as she guided them towards the Temple of the Sacred Hyperstone.</p> <p>\u201cReyhan, you will stand to the left of the Hyperstone. Horatio, stand on the right. I will stand in front.\u201d After a brief pause to allow a moment of reflection, Master Nilu inquired \u201cnow, what are we looking at?\u201d</p> <p>Reyhan and Horatio each described how the sacred hyperstone looked from their viewpoints\u2026</p> <p>\u201cBut it is the same stone!\u201d Nilu exclaimed.</p> <p>At that moment, Reyhan and Horatio were enlightened. </p>"},{"location":"koans/soup/","title":"Soup","text":"<p>Hactar, Luna, Banderson, et al., 2024-04-15</p> <p>One autumn day, Neophyte Cherto approached their mentor, Master Nazir, with a new design for a puzzle. Cherto had heard of the Shrine of Manifestation, where the Priests of High Symmetry imbue 4-dimensional or even 5-dimensional symmetry unto ordinary 3-dimensional shapes, and decided to try their hand at designing such a spell. They had counted the stickers and the pieces of a 4D puzzle, and had constructed a 3D shape with the same stickers.</p> <p>Master Nazir, having been presented with the neophyte\u2019s design, sighed deeply and gently shook his head as they walked through the garden together.</p> <p>\u201cYoung neophyte, how will the pieces twist? Have you accounted for the orientations of each piece? Do they change according to the moves?\u201d</p> <p>Neophyte Cherto scrambled to fix the issues. \u201cWell we can adjust the orientation of the pieces after each twist!\u201d</p> <p>\u201cAnd how, young neophyte, is that any better a puzzle than the soup we eat for lunch?\u201d</p> <p>Cherto\u2019s face fell. They knew that when incantations failed at the Shrine of Manifestation, the polytopes on the altar melted into a formless blob that the elders called \u201csoup.\u201d</p> <p>\u201cBut surely there must be a way to make this work! I have even constructed an analogous 2D representation of a similar 3D puzzle\u2013\u201c</p> <p>Master Nazir hushed them and gestured toward a nearby tree. \u201cSurely there must be a way for you to climb this tree! I have even routed a path through a similar tree.\u201d</p> <p>\u201cBut that tree is dead.\u201d Cherto paused, then continued more confidently. \u201cThe branches may be weak; it cannot be compared to another tree.\u201d</p> <p>At that moment, Cherto was enlightened.</p>"},{"location":"koans/square-prism/","title":"Square Prism","text":"<p>Hactar &amp; Luna, 2024-04-15</p> <p>Master Nazir was working on a new puzzle, a novel cut of a square-pentagon duoprism, when he noticed Neophyte Sama standing awkwardly, as though she were waiting for something.</p> <p>\u201cDo you have a question for me?\u201d Master Nazir asked, not bothering to look up from his dihedral angle calculations.</p> <p>\u201cY- yes. Master, what is this shape? I did not know a 4-dimensional shape could be constructed only from cubes and pentagonal prisms.\u201d</p> <p>\u201cYou recognize cubes in this shape?\u201d</p> <p>\u201cAre these cells not cubes? They appear to be cubes.\u201d</p> <p>Master Nazir stood up from his work and led the neophyte around the room. The puzzle workshop extended quite far in all directions, and several monks from other temples were working on other designs throughout.</p> <p>He asked, \u201cIs this room a cube?\u201d</p> <p>\u201cIt certainly appears to be, if the ceiling is as tall as the length of the wall.\u201d</p> <p>\u201cAre you able to measure it?\u201d</p> <p>\u201cNo.\u201d</p> <p>\u201cWhy not?\u201d</p> <p>\u201cI cannot walk on the wall.\u201d</p> <p>\u201cAnd yet you walk on the floor.\u201d</p> <p>At that moment, Sama was enlightened.</p>"},{"location":"koans/twice-spun/","title":"Twice Spun","text":"<p>Hactar, 2024-04-15</p> <p>One day Acolyte Quenta found herself wandering the gardens, as she often did, and upon crossing a small bridge she found a curious puzzle. It appeared in the form of an ordinary 3x3x3, but with an odd coating on the stickers that presented a gradient over each piece that tilted strangely as she observed it from different angles. She took the cube and scrambled it, intending to return it once she had solved it.</p> <p>As she twisted the puzzle, she became sure that it was playing tricks on her. Even whole-puzzle rotations seemed to behave oddly. She had placed a blue piece next to an orange piece, but upon spinning the puzzle in her hands, the blue piece became orange and the orange piece had become blue! After struggling for a half-hour, managing only to pair a handful of pieces, she resolved to find Master Eiji, who was an expert in variations of the 3x3x3.</p> <p>Upon showing the mysterious puzzle to Master Eiji, he led her inside to a bare room with a column in the center. \u201cWalk around the column and return to me. Then you shall learn how to solve this puzzle,\u201d he instructed. Quenta gave him a quizzical look, but then walked around the column\u2013 and found that Master Eiji had disappeared! Furthermore, the room was slightly different; she could not see the entrance they had come in from, and instead there sat a bench against the wall. She walked another full circle around the column, and then found Master Eiji.</p> <p>\u201cMaster Eiji!\u201d she exclaimed. \u201cWhat strange geometry is this room constructed from? It is neither Spherical nor Hyperbolic, as the light does not seem to bend. But it cannot be Euclidean, because I circled the room twice before returning to you\u2013\u201d she stopped.</p> <p>At that moment, Quenta was enlightened.</p>"},{"location":"leaderboards/aggregate/","title":"Aggregate Stats","text":"<p>These stats only include single solves and blindsolves. Ao5, one-handed, no-filters, and FMC are not included.</p> Kinch RankParallel Sum of RanksSum of Ranks \\[\\frac{1}{\\#\\text{events}}\\sum_{e\\in \\text{events}}\\left(100 \\cdot \\frac{\\text{world record}_e}{\\text{personal best}_e}\\right)\\] <p>A person\u2019s event ratio for one event is the ratio of the world record divided by their personal best.</p> <p>A person\u2019s total Kinch Rank is 100 times the average of their event ratios, including zeros for events they haven\u2019t participated in.</p> Index Name Score 1 Logan Maciejewski (The Cube Dude) 50.376 2 Nenri 48.940 3 Grant Staten 47.280 4 Andrew Farkas (Hactar) 19.194 5 Rowan Fortier 17.324 6 Luna Harran 15.194 7 y=sin(x) 14.219 8 Tymon Fro 13.388 9 PKEarth 11.578 10 Bilal Mourad 11.327 11 Hana (Curun1r) 7.482 12 Emanuele Battistin 7.059 13 Josie Elliston 5.693 14 Milo Jacquet 5.462 15 Adam Marcellus Kelly 4.161 16 Kevin Liu 4.000 17 Sebastian Yuste 4.000 18 Tetrian 3.702 19 Vin 3.344 20 Jessica Chen 2.992 21 Edan Maor 2.870 22 TheGrayCuber 2.780 23 Saturnb 2.661 24 Ethan Davis 2.452 25 Asa Kaplan 2.428 26 Hyperespy 2.023 27 Lorenzo1098 1.701 28 The Void 1.679 29 Jack Cai 1.556 30 Emma-Marie Cadet 1.428 31 Vojt\u011bch K\u0159i\u017ean (voytxt) 1.424 32 Daniel Cohen 1.381 33 Godly 1.310 34 Normal Origamist 1.259 35 bruuhbrruh 1.258 36 Henry Pickle 1.149 37 Trey Bowen (Pkmnhx43) 1.126 38 Koen R. 1.094 39 Vigo Prins 0.959 40 Cali Kerschen 0.944 41 Connor Lindsay 0.865 42 Minidog06 0.809 43 Olaf Niechcial 0.787 44 Ray Chen 0.712 45 Stella 0.707 46 K3v1N 0.705 47 Gabe Stout 0.685 48 Murat Emre Yi\u011fiter 0.653 49 Messil 0.608 50 Alvin 0.510 51 Vincent Pistelli 0.468 52 Markk 0.401 53 Akkei 0.325 54 Starryninja 0.307 55 Freya 0.252 \\[\\left(\\sum_{e\\in \\text{events}} \\text{rank}_e^{-1}\\right)^{-1}\\] <p>A parallel sum is the reciprocal of the sum of reciprocals.</p> <p>A person\u2019s Parallel Sum of Ranks is the parallel sum of their rank in every event, including \\(\\infty\\) for events they haven\u2019t participated in.</p> Index Name Score 1 Logan Maciejewski (The Cube Dude) 0.098 2 Nenri 0.108 3 Grant Staten 0.126 4 y=sin(x) 0.323 5 Andrew Farkas (Hactar) 0.342 6 Rowan Fortier 0.498 7 Luna Harran 0.539 8 Tymon Fro 0.548 9 Bilal Mourad 0.570 10 PKEarth 0.745 11 Emanuele Battistin 0.831 12 Milo Jacquet 0.833 13 Kevin Liu 1.000 14 Sebastian Yuste 1.000 15 Hyperespy 1.556 16 Josie Elliston 1.600 17 Hana (Curun1r) 1.667 18 Asa Kaplan 2.000 19 TheGrayCuber 2.000 20 Tetrian 2.368 21 Adam Marcellus Kelly 2.400 22 Jessica Chen 2.625 23 Ethan Davis 2.780 24 Jack Cai 3.000 25 Vin 3.077 26 K3v1N 4.000 27 Markk 4.000 28 Daniel Cohen 5.000 29 Edan Maor 6.000 30 Normal Origamist 6.000 31 Saturnb 6.154 32 Akkei 7.000 33 The Void 7.674 34 Vigo Prins 8.000 35 Lorenzo1098 8.108 36 Connor Lindsay 9.000 37 Trey Bowen (Pkmnhx43) 9.512 38 Emma-Marie Cadet 14.000 39 Vojt\u011bch K\u0159i\u017ean (voytxt) 15.000 40 Godly 17.000 41 bruuhbrruh 18.000 42 Henry Pickle 19.000 43 Koen R. 22.000 44 Cali Kerschen 24.000 45 Minidog06 27.000 46 Olaf Niechcial 28.000 47 Ray Chen 29.000 48 Stella 30.000 49 Gabe Stout 31.000 50 Murat Emre Yi\u011fiter 32.000 51 Messil 35.000 52 Alvin 36.000 53 Vincent Pistelli 37.000 54 Starryninja 39.000 55 Freya 40.000 \\[\\sum_{e\\in \\text{events}} \\text{rank}_e\\] <p>A person\u2019s Sum of Ranks is the sum of their rank in every event. When someone hasn\u2019t participated in an event, their rank is considered to be equal to one plus the number of people who have participated.</p> Index Name Score 1 Grant Staten 72 2 Nenri 72 3 Andrew Farkas (Hactar) 111 4 Logan Maciejewski (The Cube Dude) 121 5 PKEarth 121 6 Bilal Mourad 125 7 Tymon Fro 126 8 Rowan Fortier 128 9 Hana (Curun1r) 129 10 Josie Elliston 140 11 Adam Marcellus Kelly 145 12 Luna Harran 146 13 y=sin(x) 146 14 Edan Maor 152 15 Vin 152 16 Saturnb 156 17 Emanuele Battistin 157 18 Emma-Marie Cadet 160 19 Vojt\u011bch K\u0159i\u017ean (voytxt) 161 20 Godly 163 21 Jessica Chen 163 22 bruuhbrruh 164 23 Henry Pickle 165 24 Lorenzo1098 167 25 Koen R. 168 26 Cali Kerschen 170 27 Trey Bowen (Pkmnhx43) 171 28 Minidog06 173 29 The Void 173 30 Olaf Niechcial 174 31 Ray Chen 175 32 Tetrian 175 33 Stella 176 34 Gabe Stout 177 35 Milo Jacquet 177 36 Murat Emre Yi\u011fiter 178 37 Ethan Davis 179 38 Hyperespy 180 39 Messil 181 40 Alvin 182 41 Daniel Cohen 182 42 Normal Origamist 183 43 Vincent Pistelli 183 44 Kevin Liu 184 45 Starryninja 185 46 TheGrayCuber 185 47 Vigo Prins 185 48 Akkei 186 49 Asa Kaplan 186 50 Connor Lindsay 186 51 Freya 186 52 Jack Cai 186 53 K3v1N 186 54 Markk 186 55 Sebastian Yuste 186"},{"location":"leaderboards/history/","title":"World Record History","text":"View Options Time Format Date Format 4D5D+MagicTileMisc HypercubesHypercuboidsPhysicalOther 3x3x3x32x2x2x24x4x4x45x5x5x56x6x6x67x7x7x7 SingleAo5BlindfoldedNo Filters Name Time Date Program Andrew Farkas (Hactar) 1m 33s 520ms1:33.52 2025-09-274 weeks ago HSC Andrew Farkas (Hactar) 1m 34s 030ms1:34.03 2025-08-152 months ago HSC Josie Elliston 1m 34s 590ms1:34.59 2025-08-122 months ago HSC Josie Elliston 1m 36s 910ms1:36.91 2025-08-092 months ago HSC Andrew Farkas (Hactar) 1m 37s 480ms1:37.48 2025-06-263 months ago HSC Josie Elliston 1m 41s 250ms1:41.25 2025-06-224 months ago HSC Josie Elliston 1m 41s 290ms1:41.29 2025-06-194 months ago HSC Andrew Farkas (Hactar) 1m 43s 250ms1:43.25 2025-06-044 months ago HSC Andrew Farkas (Hactar) 1m 44s 170ms1:44.17 2025-06-044 months ago HSC Andrew Farkas (Hactar) 1m 44s 540ms1:44.54 2025-05-265 months ago HSC Nenri 1m 47s 900ms1:47.90 2025-05-265 months ago HSC Andrew Farkas (Hactar) 1m 48s 180ms1:48.18 2025-04-295 months ago HSC Andrew Farkas (Hactar) 1m 52s 330ms1:52.33 2025-02-118 months ago HSC Andrew Farkas (Hactar) 1m 56s 420ms1:56.42 2023-05-132 years ago HSC Grant Staten 2m 03s 830ms2:03.83 2023-04-212 years ago HSC Andrew Farkas (Hactar) 2m 07s 300ms2:07.30 2023-04-082 years ago HSC Grant Staten 2m 11s 330ms2:11.33 2023-03-162 years ago HSC Andrew Farkas (Hactar) 2m 17s 970ms2:17.97 2023-03-112 years ago HSC Grant Staten 2m 21s 010ms2:21.01 2023-03-082 years ago HSC Andrew Farkas (Hactar) 2m 26s 460ms2:26.46 2023-02-182 years ago HSC Andrew Farkas (Hactar) 2m 29s 730ms2:29.73 2023-01-112 years ago HSC Andrew Farkas (Hactar) 2m 39s 470ms2:39.47 2023-01-082 years ago HSC Andrew Farkas (Hactar) 2m 41s 220ms2:41.22 2023-01-032 years ago HSC Andrew Farkas (Hactar) 2m 42s 810ms2:42.81 2022-12-302 years ago HSC Grant Staten 2m 59s 340ms2:59.34 2022-12-232 years ago HSC Andrew Farkas (Hactar) 2m 59s 970ms2:59.97 2022-12-222 years ago HSC Grant Staten 3m 06s 060ms3:06.06 2022-12-212 years ago HSC Grant Staten 3m 13s 970ms3:13.97 2022-12-212 years ago HSC Grant Staten 3m 16s 440ms3:16.44 2022-12-202 years ago HSC Grant Staten 3m 21s 520ms3:21.52 2022-12-152 years ago HSC Grant Staten 3m 23s 260ms3:23.26 2022-12-142 years ago HSC Grant Staten 3m 34s 430ms3:34.43 2022-12-142 years ago HSC Grant Staten 3m 45s 690ms3:45.69 2022-12-132 years ago HSC Grant Staten 3m 55s 320ms3:55.32 2022-12-102 years ago HSC Grant Staten 3m 58s 290ms3:58.29 2022-12-072 years ago HSC Grant Staten 4m 02s 600ms4:02.60 2022-12-032 years ago HSC Grant Staten 4m 09s 190ms4:09.19 2022-12-032 years ago HSC Grant Staten 4m 10s 840ms4:10.84 2022-12-022 years ago HSC Andrew Farkas (Hactar) 4m 30s 880ms4:30.88 2022-12-012 years ago HSC Grant Staten 4m 43s 860ms4:43.86 2022-11-302 years ago HSC Andrew Farkas (Hactar) 4m 50s 730ms4:50.73 2022-11-292 years ago HSC Grant Staten 4m 52s 940ms4:52.94 2022-11-272 years ago HSC Andrew Farkas (Hactar) 4m 58s 140ms4:58.14 2022-11-262 years ago HSC Grant Staten 5m 01s 920ms5:01.92 2022-11-262 years ago HSC Grant Staten 5m 23s 820ms5:23.82 2022-11-252 years ago HSC Grant Staten 5m 25s 140ms5:25.14 2022-11-252 years ago HSC Andrew Farkas (Hactar) 5m 32s 980ms5:32.98 2022-11-232 years ago HSC Grant Staten 6m 36s 380ms6:36.38 2022-11-232 years ago HSC Andrew Farkas (Hactar) 6m 38s 920ms6:38.92 2022-11-222 years ago HSC Grant Staten 6m 46s 210ms6:46.21 2022-11-222 years ago HSC Andrew Farkas (Hactar) 7m 02s 170ms7:02.17 2022-11-212 years ago HSC Grant Staten 7m 36s 320ms7:36.32 2022-11-212 years ago HSC Andrew Farkas (Hactar) 7m 43s 330ms7:43.33 2022-11-192 years ago HSC Andrew Farkas (Hactar) 8m 02s 530ms8:02.53 2022-11-192 years ago HSC Andrew Farkas (Hactar) 8m 15s 350ms8:15.35 2022-11-192 years ago HSC Andrew Farkas (Hactar) 8m 23s 590ms8:23.59 2022-11-182 years ago HSC Rowan Fortier 8m 58s 820ms8:58.82 2022-11-182 years ago HSC Andrew Farkas (Hactar) 9m 05s 820ms9:05.82 2022-11-062 years ago HSC Tetrian 10m 11s 870ms10:11.87 2019-05-046 years ago MC4D Name Time Date Program Josie Elliston 1m 40s 030ms1:40.03 2025-09-241 month ago HSC Andrew Farkas (Hactar) 1m 42s 700ms1:42.70 2025-08-152 months ago HSC Andrew Farkas (Hactar) 1m 45s 610ms1:45.61 2025-06-263 months ago HSC Josie Elliston 1m 48s 280ms1:48.28 2025-06-224 months ago HSC Andrew Farkas (Hactar) 1m 50s 760ms1:50.76 2025-06-204 months ago HSC Andrew Farkas (Hactar) 1m 53s 410ms1:53.41 2025-06-044 months ago HSC Nenri 1m 55s 500ms1:55.50 2025-05-265 months ago HSC Andrew Farkas (Hactar) 1m 57s 020ms1:57.02 2025-05-055 months ago HSC Josie Elliston 1m 59s 900ms1:59.90 2025-05-045 months ago HSC Andrew Farkas (Hactar) 2m 00s 540ms2:00.54 2025-02-118 months ago HSC Andrew Farkas (Hactar) 2m 03s 180ms2:03.18 2024-05-231 year ago HSC Andrew Farkas (Hactar) 2m 16s 800ms2:16.80 2024-04-151 year ago HSC Andrew Farkas (Hactar) 2m 18s 180ms2:18.18 2023-05-122 years ago HSC Andrew Farkas (Hactar) 2m 20s 190ms2:20.19 2023-04-222 years ago HSC Andrew Farkas (Hactar) 2m 26s 160ms2:26.16 2023-04-222 years ago HSC Grant Staten 2m 28s 050ms2:28.05 2023-04-102 years ago HSC Andrew Farkas (Hactar) 2m 33s 100ms2:33.10 2023-04-082 years ago HSC Andrew Farkas (Hactar) 2m 35s 290ms2:35.29 2023-04-082 years ago HSC Grant Staten 2m 35s 940ms2:35.94 2023-03-102 years ago HSC Andrew Farkas (Hactar) 2m 39s 640ms2:39.64 2023-02-182 years ago HSC Andrew Farkas (Hactar) 3m 02s 780ms3:02.78 2022-12-312 years ago HSC Grant Staten 3m 52s 000ms3:52.00 2022-12-162 years ago HSC Name Time Date Program Sebastian Yuste 1h 21m 17s 680ms1:21:17.68 2022-03-173 years ago MC4D Name Time Date Program Nenri 3m 51s 950ms3:51.95 2025-10-052 weeks ago HSC Nenri 4m 15s 840ms4:15.84 2025-05-145 months ago HSC Nenri 4m 21s 990ms4:21.99 2025-05-135 months ago HSC Nenri 4m 26s 190ms4:26.19 2025-04-265 months ago HSC Nenri 4m 44s 110ms4:44.11 2025-03-197 months ago HSC PKEarth 4m 48s 970ms4:48.97 2024-08-101 year ago HSC Grant Staten 5m 16s 010ms5:16.01 2023-07-032 years ago HSC Grant Staten 5m 33s 390ms5:33.39 2023-07-032 years ago HSC Tetrian 10m 11s 870ms10:11.87 2019-05-046 years ago MC4D SingleAo5Blindfolded Name Time Date Program Bilal Mourad 14s 000ms14.00 2025-03-217 months ago HSC Bilal Mourad 14s 770ms14.77 2025-02-247 months ago HSC Bilal Mourad 15s 130ms15.13 2025-02-218 months ago HSC Bilal Mourad 15s 430ms15.43 2025-02-058 months ago HSC Bilal Mourad 16s 060ms16.06 2025-01-318 months ago HSC Bilal Mourad 16s 310ms16.31 2024-12-1310 months ago HSC Bilal Mourad 18s 210ms18.21 2024-12-1310 months ago HSC Bilal Mourad 18s 790ms18.79 2024-12-0310 months ago HSC PKEarth 19s 630ms19.63 2024-09-081 year ago HSC PKEarth 22s 240ms22.24 2024-09-011 year ago HSC PKEarth 22s 600ms22.60 2024-08-311 year ago HSC Bilal Mourad 23s 600ms23.60 2024-08-281 year ago HSC Adam Marcellus Kelly 23s 680ms23.68 2024-08-071 year ago HSC Adam Marcellus Kelly 25s 790ms25.79 2024-06-291 year ago HSC Adam Marcellus Kelly 26s 370ms26.37 2024-06-291 year ago HSC Adam Marcellus Kelly 26s 490ms26.49 2023-09-232 years ago HSC Grant Staten 28s 510ms28.51 2023-05-242 years ago HSC Grant Staten 31s 640ms31.64 2023-05-232 years ago HSC Grant Staten 33s 340ms33.34 2023-05-202 years ago HSC Grant Staten 34s 170ms34.17 2023-05-202 years ago HSC Grant Staten 34s 590ms34.59 2023-05-162 years ago HSC Grant Staten 34s 950ms34.95 2023-05-112 years ago HSC Grant Staten 36s 230ms36.23 2023-03-082 years ago HSC Adam Marcellus Kelly 39s 400ms39.40 2023-01-162 years ago HSC Adam Marcellus Kelly 43s 540ms43.54 2023-01-162 years ago HSC Grant Staten 44s 750ms44.75 2023-01-022 years ago HSC Grant Staten 48s 520ms48.52 2023-01-012 years ago HSC Grant Staten 49s 980ms49.98 2023-01-012 years ago HSC Grant Staten 50s 950ms50.95 2022-12-212 years ago HSC Tetrian 1m 00s 800ms1:00.80 2021-07-244 years ago MC4D Name Time Date Program Bilal Mourad 18s 160ms18.16 2025-08-212 months ago HSC Bilal Mourad 18s 170ms18.17 2025-05-115 months ago HSC Bilal Mourad 18s 810ms18.81 2025-04-116 months ago HSC Bilal Mourad 19s 090ms19.09 2025-04-106 months ago HSC Bilal Mourad 19s 320ms19.32 2025-03-157 months ago HSC Bilal Mourad 19s 500ms19.50 2025-02-128 months ago HSC Bilal Mourad 20s 170ms20.17 2025-02-118 months ago HSC Bilal Mourad 20s 180ms20.18 2025-01-318 months ago HSC Bilal Mourad 20s 490ms20.49 2025-01-249 months ago HSC Bilal Mourad 20s 630ms20.63 2025-01-059 months ago HSC Bilal Mourad 21s 840ms21.84 2025-01-049 months ago HSC Bilal Mourad 22s 390ms22.39 2024-12-269 months ago HSC Bilal Mourad 22s 730ms22.73 2024-12-2110 months ago HSC Bilal Mourad 23s 410ms23.41 2024-12-2110 months ago HSC Bilal Mourad 23s 450ms23.45 2024-12-1710 months ago HSC Bilal Mourad 23s 530ms23.53 2024-12-1610 months ago HSC Bilal Mourad 23s 710ms23.71 2024-12-1110 months ago HSC Bilal Mourad 24s 430ms24.43 2024-12-0910 months ago HSC PKEarth 24s 650ms24.65 2024-10-011 year ago HSC PKEarth 25s 380ms25.38 2024-09-141 year ago HSC PKEarth 26s 880ms26.88 2024-09-081 year ago HSC PKEarth 27s 160ms27.16 2024-09-071 year ago HSC PKEarth 28s 030ms28.03 2024-09-011 year ago HSC Adam Marcellus Kelly 28s 080ms28.08 2024-08-281 year ago HSC Bilal Mourad 29s 670ms29.67 2024-08-031 year ago HSC Adam Marcellus Kelly 31s 310ms31.31 2024-07-161 year ago HSC Adam Marcellus Kelly 33s 040ms33.04 2024-07-011 year ago HSC Andrew Farkas (Hactar) 33s 940ms33.94 2024-06-271 year ago HSC Bilal Mourad 39s 820ms39.82 2024-06-251 year ago HSC Andrew Farkas (Hactar) 40s 170ms40.17 2024-06-251 year ago HSC Bilal Mourad 41s 890ms41.89 2024-06-221 year ago HSC Andrew Farkas (Hactar) 43s 440ms43.44 2024-06-141 year ago HSC Bilal Mourad 48s 120ms48.12 2024-06-141 year ago HSC Bilal Mourad 48s 510ms48.51 2024-06-141 year ago HSC Bilal Mourad 48s 920ms48.92 2024-06-111 year ago HSC Bilal Mourad 50s 720ms50.72 2024-06-081 year ago HSC Bilal Mourad 55s 590ms55.59 2024-06-071 year ago HSC Bilal Mourad 59s 290ms59.29 2024-06-051 year ago HSC Bilal Mourad 1m 01s 930ms1:01.93 2024-06-051 year ago HSC Bilal Mourad 1m 05s 370ms1:05.37 2024-06-041 year ago HSC Bilal Mourad 1m 09s 430ms1:09.43 2024-06-041 year ago HSC Bilal Mourad 1m 10s 990ms1:10.99 2024-06-031 year ago HSC Bilal Mourad 1m 13s 310ms1:13.31 2024-06-031 year ago HSC Bilal Mourad 1m 14s 340ms1:14.34 2024-06-031 year ago HSC Bilal Mourad 1m 15s 690ms1:15.69 2024-06-021 year ago HSC Bilal Mourad 1m 19s 540ms1:19.54 2024-06-021 year ago HSC Bilal Mourad 1m 26s 900ms1:26.90 2024-05-311 year ago HSC Name Time Date Program Kevin Liu 10m 12s 770ms10:12.77 2024-10-121 year ago MC4D TheGrayCuber 14m 41s 550ms14:41.55 2019-10-126 years ago MC4D Single Name Time Date Program Grant Staten 7m 17s 750ms7:17.75 2025-10-072 weeks ago HSC Grant Staten 7m 30s 780ms7:30.78 2025-10-023 weeks ago HSC Grant Staten 7m 39s 950ms7:39.95 2025-10-013 weeks ago HSC Grant Staten 7m 40s 510ms7:40.51 2025-09-283 weeks ago HSC Grant Staten 7m 50s 730ms7:50.73 2025-09-231 month ago HSC Andrew Farkas (Hactar) 7m 52s 610ms7:52.61 2024-04-241 year ago HSC Andrew Farkas (Hactar) 7m 55s 180ms7:55.18 2024-04-221 year ago HSC Grant Staten 7m 55s 770ms7:55.77 2023-08-012 years ago HSC Grant Staten 8m 30s 660ms8:30.66 2023-07-312 years ago HSC Grant Staten 8m 32s 560ms8:32.56 2023-07-272 years ago HSC Grant Staten 8m 52s 970ms8:52.97 2023-04-262 years ago HSC Grant Staten 8m 55s 680ms8:55.68 2023-04-252 years ago HSC Grant Staten 9m 47s 420ms9:47.42 2023-04-252 years ago HSC Grant Staten 9m 50s 700ms9:50.70 2023-02-232 years ago HSC Grant Staten 10m 03s 550ms10:03.55 2023-02-182 years ago HSC Grant Staten 10m 33s 210ms10:33.21 2023-02-162 years ago HSC Grant Staten 10m 44s 230ms10:44.23 2023-01-302 years ago HSC Grant Staten 11m 13s 680ms11:13.68 2023-01-292 years ago HSC Grant Staten 11m 16s 710ms11:16.71 2023-01-172 years ago HSC Andrew Farkas (Hactar) 11m 22s 350ms11:22.35 2023-01-132 years ago HSC Andrew Farkas (Hactar) 11m 39s 600ms11:39.60 2023-01-132 years ago HSC Andrew Farkas (Hactar) 11m 42s 850ms11:42.85 2023-01-132 years ago HSC Andrew Farkas (Hactar) 12m 25s 220ms12:25.22 2023-01-132 years ago HSC Andrew Farkas (Hactar) 12m 28s 140ms12:28.14 2023-01-132 years ago HSC Grant Staten 12m 33s 750ms12:33.75 2023-01-122 years ago HSC Andrew Farkas (Hactar) 13m 13s 650ms13:13.65 2023-01-122 years ago HSC Grant Staten 13m 17s 780ms13:17.78 2023-01-082 years ago HSC Grant Staten 13m 21s 360ms13:21.36 2023-01-062 years ago HSC Grant Staten 14m 00s 760ms14:00.76 2023-01-052 years ago HSC Grant Staten 14m 10s 440ms14:10.44 2023-01-052 years ago HSC Andrew Farkas (Hactar) 14m 38s 910ms14:38.91 2023-01-052 years ago HSC Grant Staten 14m 39s 130ms14:39.13 2023-01-042 years ago HSC Grant Staten 15m 18s 840ms15:18.84 2023-01-042 years ago HSC Andrew Farkas (Hactar) 15m 28s 210ms15:28.21 2023-01-042 years ago HSC Grant Staten 15m 44s 920ms15:44.92 2023-01-032 years ago HSC Grant Staten 15m 59s 750ms15:59.75 2023-01-032 years ago HSC Andrew Farkas (Hactar) 17m 14s 760ms17:14.76 2023-01-032 years ago HSC Grant Staten 17m 21s 340ms17:21.34 2022-12-312 years ago HSC Grant Staten 18m 53s 840ms18:53.84 2022-12-292 years ago HSC Grant Staten 19m 17s 700ms19:17.70 2022-12-282 years ago HSC Grant Staten 19m 57s 080ms19:57.08 2022-12-242 years ago HSC Grant Staten 20m 18s 480ms20:18.48 2022-12-232 years ago HSC Grant Staten 21m 37s 070ms21:37.07 2022-12-202 years ago HSC Grant Staten 23m 50s 750ms23:50.75 2022-12-172 years ago HSC Luna Harran 29m 54s 820ms29:54.82 2022-12-042 years ago HSC Grant Staten 32m 46s 550ms32:46.55 2022-12-042 years ago HSC Luna Harran 44m 40s 420ms44:40.42 2022-11-232 years ago HSC Tetrian 1h 12m 07s 650ms1:12:07.65 2019-05-196 years ago MC4D Single Name Time Date Program Grant Staten 18m 56s 190ms18:56.19 2025-09-293 weeks ago HSC Grant Staten 19m 23s 690ms19:23.69 2025-09-264 weeks ago HSC Andrew Farkas (Hactar) 19m 35s 750ms19:35.75 2024-05-161 year ago HSC Grant Staten 19m 57s 610ms19:57.61 2023-07-272 years ago HSC Grant Staten 20m 17s 280ms20:17.28 2023-07-262 years ago HSC Grant Staten 20m 48s 930ms20:48.93 2023-07-222 years ago HSC Grant Staten 21m 40s 870ms21:40.87 2023-07-202 years ago HSC Grant Staten 21m 44s 120ms21:44.12 2023-06-022 years ago HSC Grant Staten 22m 11s 780ms22:11.78 2023-05-292 years ago HSC Grant Staten 23m 19s 100ms23:19.10 2023-05-272 years ago HSC Grant Staten 23m 42s 580ms23:42.58 2023-05-132 years ago HSC Grant Staten 25m 11s 080ms25:11.08 2023-05-062 years ago HSC Grant Staten 27m 08s 970ms27:08.97 2023-04-272 years ago HSC Grant Staten 28m 14s 310ms28:14.31 2023-03-172 years ago HSC Grant Staten 28m 58s 950ms28:58.95 2023-02-212 years ago HSC Grant Staten 29m 58s 510ms29:58.51 2023-02-012 years ago HSC Grant Staten 31m 06s 980ms31:06.98 2023-01-232 years ago HSC Grant Staten 33m 47s 210ms33:47.21 2023-01-202 years ago HSC Grant Staten 34m 33s 540ms34:33.54 2023-01-172 years ago HSC Grant Staten 39m 03s 510ms39:03.51 2023-01-122 years ago HSC Grant Staten 41m 59s 320ms41:59.32 2023-01-052 years ago HSC Grant Staten 49m 52s 500ms49:52.50 2023-01-042 years ago HSC Andrew Farkas (Hactar) 55m 13s 040ms55:13.04 2023-01-042 years ago HSC Grant Staten 57m 43s 650ms57:43.65 2022-12-302 years ago HSC Luna Harran 1h 31m 38s 500ms1:31:38.50 2022-12-072 years ago HSC Single Name Time Date Program Nenri 39m 54s 870ms39:54.87 2025-10-033 weeks ago HSC Nenri 43m 59s 350ms43:59.35 2025-10-033 weeks ago HSC Nenri 44m 11s 930ms44:11.93 2025-05-185 months ago HSC Nenri 44m 39s 250ms44:39.25 2025-05-095 months ago HSC Nenri 47m 46s 860ms47:46.86 2025-04-116 months ago HSC Nenri 52m 41s 230ms52:41.23 2025-03-137 months ago HSC Logan Maciejewski (The Cube Dude) 54m 31s 370ms54:31.37 2025-03-047 months ago HSC Grant Staten 56m 03s 940ms56:03.94 2023-06-022 years ago HSC Grant Staten 1h 00m 31s 150ms1:00:31.15 2023-05-292 years ago HSC Grant Staten 1h 03m 23s 500ms1:03:23.50 2023-05-232 years ago HSC Grant Staten 1h 04m 57s 880ms1:04:57.88 2023-05-152 years ago HSC Grant Staten 1h 12m 22s 580ms1:12:22.58 2023-05-102 years ago HSC Grant Staten 1h 19m 30s 890ms1:19:30.89 2023-05-092 years ago HSC Grant Staten 1h 23m 25s 520ms1:23:25.52 2023-03-032 years ago HSC Grant Staten 1h 29m 29s 900ms1:29:29.90 2023-02-022 years ago HSC Grant Staten 1h 38m 45s 280ms1:38:45.28 2023-01-182 years ago HSC Grant Staten 2h 16m 26s 540ms2:16:26.54 2023-01-122 years ago HSC Luna Harran 3h 15m 46s 110ms3:15:46.11 2022-12-312 years ago HSC Single Name Time Date Program Nenri 1h 25m 25s 730ms1:25:25.73 2025-05-314 months ago HSC Nenri 1h 45m 16s 100ms1:45:16.10 2025-03-217 months ago HSC Grant Staten 1h 58m 21s 230ms1:58:21.23 2023-07-182 years ago HSC Grant Staten 2h 11m 41s 970ms2:11:41.97 2023-05-312 years ago HSC Grant Staten 3h 27m 17s 510ms3:27:17.51 2023-01-222 years ago HSC Andrew Farkas (Hactar) 4h 39m 59s 940ms4:39:59.94 2023-01-212 years ago HSC 1x3x3x32x2x2x32x2x3x3 Single Name Time Date Program Nenri 54s 920ms54.92 2025-08-291 month ago MPU Tymon Fro 57s 460ms57.46 2023-11-111 year ago MPU Andrew Farkas (Hactar) 1m 00s 930ms1:00.93 2023-05-312 years ago MPU Luna Harran 1m 02s 910ms1:02.91 2023-05-312 years ago MPU Luna Harran 1m 24s 340ms1:24.34 2023-05-312 years ago MPU Grant Staten 1m 27s 390ms1:27.39 2023-03-202 years ago MPU Single Name Time Date Program Nenri 1m 59s 550ms1:59.55 2025-04-275 months ago MPU Rowan Fortier 2m 58s 900ms2:58.90 2024-06-201 year ago MPU Rowan Fortier 3m 19s 700ms3:19.70 2024-06-201 year ago MPU Tymon Fro 4m 22s 580ms4:22.58 2024-06-111 year ago MPU Emanuele Battistin 5m 52s 720ms5:52.72 2024-05-261 year ago MPU Single Name Time Date Program Logan Maciejewski (The Cube Dude) 10m 37s 070ms10:37.07 2025-02-128 months ago MPU Emanuele Battistin 22m 12s 690ms22:12.69 2024-06-121 year ago MPU Physical 2x2x2x2Physical 3x3x3x3Virtual Physical 3x3x3x3 SingleAo5One-HandedBlindfolded Name Time Date Logan Maciejewski (The Cube Dude) 31s 580ms31.58 2024-12-2410 months ago Logan Maciejewski (The Cube Dude) 49s 570ms49.57 2024-12-2210 months ago Logan Maciejewski (The Cube Dude) 53s 030ms53.03 2024-09-221 year ago Grant Staten 54s 840ms54.84 2022-11-082 years ago Grant Staten 56s 650ms56.65 2022-10-033 years ago Grant Staten 1m 06s 040ms1:06.04 2022-09-183 years ago Grant Staten 1m 07s 570ms1:07.57 2022-08-123 years ago Grant Staten 1m 23s 280ms1:23.28 2022-08-073 years ago Rowan Fortier 1m 27s 170ms1:27.17 2022-08-023 years ago Rowan Fortier 1m 28s 140ms1:28.14 2022-06-203 years ago Rowan Fortier 1m 46s 240ms1:46.24 2022-05-073 years ago Rowan Fortier 1m 56s 750ms1:56.75 2021-12-113 years ago Rowan Fortier 2m 00s 660ms2:00.66 2021-12-113 years ago Rowan Fortier 2m 03s 580ms2:03.58 2021-12-093 years ago Rowan Fortier 2m 05s 270ms2:05.27 2021-12-063 years ago Rowan Fortier 2m 16s 540ms2:16.54 2021-11-153 years ago Connor Lindsay 2m 26s 000ms2:26.00 2019-08-116 years ago Name Time Date Logan Maciejewski (The Cube Dude) 59s 890ms59.89 2024-12-279 months ago Logan Maciejewski (The Cube Dude) 1m 06s 250ms1:06.25 2024-09-081 year ago Name Time Date Logan Maciejewski (The Cube Dude) 2m 02s 120ms2:02.12 2025-08-182 months ago Grant Staten 2m 24s 140ms2:24.14 2025-08-142 months ago Grant Staten 2m 48s 690ms2:48.69 2025-08-142 months ago Tymon Fro 2m 56s 980ms2:56.98 2023-10-082 years ago Grant Staten 3m 55s 620ms3:55.62 2022-10-013 years ago Rowan Fortier 6m 25s 120ms6:25.12 2022-07-013 years ago Name Time Date Logan Maciejewski (The Cube Dude) 28m 39s 930ms28:39.93 2025-08-152 months ago Asa Kaplan 47m 14s 000ms47:14.00 2022-08-083 years ago Single Name Time Date Logan Maciejewski (The Cube Dude) 56m 22s 110ms56:22.11 2024-07-281 year ago Single Name Time Date Program Logan Maciejewski (The Cube Dude) 9m 42s 490ms9:42.49 2025-02-168 months ago AKKEI-SIM Grant Staten 9m 58s 950ms9:58.95 2023-05-032 years ago AKKEI-SIM Grant Staten 10m 30s 070ms10:30.07 2023-04-202 years ago AKKEI-SIM Grant Staten 10m 54s 210ms10:54.21 2023-04-202 years ago AKKEI-SIM Grant Staten 10m 58s 780ms10:58.78 2023-04-182 years ago AKKEI-SIM Grant Staten 11m 30s 660ms11:30.66 2023-04-122 years ago AKKEI-SIM Grant Staten 12m 05s 250ms12:05.25 2023-04-092 years ago AKKEI-SIM Grant Staten 14m 33s 060ms14:33.06 2023-04-042 years ago AKKEI-SIM Grant Staten 17m 11s 750ms17:11.75 2023-03-292 years ago AKKEI-SIM 3-Layer Simplex11-cell Single Name Time Date Program Nenri 45s 630ms45.63 2025-03-267 months ago MC4D Grant Staten 1m 17s 700ms1:17.70 2023-03-152 years ago MC4D Rowan Fortier 1m 30s 460ms1:30.46 2023-01-262 years ago MC4D Tetrian 1m 43s 440ms1:43.44 2021-07-244 years ago MC4D Single Name Time Date Program y=sin(x) 59m 01s 990ms59:01.99 2025-08-142 months ago NM11C 5D6D 3x3x3x3x32x2x2x2x24x4x4x4x4 Single Name Time Date Program Nenri 27m 36s 510ms27:36.51 2025-09-191 month ago MC7D-KB  Logan Maciejewski (The Cube Dude) 31m 23s 740ms31:23.74 2025-09-161 month ago MC7D-KB  Logan Maciejewski (The Cube Dude) 32m 37s 640ms32:37.64 2025-09-081 month ago MC7D-KB  Logan Maciejewski (The Cube Dude) 55m 29s 210ms55:29.21 2025-09-021 month ago MC7D-KB  Jessica Chen 58m 21s 230ms58:21.23 2025-07-113 months ago MC7D+MKB Jessica Chen 1h 02m 55s 670ms1:02:55.67 2025-07-093 months ago MC7D+MKB Logan Maciejewski (The Cube Dude) 1h 07m 05s 830ms1:07:05.83 2025-05-045 months ago MC7D+MKB Logan Maciejewski (The Cube Dude) 1h 28m 56s 090ms1:28:56.09 2025-03-137 months ago MC7D+MKB Rowan Fortier 1h 37m 42s 500ms1:37:42.50 2025-02-277 months ago MC7D Vin 1h 49m 47s 500ms1:49:47.50 2025-02-158 months ago MC7D Rowan Fortier 1h 52m 29s 730ms1:52:29.73 2024-07-011 year ago MC7D Rowan Fortier 2h 14m 16s 580ms2:14:16.58 2024-06-291 year ago MC7D Rowan Fortier 2h 30m 30s 480ms2:30:30.48 2024-06-261 year ago MC7D Luna Harran 2h 43m 59s 430ms2:43:59.43 2024-06-261 year ago MC7D Rowan Fortier 3h 01m 48s 630ms3:01:48.63 2024-06-251 year ago MC7D Luna Harran 3h 17m 59s 660ms3:17:59.66 2024-04-071 year ago MC7D Luna Harran 3h 39m 01s 240ms3:39:01.24 2024-03-221 year ago MC7D Single Name Time Date Program Logan Maciejewski (The Cube Dude) 4m 06s 770ms4:06.77 2025-09-111 month ago MC7D-KB  Logan Maciejewski (The Cube Dude) 4m 17s 070ms4:17.07 2025-09-111 month ago MC7D-KB  Logan Maciejewski (The Cube Dude) 4m 35s 110ms4:35.11 2025-09-091 month ago MC7D-KB  Logan Maciejewski (The Cube Dude) 4m 56s 930ms4:56.93 2025-09-071 month ago MC7D-KB  Logan Maciejewski (The Cube Dude) 5m 28s 300ms5:28.30 2025-09-071 month ago MC7D-KB  Logan Maciejewski (The Cube Dude) 5m 30s 450ms5:30.45 2025-09-071 month ago MC7D-KB  Logan Maciejewski (The Cube Dude) 5m 31s 920ms5:31.92 2025-09-071 month ago MC7D-KB  Bilal Mourad 5m 31s 960ms5:31.96 2025-09-121 month ago MC7D-KB  Bilal Mourad 6m 22s 830ms6:22.83 2025-09-111 month ago MC7D-KB  Rowan Fortier 7m 42s 720ms7:42.72 2025-09-081 month ago MC7D-KB  Rowan Fortier 14m 04s 780ms14:04.78 2025-09-051 month ago MC7D-KB  Logan Maciejewski (The Cube Dude) 14m 58s 940ms14:58.94 2025-09-041 month ago MC7D-KB  Tymon Fro 48m 22s 310ms48:22.31 2024-07-021 year ago MPU Tymon Fro 58m 41s 410ms58:41.41 2024-07-021 year ago MPU Tymon Fro 1h 13m 07s 260ms1:13:07.26 2024-04-011 year ago MPU Luna Harran 1h 48m 43s 500ms1:48:43.50 2024-03-231 year ago MPU Single Name Time Date Program Logan Maciejewski (The Cube Dude) 10h 48m 56s 700ms10:48:56.70 2025-04-256 months ago MC7D+MKB Luna Harran 15h 20m 24s 490ms15:20:24.49 2024-04-261 year ago MC7D 3x3x3x3x3x3 Single Name Time Date Program Logan Maciejewski (The Cube Dude) 10h 59m 21s 590ms10:59:21.59 2025-09-011 month ago MC7D+MKB Nenri 18h 09m 51s 860ms18:09:51.86 2025-05-065 months ago MC7D HemimegaminxCanon-Cut Klein QuarticCanon-Cut Dyck Map Single Name Time Date Program Milo Jacquet 1m 31s 670ms1:31.67 2024-03-311 year ago MT Milo Jacquet 1m 47s 690ms1:47.69 2024-03-061 year ago MT Grant Staten 1m 51s 940ms1:51.94 2023-03-192 years ago MT Luna Harran 2m 06s 520ms2:06.52 2023-03-182 years ago MT Luna Harran 2m 11s 570ms2:11.57 2023-03-182 years ago MT Grant Staten 2m 19s 990ms2:19.99 2023-03-182 years ago MT Luna Harran 2m 54s 050ms2:54.05 2023-03-182 years ago MT Luna Harran 4m 30s 570ms4:30.57 2023-03-182 years ago MT Single Name Time Date Program y=sin(x) 8m 51s 460ms8:51.46 2025-07-203 months ago MT y=sin(x) 9m 47s 400ms9:47.40 2025-06-034 months ago MT y=sin(x) 10m 46s 870ms10:46.87 2025-05-075 months ago MT Nenri 11m 14s 190ms11:14.19 2025-05-075 months ago MT y=sin(x) 11m 20s 930ms11:20.93 2025-05-065 months ago MT Nenri 11m 54s 120ms11:54.12 2025-05-035 months ago MT Nenri 13m 36s 150ms13:36.15 2025-04-126 months ago MT Ethan Davis 17m 28s 640ms17:28.64 2025-02-018 months ago MT Nenri 18m 47s 490ms18:47.49 2025-02-018 months ago MT Ethan Davis 22m 32s 810ms22:32.81 2024-09-231 year ago MT Milo Jacquet 24m 14s 410ms24:14.41 2024-04-041 year ago MT Single Name Time Date Program y=sin(x) 4m 55s 810ms4:55.81 2025-05-085 months ago MT 3x3x3 in 2D projection with 1D Vision Single Name Time Date Program Grant Staten 1m 34s 860ms1:34.86 2025-08-202 months ago MC3D Nenri 1m 46s 920ms1:46.92 2025-04-295 months ago MC3D Nenri 2m 45s 410ms2:45.41 2025-04-156 months ago MC3D Logan Maciejewski (The Cube Dude) 3m 18s 000ms3:18.00 2025-02-138 months ago MC3D Grant Staten 3m 22s 200ms3:22.20 2023-07-052 years ago MC3D Grant Staten 4m 20s 210ms4:20.21 2023-07-042 years ago MC3D Grant Staten 5m 10s 710ms5:10.71 2023-07-042 years ago MC3D Grant Staten 6m 24s 390ms6:24.39 2023-07-042 years ago MC3D Grant Staten 7m 34s 180ms7:34.18 2023-07-032 years ago MC3D Markk 15m 45s 390ms15:45.39 2022-12-022 years ago MC3D","boost":-3},{"location":"leaderboards/other-leaderboards/","title":"Other Leaderboards","text":"<p>Magic Cube 4D Hall of Fame - The original Hall of Fame. New submissions are no longer accepted due to reaching 500 solvers.</p> <p>Magic Cube 4D Extended Records - Records for many other puzzles found in MC4D.</p> <p>Magic Cube 5D Hall of Insanity - List of everyone who has solved 2<sup>5</sup>-7<sup>5</sup>, and also FMC solutions.</p> <p>Magic Cube 7D Solvers - List of 6D and 7D solvers in MC7D.</p> <p>Magic 120 Cell Solvers - List of 120 cell solvers in M120C or MPU.</p> <p>MagicTile Klein Bottle challenge - List of the first 100 people to solve the Klein Bottle Rubik\u2019s Cube from a competition video made by Mathologer.</p> <p>Speedsolving Wiki List of Unofficial World Records - List of a few speedsolving and FMC records.</p>"},{"location":"leaderboards/records/","title":"Current World Records          image/svg+xml","text":"View Options Time Format Date Format Event Name Time Date Program 3x3x3x3 Single Andrew Farkas (Hactar) 1m 33s 520ms1:33.52 2025-09-274 weeks ago HSC 3x3x3x3 Ao5 Josie Elliston 1m 40s 030ms1:40.03 2025-09-241 month ago HSC 3x3x3x3 Blindfolded Sebastian Yuste 1h 21m 17s 680ms1:21:17.68 2022-03-173 years ago MC4D 3x3x3x3 No Filters Nenri 3m 51s 950ms3:51.95 2025-10-052 weeks ago HSC 2x2x2x2 Single Bilal Mourad 14s 000ms14.00 2025-03-217 months ago HSC 2x2x2x2 Ao5 Bilal Mourad 18s 160ms18.16 2025-08-212 months ago HSC 2x2x2x2 Blindfolded Kevin Liu 10m 12s 770ms10:12.77 2024-10-121 year ago MC4D 4x4x4x4 Single Grant Staten 7m 17s 750ms7:17.75 2025-10-072 weeks ago HSC 5x5x5x5 Single Grant Staten 18m 56s 190ms18:56.19 2025-09-293 weeks ago HSC 6x6x6x6 Single Nenri 39m 54s 870ms39:54.87 2025-10-033 weeks ago HSC 7x7x7x7 Single Nenri 1h 25m 25s 730ms1:25:25.73 2025-05-314 months ago HSC 1x3x3x3 Single Nenri 54s 920ms54.92 2025-08-291 month ago MPU 2x2x2x3 Single Nenri 1m 59s 550ms1:59.55 2025-04-275 months ago MPU 2x2x3x3 Single Logan Maciejewski (The Cube Dude) 10m 37s 070ms10:37.07 2025-02-128 months ago MPU Physical 2x2x2x2 Single Logan Maciejewski (The Cube Dude) 31s 580ms31.58 2024-12-2410 months ago - Physical 2x2x2x2 Ao5 Logan Maciejewski (The Cube Dude) 59s 890ms59.89 2024-12-279 months ago - Physical 2x2x2x2 One-Handed Logan Maciejewski (The Cube Dude) 2m 02s 120ms2:02.12 2025-08-182 months ago - Physical 2x2x2x2 Blindfolded Logan Maciejewski (The Cube Dude) 28m 39s 930ms28:39.93 2025-08-152 months ago - Physical 3x3x3x3 Single Logan Maciejewski (The Cube Dude) 56m 22s 110ms56:22.11 2024-07-281 year ago - Virtual Physical 3x3x3x3 Single Logan Maciejewski (The Cube Dude) 9m 42s 490ms9:42.49 2025-02-168 months ago AKKEI-SIM 3-Layer Simplex Single Nenri 45s 630ms45.63 2025-03-267 months ago MC4D 11-cell Single y=sin(x) 59m 01s 990ms59:01.99 2025-08-142 months ago NM11C 3x3x3x3x3 Single Nenri 27m 36s 510ms27:36.51 2025-09-191 month ago MC7D-KB  2x2x2x2x2 Single Logan Maciejewski (The Cube Dude) 4m 06s 770ms4:06.77 2025-09-111 month ago MC7D-KB  4x4x4x4x4 Single Logan Maciejewski (The Cube Dude) 10h 48m 56s 700ms10:48:56.70 2025-04-256 months ago MC7D+MKB 3x3x3x3x3x3 Single Logan Maciejewski (The Cube Dude) 10h 59m 21s 590ms10:59:21.59 2025-09-011 month ago MC7D+MKB Hemimegaminx Single Milo Jacquet 1m 31s 670ms1:31.67 2024-03-311 year ago MT Canon-Cut Klein Quartic Single y=sin(x) 8m 51s 460ms8:51.46 2025-07-203 months ago MT Canon-Cut Dyck Map Single y=sin(x) 4m 55s 810ms4:55.81 2025-05-085 months ago MT 3x3x3 in 2D projection with 1D Vision Single Grant Staten 1m 34s 860ms1:34.86 2025-08-202 months ago MC3D","boost":-1},{"location":"leaderboards/solvers/adam/","title":"Adam Marcellus Kelly","text":"View Options Time Format Date Format","boost":1},{"location":"leaderboards/solvers/adam/#rankings","title":"Rankings","text":"Event Rank Time Date Program 3x3x3x3 Single 12 3m 28s 220ms3:28.22 2023-08-152 years ago HSC 3x3x3x3 Ao5 7 3m 58s 960ms3:58.96 2023-08-152 years ago HSC 2x2x2x2 Single image/svg+xml  3 23s 680ms23.68 2024-08-071 year ago HSC 2x2x2x2 Ao5 image/svg+xml  3 28s 080ms28.08 2024-08-281 year ago HSC","boost":1},{"location":"leaderboards/solvers/adam/#history","title":"History","text":"4D Hypercubes 3x3x3x32x2x2x2 SingleAo5 Rank Time Date Program 12 3m 28s 220ms3:28.22 2023-08-152 years ago HSC 3m 49s 300ms3:49.30 2023-01-122 years ago HSC 4m 34s 620ms4:34.62 2023-01-102 years ago HSC 5m 44s 860ms5:44.86 2023-01-092 years ago HSC 6m 58s 670ms6:58.67 2023-01-092 years ago HSC Rank Time Date Program 7 3m 58s 960ms3:58.96 2023-08-152 years ago HSC SingleAo5 Rank Time Date Program image/svg+xml  3 23s 680ms23.68 2024-08-071 year ago HSC 25s 790ms25.79 2024-06-291 year ago HSC 26s 370ms26.37 2024-06-291 year ago HSC 26s 490ms26.49 2023-09-232 years ago HSC 39s 400ms39.40 2023-01-162 years ago HSC 43s 540ms43.54 2023-01-162 years ago HSC Rank Time Date Program image/svg+xml  3 28s 080ms28.08 2024-08-281 year ago HSC 31s 310ms31.31 2024-07-161 year ago HSC 33s 040ms33.04 2024-07-011 year ago HSC","boost":1},{"location":"leaderboards/solvers/akkei/","title":"Akkei","text":"View Options Time Format Date Format","boost":1},{"location":"leaderboards/solvers/akkei/#rankings","title":"Rankings","text":"Event Rank Time Date Program Hemimegaminx Single 7 18m 47s 120ms18:47.12 2024-03-211 year ago -","boost":1},{"location":"leaderboards/solvers/akkei/#history","title":"History","text":"MagicTile Hemimegaminx Single Rank Time Date Program 7 18m 47s 120ms18:47.12 2024-03-211 year ago -","boost":1},{"location":"leaderboards/solvers/alvin/","title":"Alvin","text":"View Options Time Format Date Format","boost":1},{"location":"leaderboards/solvers/alvin/#rankings","title":"Rankings","text":"Event Rank Time Date Program 3x3x3x3 Single 36 12m 13s 260ms12:13.26 2022-11-242 years ago HSC","boost":1},{"location":"leaderboards/solvers/alvin/#history","title":"History","text":"4D Hypercubes 3x3x3x3 Single Rank Time Date Program 36 12m 13s 260ms12:13.26 2022-11-242 years ago HSC","boost":1},{"location":"leaderboards/solvers/asa/","title":"Asa Kaplan","text":"View Options Time Format Date Format","boost":1},{"location":"leaderboards/solvers/asa/#rankings","title":"Rankings","text":"Event Rank Time Date Program Physical 2x2x2x2 Blindfolded image/svg+xml  2 47m 14s 000ms47:14.00 2022-08-083 years ago -","boost":1},{"location":"leaderboards/solvers/asa/#history","title":"History","text":"4D Physical Physical 2x2x2x2 Blindfolded Rank Time Date image/svg+xml  2 47m 14s 000ms47:14.00 2022-08-083 years ago","boost":1},{"location":"leaderboards/solvers/battistin/","title":"Emanuele Battistin","text":"View Options Time Format Date Format","boost":1},{"location":"leaderboards/solvers/battistin/#rankings","title":"Rankings","text":"Event Rank Time Date Program 3x3x3x3 Single 20 5m 29s 780ms5:29.78 2024-04-061 year ago HSC 3x3x3x3 Ao5 9 7m 42s 360ms7:42.36 2024-03-241 year ago HSC 2x2x2x2 Single 15 1m 25s 170ms1:25.17 2024-06-011 year ago HSC 4x4x4x4 Single 13 59m 55s 810ms59:55.81 2023-11-101 year ago HSC 2x2x2x3 Single 5 5m 52s 720ms5:52.72 2024-05-261 year ago MPU 2x2x3x3 Single image/svg+xml  2 22m 12s 690ms22:12.69 2024-06-121 year ago MPU Hemimegaminx Single 6 5m 22s 970ms5:22.97 2024-03-261 year ago MT Canon-Cut Klein Quartic Single 7 1h 33m 54s 020ms1:33:54.02 2024-06-201 year ago MT","boost":1},{"location":"leaderboards/solvers/battistin/#history","title":"History","text":"4DMagicTile HypercubesHypercuboids 3x3x3x32x2x2x24x4x4x4 SingleAo5 Rank Time Date Program 20 5m 29s 780ms5:29.78 2024-04-061 year ago HSC 5m 50s 990ms5:50.99 2024-03-291 year ago HSC 6m 19s 690ms6:19.69 2023-11-061 year ago HSC 7m 24s 840ms7:24.84 2023-11-051 year ago HSC 7m 54s 790ms7:54.79 2023-11-041 year ago HSC 8m 18s 630ms8:18.63 2023-11-021 year ago HSC 8m 38s 990ms8:38.99 2023-10-311 year ago HSC 9m 54s 040ms9:54.04 2023-10-291 year ago HSC Rank Time Date Program 9 7m 42s 360ms7:42.36 2024-03-241 year ago HSC Single Rank Time Date Program 15 1m 25s 170ms1:25.17 2024-06-011 year ago HSC Single Rank Time Date Program 13 59m 55s 810ms59:55.81 2023-11-101 year ago HSC 2x2x2x32x2x3x3 Single Rank Time Date Program 5 5m 52s 720ms5:52.72 2024-05-261 year ago MPU Single Rank Time Date Program image/svg+xml  2 22m 12s 690ms22:12.69 2024-06-121 year ago MPU HemimegaminxCanon-Cut Klein Quartic Single Rank Time Date Program 6 5m 22s 970ms5:22.97 2024-03-261 year ago MT Single Rank Time Date Program 7 1h 33m 54s 020ms1:33:54.02 2024-06-201 year ago MT","boost":1},{"location":"leaderboards/solvers/bilal/","title":"Bilal Mourad","text":"View Options Time Format Date Format","boost":1},{"location":"leaderboards/solvers/bilal/#rankings","title":"Rankings","text":"Event Rank Time Date Program 3x3x3x3 Single 9 2m 42s 680ms2:42.68 2025-03-267 months ago HSC 3x3x3x3 Ao5 6 3m 00s 380ms3:00.38 2025-03-267 months ago HSC 2x2x2x2 Single image/svg+xml  1 14s 000ms14.00 2025-03-217 months ago HSC 2x2x2x2 Ao5 image/svg+xml  1 18s 160ms18.16 2025-08-212 months ago HSC 4x4x4x4 Single 7 14m 12s 670ms14:12.67 2025-05-185 months ago HSC 2x2x2x2x2 Single image/svg+xml  2 5m 31s 960ms5:31.96 2025-09-121 month ago MC7D-KB","boost":1},{"location":"leaderboards/solvers/bilal/#history","title":"History","text":"4D5D+ Hypercubes 3x3x3x32x2x2x24x4x4x4 SingleAo5 Rank Time Date Program 9 2m 42s 680ms2:42.68 2025-03-267 months ago HSC 2m 51s 520ms2:51.52 2025-03-267 months ago HSC 2m 53s 950ms2:53.95 2025-03-267 months ago HSC 2m 58s 370ms2:58.37 2025-03-257 months ago HSC 2m 58s 860ms2:58.86 2025-03-257 months ago HSC 2m 59s 860ms2:59.86 2025-02-257 months ago HSC 3m 05s 360ms3:05.36 2025-02-138 months ago HSC 3m 13s 530ms3:13.53 2025-02-138 months ago HSC 3m 19s 560ms3:19.56 2025-02-138 months ago HSC 3m 19s 880ms3:19.88 2025-02-138 months ago HSC 3m 32s 530ms3:32.53 2024-09-261 year ago HSC 3m 43s 430ms3:43.43 2024-09-191 year ago HSC 3m 54s 560ms3:54.56 2024-09-181 year ago HSC 4m 12s 150ms4:12.15 2024-09-171 year ago HSC 4m 14s 990ms4:14.99 2024-09-101 year ago HSC 4m 18s 790ms4:18.79 2024-08-231 year ago HSC 4m 57s 700ms4:57.70 2024-08-181 year ago HSC 5m 48s 740ms5:48.74 2024-07-161 year ago HSC 5m 49s 920ms5:49.92 2024-07-151 year ago HSC 6m 07s 350ms6:07.35 2024-07-151 year ago HSC 6m 14s 240ms6:14.24 2024-07-151 year ago HSC 7m 47s 190ms7:47.19 2024-07-131 year ago HSC 8m 11s 590ms8:11.59 2024-07-101 year ago HSC 8m 36s 530ms8:36.53 2024-06-261 year ago HSC 14m 04s 680ms14:04.68 2024-06-111 year ago HSC Rank Time Date Program 6 3m 00s 380ms3:00.38 2025-03-267 months ago HSC 3m 02s 450ms3:02.45 2025-03-267 months ago HSC 3m 09s 910ms3:09.91 2025-03-257 months ago HSC 3m 22s 880ms3:22.88 2025-02-138 months ago HSC 4m 36s 200ms4:36.20 2024-09-101 year ago HSC 4m 46s 600ms4:46.60 2024-08-231 year ago HSC 6m 39s 410ms6:39.41 2024-07-151 year ago HSC 8m 57s 530ms8:57.53 2024-07-101 year ago HSC 10m 50s 950ms10:50.95 2024-06-261 year ago HSC SingleAo5 Rank Time Date Program image/svg+xml  1 14s 000ms14.00 2025-03-217 months ago HSC 14s 770ms14.77 2025-02-247 months ago HSC 15s 130ms15.13 2025-02-218 months ago HSC 15s 430ms15.43 2025-02-058 months ago HSC 16s 060ms16.06 2025-01-318 months ago HSC 16s 310ms16.31 2024-12-1310 months ago HSC 18s 210ms18.21 2024-12-1310 months ago HSC 18s 790ms18.79 2024-12-0310 months ago HSC 19s 670ms19.67 2024-11-1911 months ago HSC 20s 100ms20.10 2024-10-191 year ago HSC 21s 430ms21.43 2024-09-191 year ago HSC 22s 120ms22.12 2024-09-181 year ago HSC 22s 150ms22.15 2024-09-111 year ago HSC 22s 370ms22.37 2024-09-051 year ago HSC 23s 600ms23.60 2024-08-281 year ago HSC 24s 230ms24.23 2024-08-111 year ago HSC 26s 030ms26.03 2024-08-061 year ago HSC 26s 640ms26.64 2024-08-041 year ago HSC 27s 430ms27.43 2024-07-281 year ago HSC 27s 610ms27.61 2024-07-221 year ago HSC 28s 770ms28.77 2024-07-121 year ago HSC 31s 450ms31.45 2024-07-081 year ago HSC 32s 670ms32.67 2024-06-251 year ago HSC 34s 330ms34.33 2024-06-211 year ago HSC 37s 650ms37.65 2024-06-201 year ago HSC 39s 510ms39.51 2024-06-181 year ago HSC 40s 170ms40.17 2024-06-101 year ago HSC 43s 500ms43.50 2024-06-071 year ago HSC 47s 870ms47.87 2024-06-041 year ago HSC 59s 630ms59.63 2024-06-031 year ago HSC 1m 00s 780ms1:00.78 2024-06-021 year ago HSC 1m 09s 220ms1:09.22 2024-06-021 year ago HSC 1m 14s 810ms1:14.81 2024-05-311 year ago HSC 2m 15s 060ms2:15.06 2024-05-311 year ago HSC Rank Time Date Program image/svg+xml  1 18s 160ms18.16 2025-08-212 months ago HSC 18s 170ms18.17 2025-05-115 months ago HSC 18s 810ms18.81 2025-04-116 months ago HSC 19s 090ms19.09 2025-04-106 months ago HSC 19s 320ms19.32 2025-03-157 months ago HSC 19s 500ms19.50 2025-02-128 months ago HSC 20s 170ms20.17 2025-02-118 months ago HSC 20s 180ms20.18 2025-01-318 months ago HSC 20s 490ms20.49 2025-01-249 months ago HSC 20s 630ms20.63 2025-01-059 months ago HSC 21s 840ms21.84 2025-01-049 months ago HSC 22s 390ms22.39 2024-12-269 months ago HSC 22s 730ms22.73 2024-12-2110 months ago HSC 23s 410ms23.41 2024-12-2110 months ago HSC 23s 450ms23.45 2024-12-1710 months ago HSC 23s 530ms23.53 2024-12-1610 months ago HSC 23s 710ms23.71 2024-12-1110 months ago HSC 24s 430ms24.43 2024-12-0910 months ago HSC 24s 810ms24.81 2024-11-1511 months ago HSC 25s 860ms25.86 2024-09-171 year ago HSC 28s 420ms28.42 2024-09-171 year ago HSC 28s 480ms28.48 2024-09-071 year ago HSC 28s 760ms28.76 2024-09-061 year ago HSC 29s 280ms29.28 2024-09-061 year ago HSC 29s 310ms29.31 2024-08-291 year ago HSC 29s 670ms29.67 2024-08-031 year ago HSC 32s 270ms32.27 2024-08-011 year ago HSC 33s 040ms33.04 2024-08-011 year ago HSC 33s 330ms33.33 2024-07-281 year ago HSC 33s 640ms33.64 2024-07-221 year ago HSC 34s 270ms34.27 2024-07-161 year ago HSC 34s 810ms34.81 2024-07-161 year ago HSC 35s 770ms35.77 2024-07-151 year ago HSC 38s 460ms38.46 2024-07-141 year ago HSC 38s 780ms38.78 2024-07-101 year ago HSC 39s 820ms39.82 2024-06-251 year ago HSC 41s 890ms41.89 2024-06-221 year ago HSC 44s 640ms44.64 2024-06-211 year ago HSC 46s 210ms46.21 2024-06-181 year ago HSC 48s 120ms48.12 2024-06-141 year ago HSC 48s 510ms48.51 2024-06-141 year ago HSC 48s 920ms48.92 2024-06-111 year ago HSC 50s 720ms50.72 2024-06-081 year ago HSC 55s 590ms55.59 2024-06-071 year ago HSC 59s 290ms59.29 2024-06-051 year ago HSC 1m 01s 930ms1:01.93 2024-06-051 year ago HSC 1m 05s 370ms1:05.37 2024-06-041 year ago HSC 1m 09s 430ms1:09.43 2024-06-041 year ago HSC 1m 10s 990ms1:10.99 2024-06-031 year ago HSC 1m 13s 310ms1:13.31 2024-06-031 year ago HSC 1m 14s 340ms1:14.34 2024-06-031 year ago HSC 1m 15s 690ms1:15.69 2024-06-021 year ago HSC 1m 19s 540ms1:19.54 2024-06-021 year ago HSC 1m 26s 900ms1:26.90 2024-05-311 year ago HSC Single Rank Time Date Program 7 14m 12s 670ms14:12.67 2025-05-185 months ago HSC 14m 41s 680ms14:41.68 2025-05-155 months ago HSC 16m 02s 950ms16:02.95 2025-05-155 months ago HSC 1h 41m 52s 480ms1:41:52.48 2024-07-151 year ago HSC 5D 2x2x2x2x2 Single Rank Time Date Program image/svg+xml  2 5m 31s 960ms5:31.96 2025-09-121 month ago MC7D-KB  6m 22s 830ms6:22.83 2025-09-111 month ago MC7D-KB  9m 50s 060ms9:50.06 2025-09-091 month ago MC7D-KB  14m 59s 470ms14:59.47 2025-09-051 month ago MC7D-KB  26m 33s 620ms26:33.62 2025-09-051 month ago MC7D-KB","boost":1},{"location":"leaderboards/solvers/bruh/","title":"bruuhbrruh","text":"View Options Time Format Date Format","boost":1},{"location":"leaderboards/solvers/bruh/#rankings","title":"Rankings","text":"Event Rank Time Date Program 3x3x3x3 Single 18 4m 57s 420ms4:57.42 2025-05-265 months ago HSC","boost":1},{"location":"leaderboards/solvers/bruh/#history","title":"History","text":"4D Hypercubes 3x3x3x3 Single Rank Time Date Program 18 4m 57s 420ms4:57.42 2025-05-265 months ago HSC 7m 03s 570ms7:03.57 2025-04-295 months ago HSC 9m 01s 620ms9:01.62 2025-04-265 months ago HSC","boost":1},{"location":"leaderboards/solvers/cali/","title":"Cali Kerschen","text":"View Options Time Format Date Format","boost":1},{"location":"leaderboards/solvers/cali/#rankings","title":"Rankings","text":"Event Rank Time Date Program 3x3x3x3 Single 24 6m 36s 220ms6:36.22 2025-07-143 months ago HSC","boost":1},{"location":"leaderboards/solvers/cali/#history","title":"History","text":"4D Hypercubes 3x3x3x3 Single Rank Time Date Program 24 6m 36s 220ms6:36.22 2025-07-143 months ago HSC 8m 15s 310ms8:15.31 2025-05-105 months ago HSC 9m 52s 170ms9:52.17 2025-05-085 months ago HSC 12m 28s 540ms12:28.54 2025-01-249 months ago HSC","boost":1},{"location":"leaderboards/solvers/connor/","title":"Connor Lindsay","text":"View Options Time Format Date Format","boost":1},{"location":"leaderboards/solvers/connor/#rankings","title":"Rankings","text":"Event Rank Time Date Program Physical 2x2x2x2 Single 9 2m 26s 000ms2:26.00 2019-08-116 years ago -","boost":1},{"location":"leaderboards/solvers/connor/#history","title":"History","text":"4D Physical Physical 2x2x2x2 Single Rank Time Date 9 2m 26s 000ms2:26.00 2019-08-116 years ago","boost":1},{"location":"leaderboards/solvers/cubedude/","title":"Logan Maciejewski (The Cube Dude)","text":"View Options Time Format Date Format","boost":1},{"location":"leaderboards/solvers/cubedude/#rankings","title":"Rankings","text":"Event Rank Time Date Program 2x2x2x2 Single 9 42s 390ms42.39 2025-09-191 month ago HSC 4x4x4x4 Single 6 12m 46s 860ms12:46.86 2025-04-295 months ago HSC 5x5x5x5 Single 4 27m 51s 240ms27:51.24 2025-04-295 months ago HSC 6x6x6x6 Single image/svg+xml  3 54m 31s 370ms54:31.37 2025-03-047 months ago HSC 7x7x7x7 Single image/svg+xml  3 3h 00m 53s 860ms3:00:53.86 2025-01-239 months ago HSC 2x2x3x3 Single image/svg+xml  1 10m 37s 070ms10:37.07 2025-02-128 months ago MPU Physical 2x2x2x2 Single image/svg+xml  1 31s 580ms31.58 2024-12-2410 months ago - Physical 2x2x2x2 Ao5 image/svg+xml  1 59s 890ms59.89 2024-12-279 months ago - Physical 2x2x2x2 One-Handed image/svg+xml  1 2m 02s 120ms2:02.12 2025-08-182 months ago - Physical 2x2x2x2 Blindfolded image/svg+xml  1 28m 39s 930ms28:39.93 2025-08-152 months ago - Physical 3x3x3x3 Single image/svg+xml  1 56m 22s 110ms56:22.11 2024-07-281 year ago - Virtual Physical 3x3x3x3 Single image/svg+xml  1 9m 42s 490ms9:42.49 2025-02-168 months ago AKKEI-SIM 3x3x3x3x3 Single image/svg+xml  2 31m 23s 740ms31:23.74 2025-09-161 month ago MC7D-KB  2x2x2x2x2 Single image/svg+xml  1 4m 06s 770ms4:06.77 2025-09-111 month ago MC7D-KB  4x4x4x4x4 Single image/svg+xml  1 10h 48m 56s 700ms10:48:56.70 2025-04-256 months ago MC7D+MKB 3x3x3x3x3x3 Single image/svg+xml  1 10h 59m 21s 590ms10:59:21.59 2025-09-011 month ago MC7D+MKB Hemimegaminx Single 5 3m 23s 540ms3:23.54 2025-04-295 months ago MT 3x3x3 in 2D projection with 1D Vision Single image/svg+xml  3 3m 18s 000ms3:18.00 2025-02-138 months ago MC3D","boost":1},{"location":"leaderboards/solvers/cubedude/#history","title":"History","text":"4D5D+MagicTileMisc HypercubesHypercuboidsPhysical 2x2x2x24x4x4x45x5x5x56x6x6x67x7x7x7 Single Rank Time Date Program 9 42s 390ms42.39 2025-09-191 month ago HSC 54s 120ms54.12 2025-04-295 months ago HSC Single Rank Time Date Program 6 12m 46s 860ms12:46.86 2025-04-295 months ago HSC Single Rank Time Date Program 4 27m 51s 240ms27:51.24 2025-04-295 months ago HSC Single Rank Time Date Program image/svg+xml  3 54m 31s 370ms54:31.37 2025-03-047 months ago HSC Single Rank Time Date Program image/svg+xml  3 3h 00m 53s 860ms3:00:53.86 2025-01-239 months ago HSC 2x2x3x3 Single Rank Time Date Program image/svg+xml  1 10m 37s 070ms10:37.07 2025-02-128 months ago MPU Physical 2x2x2x2Physical 3x3x3x3Virtual Physical 3x3x3x3 SingleAo5One-HandedBlindfolded Rank Time Date image/svg+xml  1 31s 580ms31.58 2024-12-2410 months ago 49s 570ms49.57 2024-12-2210 months ago 53s 030ms53.03 2024-09-221 year ago 56s 540ms56.54 2024-09-141 year ago 58s 140ms58.14 2024-04-181 year ago 1m 11s 990ms1:11.99 2024-04-171 year ago 1m 42s 400ms1:42.40 2023-03-302 years ago Rank Time Date image/svg+xml  1 59s 890ms59.89 2024-12-279 months ago 1m 06s 250ms1:06.25 2024-09-081 year ago Rank Time Date image/svg+xml  1 2m 02s 120ms2:02.12 2025-08-182 months ago Rank Time Date image/svg+xml  1 28m 39s 930ms28:39.93 2025-08-152 months ago Single Rank Time Date image/svg+xml  1 56m 22s 110ms56:22.11 2024-07-281 year ago Single Rank Time Date Program image/svg+xml  1 9m 42s 490ms9:42.49 2025-02-168 months ago AKKEI-SIM 5D6D 3x3x3x3x32x2x2x2x24x4x4x4x4 Single Rank Time Date Program image/svg+xml  2 31m 23s 740ms31:23.74 2025-09-161 month ago MC7D-KB  32m 37s 640ms32:37.64 2025-09-081 month ago MC7D-KB  55m 29s 210ms55:29.21 2025-09-021 month ago MC7D-KB  1h 07m 05s 830ms1:07:05.83 2025-05-045 months ago MC7D+MKB 1h 28m 56s 090ms1:28:56.09 2025-03-137 months ago MC7D+MKB Single Rank Time Date Program image/svg+xml  1 4m 06s 770ms4:06.77 2025-09-111 month ago MC7D-KB  4m 17s 070ms4:17.07 2025-09-111 month ago MC7D-KB  4m 35s 110ms4:35.11 2025-09-091 month ago MC7D-KB  4m 56s 930ms4:56.93 2025-09-071 month ago MC7D-KB  5m 28s 300ms5:28.30 2025-09-071 month ago MC7D-KB  5m 30s 450ms5:30.45 2025-09-071 month ago MC7D-KB  5m 31s 920ms5:31.92 2025-09-071 month ago MC7D-KB  5m 33s 770ms5:33.77 2025-09-061 month ago MC7D-KB  5m 54s 080ms5:54.08 2025-09-061 month ago MC7D-KB  7m 28s 080ms7:28.08 2025-09-061 month ago MC7D-KB  7m 38s 640ms7:38.64 2025-09-051 month ago MC7D-KB  10m 02s 970ms10:02.97 2025-09-051 month ago MC7D-KB  14m 58s 940ms14:58.94 2025-09-041 month ago MC7D-KB  Single Rank Time Date Program image/svg+xml  1 10h 48m 56s 700ms10:48:56.70 2025-04-256 months ago MC7D+MKB 3x3x3x3x3x3 Single Rank Time Date Program image/svg+xml  1 10h 59m 21s 590ms10:59:21.59 2025-09-011 month ago MC7D+MKB Hemimegaminx Single Rank Time Date Program 5 3m 23s 540ms3:23.54 2025-04-295 months ago MT 3x3x3 in 2D projection with 1D Vision Single Rank Time Date Program image/svg+xml  3 3m 18s 000ms3:18.00 2025-02-138 months ago MC3D","boost":1},{"location":"leaderboards/solvers/danielcohen/","title":"Daniel Cohen","text":"View Options Time Format Date Format","boost":1},{"location":"leaderboards/solvers/danielcohen/#rankings","title":"Rankings","text":"Event Rank Time Date Program Physical 2x2x2x2 Single 5 1m 31s 460ms1:31.46 2024-01-211 year ago -","boost":1},{"location":"leaderboards/solvers/danielcohen/#history","title":"History","text":"4D Physical Physical 2x2x2x2 Single Rank Time Date 5 1m 31s 460ms1:31.46 2024-01-211 year ago","boost":1},{"location":"leaderboards/solvers/edan/","title":"Edan Maor","text":"View Options Time Format Date Format","boost":1},{"location":"leaderboards/solvers/edan/#rankings","title":"Rankings","text":"Event Rank Time Date Program 3x3x3x3 Single 6 2m 10s 350ms2:10.35 2025-06-224 months ago HSC","boost":1},{"location":"leaderboards/solvers/edan/#history","title":"History","text":"4D Hypercubes 3x3x3x3 Single Rank Time Date Program 6 2m 10s 350ms2:10.35 2025-06-224 months ago HSC 2m 39s 840ms2:39.84 2024-08-111 year ago HSC 2m 51s 950ms2:51.95 2024-07-261 year ago HSC 2m 58s 390ms2:58.39 2024-07-261 year ago HSC 3m 22s 800ms3:22.80 2024-02-131 year ago HSC 3m 53s 230ms3:53.23 2023-10-122 years ago HSC 4m 54s 390ms4:54.39 2023-09-202 years ago HSC","boost":1},{"location":"leaderboards/solvers/emca/","title":"Emma-Marie Cadet","text":"View Options Time Format Date Format","boost":1},{"location":"leaderboards/solvers/emca/#rankings","title":"Rankings","text":"Event Rank Time Date Program 3x3x3x3 Single 14 4m 21s 990ms4:21.99 2025-09-283 weeks ago HSC","boost":1},{"location":"leaderboards/solvers/emca/#history","title":"History","text":"4D Hypercubes 3x3x3x3 Single Rank Time Date Program 14 4m 21s 990ms4:21.99 2025-09-283 weeks ago HSC 6m 08s 100ms6:08.10 2025-09-171 month ago HSC 7m 20s 420ms7:20.42 2025-09-111 month ago HSC","boost":1},{"location":"leaderboards/solvers/ethandavis/","title":"Ethan Davis","text":"View Options Time Format Date Format","boost":1},{"location":"leaderboards/solvers/ethandavis/#rankings","title":"Rankings","text":"Event Rank Time Date Program 3x3x3x3 Single 38 14m 39s 680ms14:39.68 2024-01-271 year ago HSC Canon-Cut Klein Quartic Single image/svg+xml  3 17m 28s 640ms17:28.64 2025-02-018 months ago MT","boost":1},{"location":"leaderboards/solvers/ethandavis/#history","title":"History","text":"4DMagicTile Hypercubes 3x3x3x3 Single Rank Time Date Program 38 14m 39s 680ms14:39.68 2024-01-271 year ago HSC Canon-Cut Klein Quartic Single Rank Time Date Program image/svg+xml  3 17m 28s 640ms17:28.64 2025-02-018 months ago MT 22m 32s 810ms22:32.81 2024-09-231 year ago MT","boost":1},{"location":"leaderboards/solvers/godly/","title":"Godly","text":"View Options Time Format Date Format","boost":1},{"location":"leaderboards/solvers/godly/#rankings","title":"Rankings","text":"Event Rank Time Date Program 3x3x3x3 Single 17 4m 45s 500ms4:45.50 2024-06-151 year ago HSC","boost":1},{"location":"leaderboards/solvers/godly/#history","title":"History","text":"4D Hypercubes 3x3x3x3 Single Rank Time Date Program 17 4m 45s 500ms4:45.50 2024-06-151 year ago HSC 5m 17s 120ms5:17.12 2024-06-091 year ago HSC 5m 59s 190ms5:59.19 2024-06-081 year ago HSC 7m 28s 630ms7:28.63 2024-06-061 year ago HSC 7m 56s 420ms7:56.42 2024-06-041 year ago HSC 9m 55s 380ms9:55.38 2024-05-221 year ago HSC 12m 28s 340ms12:28.34 2024-05-181 year ago HSC","boost":1},{"location":"leaderboards/solvers/grant/","title":"Grant Staten","text":"View Options Time Format Date Format","boost":1},{"location":"leaderboards/solvers/grant/#rankings","title":"Rankings","text":"Event Rank Time Date Program 3x3x3x3 Single 4 2m 03s 830ms2:03.83 2023-04-212 years ago HSC 3x3x3x3 Ao5 4 2m 19s 270ms2:19.27 2025-09-303 weeks ago HSC 3x3x3x3 No Filters image/svg+xml  3 5m 16s 010ms5:16.01 2023-07-032 years ago HSC 2x2x2x2 Single 6 28s 510ms28.51 2023-05-242 years ago HSC 4x4x4x4 Single image/svg+xml  1 7m 17s 750ms7:17.75 2025-10-072 weeks ago HSC 5x5x5x5 Single image/svg+xml  1 18m 56s 190ms18:56.19 2025-09-293 weeks ago HSC 6x6x6x6 Single image/svg+xml  2 49m 10s 600ms49:10.60 2025-09-303 weeks ago HSC 7x7x7x7 Single image/svg+xml  2 1h 58m 21s 230ms1:58:21.23 2023-07-182 years ago HSC 1x3x3x3 Single 5 1m 06s 260ms1:06.26 2025-10-043 weeks ago MPU 2x2x2x3 Single image/svg+xml  2 2m 55s 810ms2:55.81 2025-09-241 month ago MPU Physical 2x2x2x2 Single image/svg+xml  2 54s 840ms54.84 2022-11-082 years ago - Physical 2x2x2x2 One-Handed image/svg+xml  2 2m 24s 140ms2:24.14 2025-08-142 months ago - Virtual Physical 3x3x3x3 Single image/svg+xml  2 9m 58s 950ms9:58.95 2023-05-032 years ago AKKEI-SIM 3-Layer Simplex Single image/svg+xml  2 1m 17s 700ms1:17.70 2023-03-152 years ago MC4D 2x2x2x2x2 Single 4 8m 00s 860ms8:00.86 2025-10-072 weeks ago MC7D-KB  Hemimegaminx Single image/svg+xml  3 1m 51s 940ms1:51.94 2023-03-192 years ago MT Canon-Cut Klein Quartic Single 4 19m 27s 070ms19:27.07 2025-09-2530 days ago MT Canon-Cut Dyck Map Single image/svg+xml  2 8m 06s 260ms8:06.26 2025-10-043 weeks ago MT 3x3x3 in 2D projection with 1D Vision Single image/svg+xml  1 1m 34s 860ms1:34.86 2025-08-202 months ago MC3D","boost":1},{"location":"leaderboards/solvers/grant/#history","title":"History","text":"4D5D+MagicTileMisc HypercubesHypercuboidsPhysicalOther 3x3x3x32x2x2x24x4x4x45x5x5x56x6x6x67x7x7x7 SingleAo5No Filters Rank Time Date Program 4 2m 03s 830ms2:03.83 2023-04-212 years ago HSC 2m 11s 330ms2:11.33 2023-03-162 years ago HSC 2m 21s 010ms2:21.01 2023-03-082 years ago HSC 2m 30s 680ms2:30.68 2023-02-252 years ago HSC 2m 37s 880ms2:37.88 2023-02-252 years ago HSC 2m 41s 260ms2:41.26 2023-02-242 years ago HSC 2m 59s 340ms2:59.34 2022-12-232 years ago HSC 3m 06s 060ms3:06.06 2022-12-212 years ago HSC 3m 13s 970ms3:13.97 2022-12-212 years ago HSC 3m 16s 440ms3:16.44 2022-12-202 years ago HSC 3m 21s 520ms3:21.52 2022-12-152 years ago HSC 3m 23s 260ms3:23.26 2022-12-142 years ago HSC 3m 34s 430ms3:34.43 2022-12-142 years ago HSC 3m 45s 690ms3:45.69 2022-12-132 years ago HSC 3m 55s 320ms3:55.32 2022-12-102 years ago HSC 3m 58s 290ms3:58.29 2022-12-072 years ago HSC 4m 02s 600ms4:02.60 2022-12-032 years ago HSC 4m 09s 190ms4:09.19 2022-12-032 years ago HSC 4m 10s 840ms4:10.84 2022-12-022 years ago HSC 4m 43s 860ms4:43.86 2022-11-302 years ago HSC 4m 52s 940ms4:52.94 2022-11-272 years ago HSC 5m 01s 920ms5:01.92 2022-11-262 years ago HSC 5m 23s 820ms5:23.82 2022-11-252 years ago HSC 5m 25s 140ms5:25.14 2022-11-252 years ago HSC 6m 36s 380ms6:36.38 2022-11-232 years ago HSC 6m 46s 210ms6:46.21 2022-11-222 years ago HSC 7m 36s 320ms7:36.32 2022-11-212 years ago HSC Rank Time Date Program 4 2m 19s 270ms2:19.27 2025-09-303 weeks ago HSC 2m 28s 050ms2:28.05 2023-04-102 years ago HSC 2m 35s 940ms2:35.94 2023-03-102 years ago HSC 3m 01s 410ms3:01.41 2023-02-242 years ago HSC 3m 52s 000ms3:52.00 2022-12-162 years ago HSC Rank Time Date Program image/svg+xml  3 5m 16s 010ms5:16.01 2023-07-032 years ago HSC 5m 33s 390ms5:33.39 2023-07-032 years ago HSC Single Rank Time Date Program 6 28s 510ms28.51 2023-05-242 years ago HSC 31s 640ms31.64 2023-05-232 years ago HSC 33s 340ms33.34 2023-05-202 years ago HSC 34s 170ms34.17 2023-05-202 years ago HSC 34s 590ms34.59 2023-05-162 years ago HSC 34s 950ms34.95 2023-05-112 years ago HSC 36s 230ms36.23 2023-03-082 years ago HSC 44s 750ms44.75 2023-01-022 years ago HSC 48s 520ms48.52 2023-01-012 years ago HSC 49s 980ms49.98 2023-01-012 years ago HSC 50s 950ms50.95 2022-12-212 years ago HSC Single Rank Time Date Program image/svg+xml  1 7m 17s 750ms7:17.75 2025-10-072 weeks ago HSC 7m 30s 780ms7:30.78 2025-10-023 weeks ago HSC 7m 39s 950ms7:39.95 2025-10-013 weeks ago HSC 7m 40s 510ms7:40.51 2025-09-283 weeks ago HSC 7m 50s 730ms7:50.73 2025-09-231 month ago HSC 7m 54s 040ms7:54.04 2025-09-211 month ago HSC 7m 55s 770ms7:55.77 2023-08-012 years ago HSC 8m 30s 660ms8:30.66 2023-07-312 years ago HSC 8m 32s 560ms8:32.56 2023-07-272 years ago HSC 8m 52s 970ms8:52.97 2023-04-262 years ago HSC 8m 55s 680ms8:55.68 2023-04-252 years ago HSC 9m 47s 420ms9:47.42 2023-04-252 years ago HSC 9m 50s 700ms9:50.70 2023-02-232 years ago HSC 10m 03s 550ms10:03.55 2023-02-182 years ago HSC 10m 33s 210ms10:33.21 2023-02-162 years ago HSC 10m 44s 230ms10:44.23 2023-01-302 years ago HSC 11m 13s 680ms11:13.68 2023-01-292 years ago HSC 11m 16s 710ms11:16.71 2023-01-172 years ago HSC 11m 44s 560ms11:44.56 2023-01-142 years ago HSC 11m 54s 530ms11:54.53 2023-01-142 years ago HSC 12m 33s 750ms12:33.75 2023-01-122 years ago HSC 13m 17s 780ms13:17.78 2023-01-082 years ago HSC 13m 21s 360ms13:21.36 2023-01-062 years ago HSC 14m 00s 760ms14:00.76 2023-01-052 years ago HSC 14m 10s 440ms14:10.44 2023-01-052 years ago HSC 14m 39s 130ms14:39.13 2023-01-052 years ago HSC 14m 39s 130ms14:39.13 2023-01-042 years ago HSC 15m 18s 840ms15:18.84 2023-01-042 years ago HSC 15m 44s 920ms15:44.92 2023-01-032 years ago HSC 15m 59s 750ms15:59.75 2023-01-032 years ago HSC 17m 21s 340ms17:21.34 2022-12-312 years ago HSC 18m 53s 840ms18:53.84 2022-12-292 years ago HSC 19m 17s 700ms19:17.70 2022-12-282 years ago HSC 19m 57s 080ms19:57.08 2022-12-242 years ago HSC 20m 18s 480ms20:18.48 2022-12-232 years ago HSC 20m 18s 480ms20:18.48 2022-12-232 years ago HSC 21m 37s 070ms21:37.07 2022-12-202 years ago HSC 23m 50s 750ms23:50.75 2022-12-172 years ago HSC 32m 46s 550ms32:46.55 2022-12-042 years ago HSC Single Rank Time Date Program image/svg+xml  1 18m 56s 190ms18:56.19 2025-09-293 weeks ago HSC 19m 23s 690ms19:23.69 2025-09-264 weeks ago HSC 19m 57s 610ms19:57.61 2023-07-272 years ago HSC 20m 17s 280ms20:17.28 2023-07-262 years ago HSC 20m 48s 930ms20:48.93 2023-07-222 years ago HSC 21m 40s 870ms21:40.87 2023-07-202 years ago HSC 21m 44s 120ms21:44.12 2023-06-022 years ago HSC 22m 11s 780ms22:11.78 2023-05-292 years ago HSC 23m 19s 100ms23:19.10 2023-05-272 years ago HSC 23m 42s 580ms23:42.58 2023-05-132 years ago HSC 25m 11s 080ms25:11.08 2023-05-062 years ago HSC 27m 08s 970ms27:08.97 2023-04-272 years ago HSC 28m 14s 310ms28:14.31 2023-03-172 years ago HSC 28m 58s 950ms28:58.95 2023-02-212 years ago HSC 29m 58s 510ms29:58.51 2023-02-012 years ago HSC 31m 06s 980ms31:06.98 2023-01-232 years ago HSC 33m 47s 210ms33:47.21 2023-01-202 years ago HSC 34m 33s 540ms34:33.54 2023-01-172 years ago HSC 39m 03s 510ms39:03.51 2023-01-122 years ago HSC 41m 59s 320ms41:59.32 2023-01-052 years ago HSC 49m 52s 500ms49:52.50 2023-01-042 years ago HSC 57m 43s 650ms57:43.65 2022-12-302 years ago HSC Single Rank Time Date Program image/svg+xml  2 49m 10s 600ms49:10.60 2025-09-303 weeks ago HSC 56m 03s 940ms56:03.94 2023-06-022 years ago HSC 1h 00m 31s 150ms1:00:31.15 2023-05-292 years ago HSC 1h 03m 23s 500ms1:03:23.50 2023-05-232 years ago HSC 1h 04m 57s 880ms1:04:57.88 2023-05-152 years ago HSC 1h 12m 22s 580ms1:12:22.58 2023-05-102 years ago HSC 1h 19m 30s 890ms1:19:30.89 2023-05-092 years ago HSC 1h 23m 25s 520ms1:23:25.52 2023-03-032 years ago HSC 1h 29m 29s 900ms1:29:29.90 2023-02-022 years ago HSC 1h 38m 45s 280ms1:38:45.28 2023-01-182 years ago HSC 2h 16m 26s 540ms2:16:26.54 2023-01-122 years ago HSC Single Rank Time Date Program image/svg+xml  2 1h 58m 21s 230ms1:58:21.23 2023-07-182 years ago HSC 2h 11m 41s 970ms2:11:41.97 2023-05-312 years ago HSC 3h 27m 17s 510ms3:27:17.51 2023-01-222 years ago HSC 1x3x3x32x2x2x3 Single Rank Time Date Program 5 1m 06s 260ms1:06.26 2025-10-043 weeks ago MPU 1m 27s 390ms1:27.39 2023-03-202 years ago MPU Single Rank Time Date Program image/svg+xml  2 2m 55s 810ms2:55.81 2025-09-241 month ago MPU 2m 59s 490ms2:59.49 2025-09-241 month ago MPU 3m 43s 650ms3:43.65 2025-09-241 month ago MPU Physical 2x2x2x2Virtual Physical 3x3x3x3 SingleOne-Handed Rank Time Date image/svg+xml  2 54s 840ms54.84 2022-11-082 years ago 56s 650ms56.65 2022-10-033 years ago 1m 06s 040ms1:06.04 2022-09-183 years ago 1m 07s 570ms1:07.57 2022-08-123 years ago 1m 23s 280ms1:23.28 2022-08-073 years ago Rank Time Date image/svg+xml  2 2m 24s 140ms2:24.14 2025-08-142 months ago 2m 48s 690ms2:48.69 2025-08-142 months ago 3m 55s 620ms3:55.62 2022-10-013 years ago Single Rank Time Date Program image/svg+xml  2 9m 58s 950ms9:58.95 2023-05-032 years ago AKKEI-SIM 10m 30s 070ms10:30.07 2023-04-202 years ago AKKEI-SIM 10m 54s 210ms10:54.21 2023-04-202 years ago AKKEI-SIM 10m 58s 780ms10:58.78 2023-04-182 years ago AKKEI-SIM 11m 30s 660ms11:30.66 2023-04-122 years ago AKKEI-SIM 12m 05s 250ms12:05.25 2023-04-092 years ago AKKEI-SIM 14m 33s 060ms14:33.06 2023-04-042 years ago AKKEI-SIM 17m 11s 750ms17:11.75 2023-03-292 years ago AKKEI-SIM 3-Layer Simplex Single Rank Time Date Program image/svg+xml  2 1m 17s 700ms1:17.70 2023-03-152 years ago MC4D 1m 31s 110ms1:31.11 2023-03-152 years ago MC4D 1m 34s 160ms1:34.16 2023-03-152 years ago MC4D 1m 43s 190ms1:43.19 2023-03-152 years ago MC4D 1m 48s 760ms1:48.76 2023-03-142 years ago MC4D 2m 16s 370ms2:16.37 2023-03-142 years ago MC4D 2m 36s 420ms2:36.42 2023-03-102 years ago MC4D 3m 29s 740ms3:29.74 2023-03-092 years ago MC4D 6m 11s 010ms6:11.01 2023-01-242 years ago MC4D 8m 15s 420ms8:15.42 2023-01-192 years ago MC4D 5D 2x2x2x2x2 Single Rank Time Date Program 4 8m 00s 860ms8:00.86 2025-10-072 weeks ago MC7D-KB  12m 38s 820ms12:38.82 2025-10-043 weeks ago MC7D-KB  HemimegaminxCanon-Cut Klein QuarticCanon-Cut Dyck Map Single Rank Time Date Program image/svg+xml  3 1m 51s 940ms1:51.94 2023-03-192 years ago MT 2m 19s 990ms2:19.99 2023-03-182 years ago MT 3m 35s 860ms3:35.86 2023-03-182 years ago MT Single Rank Time Date Program 4 19m 27s 070ms19:27.07 2025-09-2530 days ago MT 21m 12s 560ms21:12.56 2025-09-241 month ago MT Single Rank Time Date Program image/svg+xml  2 8m 06s 260ms8:06.26 2025-10-043 weeks ago MT 3x3x3 in 2D projection with 1D Vision Single Rank Time Date Program image/svg+xml  1 1m 34s 860ms1:34.86 2025-08-202 months ago MC3D 2m 10s 510ms2:10.51 2025-08-202 months ago MC3D 2m 27s 660ms2:27.66 2025-08-192 months ago MC3D 2m 54s 990ms2:54.99 2025-08-192 months ago MC3D 3m 06s 760ms3:06.76 2025-08-192 months ago MC3D 3m 22s 200ms3:22.20 2023-07-052 years ago MC3D 4m 20s 210ms4:20.21 2023-07-042 years ago MC3D 5m 10s 710ms5:10.71 2023-07-042 years ago MC3D 6m 24s 390ms6:24.39 2023-07-042 years ago MC3D 7m 34s 180ms7:34.18 2023-07-032 years ago MC3D","boost":1},{"location":"leaderboards/solvers/gray/","title":"TheGrayCuber","text":"View Options Time Format Date Format","boost":1},{"location":"leaderboards/solvers/gray/#rankings","title":"Rankings","text":"Event Rank Time Date Program 2x2x2x2 Blindfolded image/svg+xml  2 14m 41s 550ms14:41.55 2019-10-126 years ago MC4D","boost":1},{"location":"leaderboards/solvers/gray/#history","title":"History","text":"4D Hypercubes 2x2x2x2 Blindfolded Rank Time Date Program image/svg+xml  2 14m 41s 550ms14:41.55 2019-10-126 years ago MC4D","boost":1},{"location":"leaderboards/solvers/gstout/","title":"Gabe Stout","text":"View Options Time Format Date Format","boost":1},{"location":"leaderboards/solvers/gstout/#rankings","title":"Rankings","text":"Event Rank Time Date Program 3x3x3x3 Single 31 9m 06s 200ms9:06.20 2024-12-309 months ago HSC","boost":1},{"location":"leaderboards/solvers/gstout/#history","title":"History","text":"4D Hypercubes 3x3x3x3 Single Rank Time Date Program 31 9m 06s 200ms9:06.20 2024-12-309 months ago HSC","boost":1},{"location":"leaderboards/solvers/hactar/","title":"Andrew Farkas (Hactar)","text":"View Options Time Format Date Format","boost":1},{"location":"leaderboards/solvers/hactar/#rankings","title":"Rankings","text":"Event Rank Time Date Program 3x3x3x3 Single image/svg+xml  1 1m 33s 520ms1:33.52 2025-09-274 weeks ago HSC 3x3x3x3 Ao5 image/svg+xml  2 1m 42s 700ms1:42.70 2025-08-152 months ago HSC 2x2x2x2 Single 7 29s 970ms29.97 2024-06-271 year ago HSC 2x2x2x2 Ao5 4 33s 940ms33.94 2024-06-271 year ago HSC 4x4x4x4 Single image/svg+xml  2 7m 52s 610ms7:52.61 2024-04-241 year ago HSC 5x5x5x5 Single image/svg+xml  2 19m 35s 750ms19:35.75 2024-05-161 year ago HSC 6x6x6x6 Single 5 2h 51m 54s 000ms2:51:54.00 2023-08-302 years ago HSC 7x7x7x7 Single 4 4h 39m 59s 940ms4:39:59.94 2023-01-212 years ago HSC 1x3x3x3 Single image/svg+xml  3 1m 00s 930ms1:00.93 2023-05-312 years ago MPU","boost":1},{"location":"leaderboards/solvers/hactar/#history","title":"History","text":"4D HypercubesHypercuboids 3x3x3x32x2x2x24x4x4x45x5x5x56x6x6x67x7x7x7 SingleAo5 Rank Time Date Program image/svg+xml  1 1m 33s 520ms1:33.52 2025-09-274 weeks ago HSC 1m 34s 030ms1:34.03 2025-08-152 months ago HSC 1m 37s 480ms1:37.48 2025-06-263 months ago HSC 1m 42s 330ms1:42.33 2025-06-204 months ago HSC 1m 43s 250ms1:43.25 2025-06-044 months ago HSC 1m 44s 170ms1:44.17 2025-06-044 months ago HSC 1m 44s 540ms1:44.54 2025-05-265 months ago HSC 1m 48s 180ms1:48.18 2025-04-295 months ago HSC 1m 52s 330ms1:52.33 2025-02-118 months ago HSC 1m 56s 420ms1:56.42 2023-05-132 years ago HSC 2m 05s 300ms2:05.30 2023-04-222 years ago HSC 2m 07s 300ms2:07.30 2023-04-082 years ago HSC 2m 17s 970ms2:17.97 2023-03-112 years ago HSC 2m 26s 460ms2:26.46 2023-02-182 years ago HSC 2m 29s 730ms2:29.73 2023-01-112 years ago HSC 2m 39s 470ms2:39.47 2023-01-082 years ago HSC 2m 41s 220ms2:41.22 2023-01-032 years ago HSC 2m 42s 810ms2:42.81 2022-12-302 years ago HSC 2m 59s 970ms2:59.97 2022-12-222 years ago HSC 4m 30s 880ms4:30.88 2022-12-012 years ago HSC 4m 50s 730ms4:50.73 2022-11-292 years ago HSC 4m 58s 140ms4:58.14 2022-11-262 years ago HSC 5m 32s 980ms5:32.98 2022-11-232 years ago HSC 6m 38s 920ms6:38.92 2022-11-222 years ago HSC 7m 02s 170ms7:02.17 2022-11-212 years ago HSC 7m 43s 330ms7:43.33 2022-11-192 years ago HSC 8m 02s 530ms8:02.53 2022-11-192 years ago HSC 8m 15s 350ms8:15.35 2022-11-192 years ago HSC 8m 23s 590ms8:23.59 2022-11-182 years ago HSC 9m 05s 820ms9:05.82 2022-11-062 years ago HSC Rank Time Date Program image/svg+xml  2 1m 42s 700ms1:42.70 2025-08-152 months ago HSC 1m 45s 610ms1:45.61 2025-06-263 months ago HSC 1m 50s 760ms1:50.76 2025-06-204 months ago HSC 1m 53s 410ms1:53.41 2025-06-044 months ago HSC 1m 57s 020ms1:57.02 2025-05-055 months ago HSC 2m 00s 540ms2:00.54 2025-02-118 months ago HSC 2m 03s 180ms2:03.18 2024-05-231 year ago HSC 2m 16s 800ms2:16.80 2024-04-151 year ago HSC 2m 18s 180ms2:18.18 2023-05-122 years ago HSC 2m 20s 190ms2:20.19 2023-04-222 years ago HSC 2m 26s 160ms2:26.16 2023-04-222 years ago HSC 2m 33s 100ms2:33.10 2023-04-082 years ago HSC 2m 35s 290ms2:35.29 2023-04-082 years ago HSC 2m 39s 640ms2:39.64 2023-02-182 years ago HSC 3m 02s 780ms3:02.78 2022-12-312 years ago HSC SingleAo5 Rank Time Date Program 7 29s 970ms29.97 2024-06-271 year ago HSC 33s 480ms33.48 2024-06-251 year ago HSC 34s 840ms34.84 2024-06-141 year ago HSC 40s 830ms40.83 2024-06-021 year ago HSC Rank Time Date Program 4 33s 940ms33.94 2024-06-271 year ago HSC 40s 170ms40.17 2024-06-251 year ago HSC 43s 440ms43.44 2024-06-141 year ago HSC 50s 850ms50.85 2024-06-021 year ago HSC Single Rank Time Date Program image/svg+xml  2 7m 52s 610ms7:52.61 2024-04-241 year ago HSC 7m 55s 180ms7:55.18 2024-04-221 year ago HSC 8m 12s 820ms8:12.82 2024-04-061 year ago HSC 8m 45s 210ms8:45.21 2024-03-201 year ago HSC 9m 44s 500ms9:44.50 2024-03-171 year ago HSC 10m 05s 470ms10:05.47 2024-03-151 year ago HSC 11m 12s 840ms11:12.84 2024-03-111 year ago HSC 11m 22s 350ms11:22.35 2023-01-132 years ago HSC 11m 39s 600ms11:39.60 2023-01-132 years ago HSC 11m 42s 850ms11:42.85 2023-01-132 years ago HSC 12m 25s 220ms12:25.22 2023-01-132 years ago HSC 12m 28s 140ms12:28.14 2023-01-132 years ago HSC 13m 13s 650ms13:13.65 2023-01-122 years ago HSC 13m 34s 550ms13:34.55 2023-01-122 years ago HSC 13m 58s 650ms13:58.65 2023-01-082 years ago HSC 14m 38s 910ms14:38.91 2023-01-052 years ago HSC 15m 28s 210ms15:28.21 2023-01-042 years ago HSC 16m 47s 070ms16:47.07 2023-01-042 years ago HSC 17m 14s 760ms17:14.76 2023-01-032 years ago HSC 23m 26s 720ms23:26.72 2023-01-012 years ago HSC Single Rank Time Date Program image/svg+xml  2 19m 35s 750ms19:35.75 2024-05-161 year ago HSC 21m 26s 870ms21:26.87 2024-05-131 year ago HSC 21m 39s 790ms21:39.79 2024-05-091 year ago HSC 22m 12s 140ms22:12.14 2024-05-081 year ago HSC 22m 43s 490ms22:43.49 2024-05-051 year ago HSC 26m 11s 510ms26:11.51 2024-04-291 year ago HSC 29m 07s 380ms29:07.38 2024-04-261 year ago HSC 40m 04s 760ms40:04.76 2023-01-182 years ago HSC 43m 15s 780ms43:15.78 2023-01-132 years ago HSC 44m 25s 040ms44:25.04 2023-01-122 years ago HSC 55m 13s 040ms55:13.04 2023-01-042 years ago HSC 1h 04m 03s 180ms1:04:03.18 2023-01-032 years ago HSC Single Rank Time Date Program 5 2h 51m 54s 000ms2:51:54.00 2023-08-302 years ago HSC Single Rank Time Date Program 4 4h 39m 59s 940ms4:39:59.94 2023-01-212 years ago HSC 1x3x3x3 Single Rank Time Date Program image/svg+xml  3 1m 00s 930ms1:00.93 2023-05-312 years ago MPU","boost":1},{"location":"leaderboards/solvers/hana/","title":"Hana (Curun1r)","text":"View Options Time Format Date Format","boost":1},{"location":"leaderboards/solvers/hana/#rankings","title":"Rankings","text":"Event Rank Time Date Program 3x3x3x3 Single 5 2m 07s 600ms2:07.60 2025-08-142 months ago HSC 3x3x3x3 Ao5 8 6m 03s 630ms6:03.63 2024-07-201 year ago HSC 2x2x2x2 Single 5 27s 070ms27.07 2024-11-0211 months ago HSC 4x4x4x4 Single 5 11m 45s 500ms11:45.50 2025-02-038 months ago HSC","boost":1},{"location":"leaderboards/solvers/hana/#history","title":"History","text":"4D Hypercubes 3x3x3x32x2x2x24x4x4x4 SingleAo5 Rank Time Date Program 5 2m 07s 600ms2:07.60 2025-08-142 months ago HSC 2m 08s 080ms2:08.08 2025-02-108 months ago HSC 2m 22s 710ms2:22.71 2025-01-149 months ago HSC 2m 29s 640ms2:29.64 2024-12-289 months ago HSC 2m 30s 030ms2:30.03 2024-12-1210 months ago HSC 2m 37s 720ms2:37.72 2024-11-2510 months ago HSC 2m 38s 340ms2:38.34 2024-10-091 year ago HSC 2m 46s 740ms2:46.74 2024-08-311 year ago HSC 2m 57s 880ms2:57.88 2024-08-211 year ago HSC 3m 13s 940ms3:13.94 2024-08-191 year ago HSC 3m 21s 530ms3:21.53 2024-08-171 year ago HSC 3m 27s 860ms3:27.86 2024-08-081 year ago HSC 3m 27s 880ms3:27.88 2024-08-071 year ago HSC 3m 44s 340ms3:44.34 2024-07-311 year ago HSC 4m 14s 040ms4:14.04 2024-07-241 year ago HSC 4m 19s 040ms4:19.04 2024-07-211 year ago HSC 5m 20s 850ms5:20.85 2024-07-201 year ago HSC 5m 46s 340ms5:46.34 2024-07-191 year ago HSC 5m 58s 660ms5:58.66 2024-07-161 year ago HSC 6m 28s 750ms6:28.75 2024-07-161 year ago HSC 6m 33s 530ms6:33.53 2024-07-161 year ago HSC 6m 49s 210ms6:49.21 2024-07-161 year ago HSC 7m 19s 880ms7:19.88 2024-07-161 year ago HSC 8m 04s 510ms8:04.51 2024-07-161 year ago HSC 8m 28s 710ms8:28.71 2024-07-151 year ago HSC 10m 53s 610ms10:53.61 2024-07-141 year ago HSC 28m 17s 860ms28:17.86 2024-07-121 year ago HSC Rank Time Date Program 8 6m 03s 630ms6:03.63 2024-07-201 year ago HSC Single Rank Time Date Program 5 27s 070ms27.07 2024-11-0211 months ago HSC 39s 380ms39.38 2024-10-041 year ago HSC 45s 620ms45.62 2024-08-161 year ago HSC 51s 790ms51.79 2024-08-111 year ago HSC Single Rank Time Date Program 5 11m 45s 500ms11:45.50 2025-02-038 months ago HSC 14m 35s 100ms14:35.10 2024-11-0511 months ago HSC","boost":1},{"location":"leaderboards/solvers/hyperespy/","title":"Hyperespy","text":"View Options Time Format Date Format","boost":1},{"location":"leaderboards/solvers/hyperespy/#rankings","title":"Rankings","text":"Event Rank Time Date Program Physical 2x2x2x2 Single 7 2m 11s 470ms2:11.47 2022-11-152 years ago - Virtual Physical 3x3x3x3 Single image/svg+xml  3 44m 41s 490ms44:41.49 2023-04-122 years ago AKKEI-SIM 2x2x2x2x2 Single 6 1h 24m 58s 440ms1:24:58.44 2024-06-101 year ago MC5D","boost":1},{"location":"leaderboards/solvers/hyperespy/#history","title":"History","text":"4D5D+ Physical Physical 2x2x2x2Virtual Physical 3x3x3x3 Single Rank Time Date 7 2m 11s 470ms2:11.47 2022-11-152 years ago Single Rank Time Date Program image/svg+xml  3 44m 41s 490ms44:41.49 2023-04-122 years ago AKKEI-SIM 47m 43s 810ms47:43.81 2023-04-042 years ago AKKEI-SIM 5D 2x2x2x2x2 Single Rank Time Date Program 6 1h 24m 58s 440ms1:24:58.44 2024-06-101 year ago MC5D","boost":1},{"location":"leaderboards/solvers/jackcai/","title":"Jack Cai","text":"View Options Time Format Date Format","boost":1},{"location":"leaderboards/solvers/jackcai/#rankings","title":"Rankings","text":"Event Rank Time Date Program 2x2x2x2 Blindfolded image/svg+xml  3 26m 15s 430ms26:15.43 2024-05-201 year ago HSC","boost":1},{"location":"leaderboards/solvers/jackcai/#history","title":"History","text":"4D Hypercubes 2x2x2x2 Blindfolded Rank Time Date Program image/svg+xml  3 26m 15s 430ms26:15.43 2024-05-201 year ago HSC","boost":1},{"location":"leaderboards/solvers/jessica/","title":"Jessica Chen","text":"View Options Time Format Date Format","boost":1},{"location":"leaderboards/solvers/jessica/#rankings","title":"Rankings","text":"Event Rank Time Date Program 3x3x3x3 Single 21 5m 40s 340ms5:40.34 2025-07-043 months ago HSC 3x3x3x3x3 Single image/svg+xml  3 58m 21s 230ms58:21.23 2025-07-113 months ago MC7D+MKB","boost":1},{"location":"leaderboards/solvers/jessica/#history","title":"History","text":"4D5D+ Hypercubes 3x3x3x3 Single Rank Time Date Program 21 5m 40s 340ms5:40.34 2025-07-043 months ago HSC 8m 17s 120ms8:17.12 2025-01-268 months ago HSC 12m 09s 880ms12:09.88 2025-01-229 months ago HSC 5D 3x3x3x3x3 Single Rank Time Date Program image/svg+xml  3 58m 21s 230ms58:21.23 2025-07-113 months ago MC7D+MKB 1h 02m 55s 670ms1:02:55.67 2025-07-093 months ago MC7D+MKB","boost":1},{"location":"leaderboards/solvers/josie/","title":"Josie Elliston","text":"View Options Time Format Date Format","boost":1},{"location":"leaderboards/solvers/josie/#rankings","title":"Rankings","text":"Event Rank Time Date Program 3x3x3x3 Single image/svg+xml  2 1m 34s 590ms1:34.59 2025-08-122 months ago HSC 3x3x3x3 Ao5 image/svg+xml  1 1m 40s 030ms1:40.03 2025-09-241 month ago HSC 2x2x2x2 Single 8 32s 220ms32.22 2025-08-222 months ago HSC","boost":1},{"location":"leaderboards/solvers/josie/#history","title":"History","text":"4D Hypercubes 3x3x3x32x2x2x2 SingleAo5 Rank Time Date Program image/svg+xml  2 1m 34s 590ms1:34.59 2025-08-122 months ago HSC 1m 36s 910ms1:36.91 2025-08-092 months ago HSC 1m 39s 170ms1:39.17 2025-07-133 months ago HSC 1m 41s 250ms1:41.25 2025-06-224 months ago HSC 1m 41s 290ms1:41.29 2025-06-194 months ago HSC 1m 44s 930ms1:44.93 2025-06-184 months ago HSC 1m 47s 220ms1:47.22 2025-06-034 months ago HSC 1m 47s 920ms1:47.92 2025-06-014 months ago HSC 1m 49s 620ms1:49.62 2025-05-055 months ago HSC 1m 50s 400ms1:50.40 2025-04-295 months ago HSC 1m 54s 050ms1:54.05 2025-04-285 months ago HSC 1m 55s 960ms1:55.96 2025-04-285 months ago HSC 1m 59s 180ms1:59.18 2025-04-275 months ago HSC 1m 59s 600ms1:59.60 2025-02-208 months ago HSC 2m 02s 980ms2:02.98 2025-02-208 months ago HSC 2m 09s 480ms2:09.48 2025-02-128 months ago HSC 2m 17s 400ms2:17.40 2025-02-088 months ago HSC 2m 20s 830ms2:20.83 2025-02-088 months ago HSC 2m 26s 860ms2:26.86 2025-01-318 months ago HSC 2m 29s 950ms2:29.95 2025-01-268 months ago HSC 2m 32s 000ms2:32.00 2025-01-229 months ago HSC 2m 50s 960ms2:50.96 2025-01-229 months ago HSC 2m 52s 080ms2:52.08 2025-01-199 months ago HSC 2m 54s 180ms2:54.18 2025-01-039 months ago HSC 2m 55s 670ms2:55.67 2025-01-029 months ago HSC 3m 06s 880ms3:06.88 2025-01-029 months ago HSC 3m 06s 950ms3:06.95 2025-01-019 months ago HSC 3m 07s 210ms3:07.21 2024-12-319 months ago HSC 3m 14s 120ms3:14.12 2024-12-319 months ago HSC 3m 21s 950ms3:21.95 2024-12-0710 months ago HSC 3m 36s 120ms3:36.12 2024-12-0210 months ago HSC 3m 41s 680ms3:41.68 2024-11-1911 months ago HSC 4m 44s 950ms4:44.95 2024-10-2911 months ago HSC Rank Time Date Program image/svg+xml  1 1m 40s 030ms1:40.03 2025-09-241 month ago HSC 1m 44s 480ms1:44.48 2025-09-101 month ago HSC 1m 48s 280ms1:48.28 2025-06-224 months ago HSC 1m 54s 560ms1:54.56 2025-06-184 months ago HSC 1m 59s 900ms1:59.90 2025-05-045 months ago HSC 2m 12s 410ms2:12.41 2025-04-285 months ago HSC Single Rank Time Date Program 8 32s 220ms32.22 2025-08-222 months ago HSC 33s 090ms33.09 2025-08-192 months ago HSC 38s 330ms38.33 2025-08-192 months ago HSC","boost":1},{"location":"leaderboards/solvers/kevin/","title":"K3v1N","text":"View Options Time Format Date Format","boost":1},{"location":"leaderboards/solvers/kevin/#rankings","title":"Rankings","text":"Event Rank Time Date Program Virtual Physical 3x3x3x3 Single 4 55m 06s 000ms55:06.00 2023-05-052 years ago AKKEI-SIM","boost":1},{"location":"leaderboards/solvers/kevin/#history","title":"History","text":"4D Physical Virtual Physical 3x3x3x3 Single Rank Time Date Program 4 55m 06s 000ms55:06.00 2023-05-052 years ago AKKEI-SIM","boost":1},{"location":"leaderboards/solvers/kliu/","title":"Kevin Liu","text":"View Options Time Format Date Format","boost":1},{"location":"leaderboards/solvers/kliu/#rankings","title":"Rankings","text":"Event Rank Time Date Program 2x2x2x2 Blindfolded image/svg+xml  1 10m 12s 770ms10:12.77 2024-10-121 year ago MC4D","boost":1},{"location":"leaderboards/solvers/kliu/#history","title":"History","text":"4D Hypercubes 2x2x2x2 Blindfolded Rank Time Date Program image/svg+xml  1 10m 12s 770ms10:12.77 2024-10-121 year ago MC4D","boost":1},{"location":"leaderboards/solvers/koen/","title":"Koen R.","text":"View Options Time Format Date Format","boost":1},{"location":"leaderboards/solvers/koen/#rankings","title":"Rankings","text":"Event Rank Time Date Program 3x3x3x3 Single 22 5m 41s 960ms5:41.96 2024-05-021 year ago HSC","boost":1},{"location":"leaderboards/solvers/koen/#history","title":"History","text":"4D Hypercubes 3x3x3x3 Single Rank Time Date Program 22 5m 41s 960ms5:41.96 2024-05-021 year ago HSC 22m 25s 490ms22:25.49 2023-01-092 years ago HSC","boost":1},{"location":"leaderboards/solvers/lorenzo/","title":"Lorenzo1098","text":"View Options Time Format Date Format","boost":1},{"location":"leaderboards/solvers/lorenzo/#rankings","title":"Rankings","text":"Event Rank Time Date Program 3x3x3x3 Single 25 6m 42s 750ms6:42.75 2025-09-283 weeks ago HSC 4x4x4x4 Single 12 37m 47s 580ms37:47.58 2024-08-241 year ago HSC","boost":1},{"location":"leaderboards/solvers/lorenzo/#history","title":"History","text":"4D Hypercubes 3x3x3x34x4x4x4 Single Rank Time Date Program 25 6m 42s 750ms6:42.75 2025-09-283 weeks ago HSC 7m 30s 780ms7:30.78 2024-09-031 year ago HSC 9m 32s 900ms9:32.90 2024-07-221 year ago HSC 19m 05s 670ms19:05.67 2024-07-191 year ago HSC Single Rank Time Date Program 12 37m 47s 580ms37:47.58 2024-08-241 year ago HSC","boost":1},{"location":"leaderboards/solvers/luna/","title":"Luna Harran","text":"View Options Time Format Date Format","boost":1},{"location":"leaderboards/solvers/luna/#rankings","title":"Rankings","text":"Event Rank Time Date Program 3x3x3x3 Single 23 5m 48s 730ms5:48.73 2023-01-062 years ago HSC 2x2x2x2 Single 12 50s 020ms50.02 2024-06-021 year ago HSC 4x4x4x4 Single 9 24m 15s 120ms24:15.12 2024-04-241 year ago HSC 5x5x5x5 Single 7 1h 31m 38s 500ms1:31:38.50 2022-12-072 years ago HSC 6x6x6x6 Single 6 3h 15m 46s 110ms3:15:46.11 2022-12-312 years ago HSC 1x3x3x3 Single 4 1m 02s 910ms1:02.91 2023-05-312 years ago MPU 3x3x3x3x3 Single 6 2h 18m 54s 270ms2:18:54.27 2025-02-198 months ago MC7D 2x2x2x2x2 Single 7 1h 48m 43s 500ms1:48:43.50 2024-03-231 year ago MPU 4x4x4x4x4 Single image/svg+xml  2 15h 20m 24s 490ms15:20:24.49 2024-04-261 year ago MC7D Hemimegaminx Single 4 2m 06s 520ms2:06.52 2023-03-182 years ago MT","boost":1},{"location":"leaderboards/solvers/luna/#history","title":"History","text":"4D5D+MagicTile HypercubesHypercuboids 3x3x3x32x2x2x24x4x4x45x5x5x56x6x6x6 Single Rank Time Date Program 23 5m 48s 730ms5:48.73 2023-01-062 years ago HSC Single Rank Time Date Program 12 50s 020ms50.02 2024-06-021 year ago HSC Single Rank Time Date Program 9 24m 15s 120ms24:15.12 2024-04-241 year ago HSC 29m 54s 820ms29:54.82 2022-12-042 years ago HSC 44m 40s 420ms44:40.42 2022-11-232 years ago HSC Single Rank Time Date Program 7 1h 31m 38s 500ms1:31:38.50 2022-12-072 years ago HSC Single Rank Time Date Program 6 3h 15m 46s 110ms3:15:46.11 2022-12-312 years ago HSC 1x3x3x3 Single Rank Time Date Program 4 1m 02s 910ms1:02.91 2023-05-312 years ago MPU 1m 24s 340ms1:24.34 2023-05-312 years ago MPU 5D 3x3x3x3x32x2x2x2x24x4x4x4x4 Single Rank Time Date Program 6 2h 18m 54s 270ms2:18:54.27 2025-02-198 months ago MC7D 2h 43m 59s 430ms2:43:59.43 2024-06-261 year ago MC7D 3h 17m 59s 660ms3:17:59.66 2024-04-071 year ago MC7D 3h 39m 01s 240ms3:39:01.24 2024-03-221 year ago MC7D Single Rank Time Date Program 7 1h 48m 43s 500ms1:48:43.50 2024-03-231 year ago MPU Single Rank Time Date Program image/svg+xml  2 15h 20m 24s 490ms15:20:24.49 2024-04-261 year ago MC7D Hemimegaminx Single Rank Time Date Program 4 2m 06s 520ms2:06.52 2023-03-182 years ago MT 2m 11s 570ms2:11.57 2023-03-182 years ago MT 2m 54s 050ms2:54.05 2023-03-182 years ago MT 4m 30s 570ms4:30.57 2023-03-182 years ago MT","boost":1},{"location":"leaderboards/solvers/markk/","title":"Markk","text":"View Options Time Format Date Format","boost":1},{"location":"leaderboards/solvers/markk/#rankings","title":"Rankings","text":"Event Rank Time Date Program 3x3x3 in 2D projection with 1D Vision Single 4 15m 45s 390ms15:45.39 2022-12-022 years ago MC3D","boost":1},{"location":"leaderboards/solvers/markk/#history","title":"History","text":"Misc 3x3x3 in 2D projection with 1D Vision Single Rank Time Date Program 4 15m 45s 390ms15:45.39 2022-12-022 years ago MC3D","boost":1},{"location":"leaderboards/solvers/messil/","title":"Messil","text":"View Options Time Format Date Format","boost":1},{"location":"leaderboards/solvers/messil/#rankings","title":"Rankings","text":"Event Rank Time Date Program 3x3x3x3 Single 35 10m 15s 400ms10:15.40 2025-07-183 months ago HSC","boost":1},{"location":"leaderboards/solvers/messil/#history","title":"History","text":"4D Hypercubes 3x3x3x3 Single Rank Time Date Program 35 10m 15s 400ms10:15.40 2025-07-183 months ago HSC 13m 36s 310ms13:36.31 2025-07-063 months ago HSC 17m 21s 990ms17:21.99 2025-07-033 months ago HSC","boost":1},{"location":"leaderboards/solvers/milojacquet/","title":"Milo Jacquet","text":"View Options Time Format Date Format","boost":1},{"location":"leaderboards/solvers/milojacquet/#rankings","title":"Rankings","text":"Event Rank Time Date Program Hemimegaminx Single image/svg+xml  1 1m 31s 670ms1:31.67 2024-03-311 year ago MT Canon-Cut Klein Quartic Single 5 24m 14s 410ms24:14.41 2024-04-041 year ago MT","boost":1},{"location":"leaderboards/solvers/milojacquet/#history","title":"History","text":"MagicTile HemimegaminxCanon-Cut Klein Quartic Single Rank Time Date Program image/svg+xml  1 1m 31s 670ms1:31.67 2024-03-311 year ago MT 1m 47s 690ms1:47.69 2024-03-061 year ago MT Single Rank Time Date Program 5 24m 14s 410ms24:14.41 2024-04-041 year ago MT","boost":1},{"location":"leaderboards/solvers/minidog/","title":"Minidog06","text":"View Options Time Format Date Format","boost":1},{"location":"leaderboards/solvers/minidog/#rankings","title":"Rankings","text":"Event Rank Time Date Program 3x3x3x3 Single 27 7m 42s 210ms7:42.21 2025-09-264 weeks ago HSC","boost":1},{"location":"leaderboards/solvers/minidog/#history","title":"History","text":"4D Hypercubes 3x3x3x3 Single Rank Time Date Program 27 7m 42s 210ms7:42.21 2025-09-264 weeks ago HSC 10m 01s 170ms10:01.17 2025-06-293 months ago HSC 11m 23s 180ms11:23.18 2025-06-283 months ago HSC 14m 23s 240ms14:23.24 2025-06-283 months ago HSC 15m 31s 060ms15:31.06 2025-06-263 months ago HSC 19m 09s 280ms19:09.28 2025-06-263 months ago HSC","boost":1},{"location":"leaderboards/solvers/myigiter/","title":"Murat Emre Yi\u011fiter","text":"View Options Time Format Date Format","boost":1},{"location":"leaderboards/solvers/myigiter/#rankings","title":"Rankings","text":"Event Rank Time Date Program 3x3x3x3 Single 32 9m 32s 680ms9:32.68 2023-10-252 years ago HSC 3x3x3x3 Ao5 10 9m 52s 040ms9:52.04 2023-10-252 years ago HSC","boost":1},{"location":"leaderboards/solvers/myigiter/#history","title":"History","text":"4D Hypercubes 3x3x3x3 SingleAo5 Rank Time Date Program 32 9m 32s 680ms9:32.68 2023-10-252 years ago HSC Rank Time Date Program 10 9m 52s 040ms9:52.04 2023-10-252 years ago HSC","boost":1},{"location":"leaderboards/solvers/nenri/","title":"Nenri","text":"View Options Time Format Date Format","boost":1},{"location":"leaderboards/solvers/nenri/#rankings","title":"Rankings","text":"Event Rank Time Date Program 3x3x3x3 Single image/svg+xml  3 1m 44s 850ms1:44.85 2025-09-293 weeks ago HSC 3x3x3x3 Ao5 image/svg+xml  3 1m 55s 500ms1:55.50 2025-05-265 months ago HSC 3x3x3x3 No Filters image/svg+xml  1 3m 51s 950ms3:51.95 2025-10-052 weeks ago HSC 2x2x2x2 Single 4 25s 400ms25.40 2025-04-265 months ago HSC 4x4x4x4 Single image/svg+xml  3 9m 42s 030ms9:42.03 2025-04-285 months ago HSC 5x5x5x5 Single image/svg+xml  3 23m 44s 130ms23:44.13 2025-04-305 months ago HSC 6x6x6x6 Single image/svg+xml  1 39m 54s 870ms39:54.87 2025-10-033 weeks ago HSC 7x7x7x7 Single image/svg+xml  1 1h 25m 25s 730ms1:25:25.73 2025-05-314 months ago HSC 1x3x3x3 Single image/svg+xml  1 54s 920ms54.92 2025-08-291 month ago MPU 2x2x2x3 Single image/svg+xml  1 1m 59s 550ms1:59.55 2025-04-275 months ago MPU 3-Layer Simplex Single image/svg+xml  1 45s 630ms45.63 2025-03-267 months ago MC4D 3x3x3x3x3 Single image/svg+xml  1 27m 36s 510ms27:36.51 2025-09-191 month ago MC7D-KB  3x3x3x3x3x3 Single image/svg+xml  2 18h 09m 51s 860ms18:09:51.86 2025-05-065 months ago MC7D Hemimegaminx Single image/svg+xml  2 1m 35s 350ms1:35.35 2025-04-305 months ago MT Canon-Cut Klein Quartic Single image/svg+xml  2 11m 14s 190ms11:14.19 2025-05-075 months ago MT 3x3x3 in 2D projection with 1D Vision Single image/svg+xml  2 1m 46s 920ms1:46.92 2025-04-295 months ago MC3D","boost":1},{"location":"leaderboards/solvers/nenri/#history","title":"History","text":"4D5D+MagicTileMisc HypercubesHypercuboidsOther 3x3x3x32x2x2x24x4x4x45x5x5x56x6x6x67x7x7x7 SingleAo5No Filters Rank Time Date Program image/svg+xml  3 1m 44s 850ms1:44.85 2025-09-293 weeks ago HSC 1m 47s 900ms1:47.90 2025-05-265 months ago HSC 1m 48s 530ms1:48.53 2025-05-255 months ago HSC 1m 50s 850ms1:50.85 2025-05-245 months ago HSC 1m 51s 440ms1:51.44 2025-05-235 months ago HSC 1m 53s 770ms1:53.77 2025-05-015 months ago HSC 1m 56s 400ms1:56.40 2025-02-218 months ago HSC 2m 10s 380ms2:10.38 2025-01-318 months ago HSC 2m 39s 050ms2:39.05 2025-01-189 months ago HSC 2m 43s 490ms2:43.49 2025-01-129 months ago HSC 2m 51s 220ms2:51.22 2025-01-089 months ago HSC 2m 59s 810ms2:59.81 2025-01-029 months ago HSC 3m 20s 350ms3:20.35 2024-12-2310 months ago HSC 3m 28s 960ms3:28.96 2024-12-2310 months ago HSC Rank Time Date Program image/svg+xml  3 1m 55s 500ms1:55.50 2025-05-265 months ago HSC 1m 57s 210ms1:57.21 2025-05-255 months ago HSC 1m 57s 890ms1:57.89 2025-05-245 months ago HSC 2m 02s 840ms2:02.84 2025-05-235 months ago HSC 2m 06s 870ms2:06.87 2025-05-015 months ago HSC 2m 17s 790ms2:17.79 2025-03-027 months ago HSC Rank Time Date Program image/svg+xml  1 3m 51s 950ms3:51.95 2025-10-052 weeks ago HSC 4m 15s 840ms4:15.84 2025-05-145 months ago HSC 4m 21s 990ms4:21.99 2025-05-135 months ago HSC 4m 26s 190ms4:26.19 2025-04-265 months ago HSC 4m 44s 110ms4:44.11 2025-03-197 months ago HSC Single Rank Time Date Program 4 25s 400ms25.40 2025-04-265 months ago HSC Single Rank Time Date Program image/svg+xml  3 9m 42s 030ms9:42.03 2025-04-285 months ago HSC Single Rank Time Date Program image/svg+xml  3 23m 44s 130ms23:44.13 2025-04-305 months ago HSC 25m 37s 060ms25:37.06 2025-04-285 months ago HSC Single Rank Time Date Program image/svg+xml  1 39m 54s 870ms39:54.87 2025-10-033 weeks ago HSC 43m 59s 350ms43:59.35 2025-10-033 weeks ago HSC 44m 11s 930ms44:11.93 2025-05-185 months ago HSC 44m 39s 250ms44:39.25 2025-05-095 months ago HSC 47m 46s 860ms47:46.86 2025-04-116 months ago HSC 52m 41s 230ms52:41.23 2025-03-137 months ago HSC Single Rank Time Date Program image/svg+xml  1 1h 25m 25s 730ms1:25:25.73 2025-05-314 months ago HSC 1h 45m 16s 100ms1:45:16.10 2025-03-217 months ago HSC 3h 06m 44s 280ms3:06:44.28 2025-02-188 months ago HSC 1x3x3x32x2x2x3 Single Rank Time Date Program image/svg+xml  1 54s 920ms54.92 2025-08-291 month ago MPU Single Rank Time Date Program image/svg+xml  1 1m 59s 550ms1:59.55 2025-04-275 months ago MPU 3-Layer Simplex Single Rank Time Date Program image/svg+xml  1 45s 630ms45.63 2025-03-267 months ago MC4D 5D6D 3x3x3x3x3 Single Rank Time Date Program image/svg+xml  1 27m 36s 510ms27:36.51 2025-09-191 month ago MC7D-KB  46m 48s 490ms46:48.49 2025-09-161 month ago MC7D-KB  1h 59m 26s 130ms1:59:26.13 2025-05-215 months ago MC7D 2h 49m 21s 550ms2:49:21.55 2025-04-166 months ago MC7D 3h 35m 42s 020ms3:35:42.02 2025-04-016 months ago MC7D 3x3x3x3x3x3 Single Rank Time Date Program image/svg+xml  2 18h 09m 51s 860ms18:09:51.86 2025-05-065 months ago MC7D HemimegaminxCanon-Cut Klein Quartic Single Rank Time Date Program image/svg+xml  2 1m 35s 350ms1:35.35 2025-04-305 months ago MT Single Rank Time Date Program image/svg+xml  2 11m 14s 190ms11:14.19 2025-05-075 months ago MT 11m 54s 120ms11:54.12 2025-05-035 months ago MT 13m 36s 150ms13:36.15 2025-04-126 months ago MT 18m 47s 490ms18:47.49 2025-02-018 months ago MT 3x3x3 in 2D projection with 1D Vision Single Rank Time Date Program image/svg+xml  2 1m 46s 920ms1:46.92 2025-04-295 months ago MC3D 2m 45s 410ms2:45.41 2025-04-156 months ago MC3D","boost":1},{"location":"leaderboards/solvers/olaf/","title":"Olaf Niechcial","text":"View Options Time Format Date Format","boost":1},{"location":"leaderboards/solvers/olaf/#rankings","title":"Rankings","text":"Event Rank Time Date Program 3x3x3x3 Single 28 7m 55s 600ms7:55.60 2023-06-122 years ago HSC","boost":1},{"location":"leaderboards/solvers/olaf/#history","title":"History","text":"4D Hypercubes 3x3x3x3 Single Rank Time Date Program 28 7m 55s 600ms7:55.60 2023-06-122 years ago HSC 8m 38s 360ms8:38.36 2023-06-112 years ago HSC 9m 44s 250ms9:44.25 2023-06-102 years ago HSC 10m 33s 560ms10:33.56 2023-06-092 years ago HSC 11m 10s 750ms11:10.75 2023-06-082 years ago HSC 13m 56s 310ms13:56.31 2023-06-072 years ago HSC 17m 46s 640ms17:46.64 2023-06-062 years ago HSC 20m 13s 860ms20:13.86 2023-06-062 years ago HSC","boost":1},{"location":"leaderboards/solvers/origamist/","title":"Normal Origamist","text":"View Options Time Format Date Format","boost":1},{"location":"leaderboards/solvers/origamist/#rankings","title":"Rankings","text":"Event Rank Time Date Program Physical 2x2x2x2 Single 6 1m 40s 300ms1:40.30 2023-07-082 years ago -","boost":1},{"location":"leaderboards/solvers/origamist/#history","title":"History","text":"4D Physical Physical 2x2x2x2 Single Rank Time Date 6 1m 40s 300ms1:40.30 2023-07-082 years ago","boost":1},{"location":"leaderboards/solvers/pickle/","title":"Henry Pickle","text":"View Options Time Format Date Format","boost":1},{"location":"leaderboards/solvers/pickle/#rankings","title":"Rankings","text":"Event Rank Time Date Program 3x3x3x3 Single 19 5m 25s 610ms5:25.61 2024-08-261 year ago HSC","boost":1},{"location":"leaderboards/solvers/pickle/#history","title":"History","text":"4D Hypercubes 3x3x3x3 Single Rank Time Date Program 19 5m 25s 610ms5:25.61 2024-08-261 year ago HSC 5m 55s 450ms5:55.45 2024-08-261 year ago HSC 6m 13s 100ms6:13.10 2024-08-251 year ago HSC 7m 37s 650ms7:37.65 2024-08-221 year ago HSC 8m 36s 020ms8:36.02 2024-08-201 year ago HSC 9m 31s 090ms9:31.09 2024-08-181 year ago HSC 11m 41s 360ms11:41.36 2024-08-121 year ago HSC 23m 32s 990ms23:32.99 2024-08-091 year ago HSC","boost":1},{"location":"leaderboards/solvers/pistelli/","title":"Vincent Pistelli","text":"View Options Time Format Date Format","boost":1},{"location":"leaderboards/solvers/pistelli/#rankings","title":"Rankings","text":"Event Rank Time Date Program 3x3x3x3 Single 37 13m 18s 480ms13:18.48 2024-07-051 year ago HSC","boost":1},{"location":"leaderboards/solvers/pistelli/#history","title":"History","text":"4D Hypercubes 3x3x3x3 Single Rank Time Date Program 37 13m 18s 480ms13:18.48 2024-07-051 year ago HSC","boost":1},{"location":"leaderboards/solvers/pkearth/","title":"PKEarth","text":"View Options Time Format Date Format","boost":1},{"location":"leaderboards/solvers/pkearth/#rankings","title":"Rankings","text":"Event Rank Time Date Program 3x3x3x3 Single 7 2m 11s 530ms2:11.53 2024-09-141 year ago HSC 3x3x3x3 Ao5 5 2m 26s 910ms2:26.91 2024-09-131 year ago HSC 3x3x3x3 No Filters image/svg+xml  2 4m 48s 970ms4:48.97 2024-08-101 year ago HSC 2x2x2x2 Single image/svg+xml  2 19s 630ms19.63 2024-09-081 year ago HSC 2x2x2x2 Ao5 image/svg+xml  2 24s 650ms24.65 2024-10-011 year ago HSC 4x4x4x4 Single 4 10m 46s 950ms10:46.95 2024-09-071 year ago HSC 5x5x5x5 Single 5 46m 15s 860ms46:15.86 2024-08-041 year ago HSC 6x6x6x6 Single 4 1h 43m 49s 670ms1:43:49.67 2024-08-101 year ago HSC","boost":1},{"location":"leaderboards/solvers/pkearth/#history","title":"History","text":"4D Hypercubes 3x3x3x32x2x2x24x4x4x45x5x5x56x6x6x6 SingleAo5No Filters Rank Time Date Program 7 2m 11s 530ms2:11.53 2024-09-141 year ago HSC 2m 13s 770ms2:13.77 2024-09-061 year ago HSC 2m 25s 840ms2:25.84 2024-08-281 year ago HSC 2m 37s 720ms2:37.72 2024-08-271 year ago HSC 2m 42s 640ms2:42.64 2024-08-261 year ago HSC 2m 49s 790ms2:49.79 2024-08-111 year ago HSC 2m 58s 630ms2:58.63 2024-07-261 year ago HSC 3m 16s 530ms3:16.53 2024-07-221 year ago HSC 3m 24s 490ms3:24.49 2024-07-211 year ago HSC 3m 45s 200ms3:45.20 2024-07-131 year ago HSC 4m 36s 440ms4:36.44 2024-07-071 year ago HSC 6m 27s 080ms6:27.08 2024-06-291 year ago HSC 8m 31s 140ms8:31.14 2024-01-301 year ago HSC Rank Time Date Program 5 2m 26s 910ms2:26.91 2024-09-131 year ago HSC 2m 56s 940ms2:56.94 2024-08-261 year ago HSC 3m 37s 450ms3:37.45 2024-07-221 year ago HSC Rank Time Date Program image/svg+xml  2 4m 48s 970ms4:48.97 2024-08-101 year ago HSC SingleAo5 Rank Time Date Program image/svg+xml  2 19s 630ms19.63 2024-09-081 year ago HSC 22s 240ms22.24 2024-09-011 year ago HSC 22s 600ms22.60 2024-08-311 year ago HSC 24s 390ms24.39 2024-08-151 year ago HSC 28s 760ms28.76 2024-08-011 year ago HSC 36s 900ms36.90 2024-07-241 year ago HSC 44s 150ms44.15 2024-07-071 year ago HSC 47s 510ms47.51 2024-06-301 year ago HSC Rank Time Date Program image/svg+xml  2 24s 650ms24.65 2024-10-011 year ago HSC 25s 380ms25.38 2024-09-141 year ago HSC 26s 880ms26.88 2024-09-081 year ago HSC 27s 160ms27.16 2024-09-071 year ago HSC 28s 030ms28.03 2024-09-011 year ago HSC 29s 160ms29.16 2024-08-311 year ago HSC 33s 130ms33.13 2024-08-261 year ago HSC Single Rank Time Date Program 4 10m 46s 950ms10:46.95 2024-09-071 year ago HSC 12m 19s 980ms12:19.98 2024-08-301 year ago HSC 14m 49s 790ms14:49.79 2024-08-101 year ago HSC 17m 21s 080ms17:21.08 2024-07-291 year ago HSC Single Rank Time Date Program 5 46m 15s 860ms46:15.86 2024-08-041 year ago HSC Single Rank Time Date Program 4 1h 43m 49s 670ms1:43:49.67 2024-08-101 year ago HSC","boost":1},{"location":"leaderboards/solvers/pkmnhx/","title":"Trey Bowen (Pkmnhx43)","text":"View Options Time Format Date Format","boost":1},{"location":"leaderboards/solvers/pkmnhx/#rankings","title":"Rankings","text":"Event Rank Time Date Program 3x3x3x3 Single 26 7m 17s 380ms7:17.38 2024-09-151 year ago HSC 4x4x4x4 Single 15 1h 47m 49s 660ms1:47:49.66 2024-08-051 year ago HSC","boost":1},{"location":"leaderboards/solvers/pkmnhx/#history","title":"History","text":"4D Hypercubes 3x3x3x34x4x4x4 Single Rank Time Date Program 26 7m 17s 380ms7:17.38 2024-09-151 year ago HSC 8m 48s 580ms8:48.58 2024-09-041 year ago HSC 9m 45s 950ms9:45.95 2024-08-121 year ago HSC 11m 28s 570ms11:28.57 2024-08-081 year ago HSC 12m 12s 180ms12:12.18 2024-08-071 year ago HSC 13m 53s 880ms13:53.88 2024-08-071 year ago HSC 19m 40s 530ms19:40.53 2024-08-061 year ago HSC Single Rank Time Date Program 15 1h 47m 49s 660ms1:47:49.66 2024-08-051 year ago HSC","boost":1},{"location":"leaderboards/solvers/rayzchen/","title":"Ray Chen","text":"View Options Time Format Date Format","boost":1},{"location":"leaderboards/solvers/rayzchen/#rankings","title":"Rankings","text":"Event Rank Time Date Program 3x3x3x3 Single 29 8m 45s 260ms8:45.26 2024-06-181 year ago HSC","boost":1},{"location":"leaderboards/solvers/rayzchen/#history","title":"History","text":"4D Hypercubes 3x3x3x3 Single Rank Time Date Program 29 8m 45s 260ms8:45.26 2024-06-181 year ago HSC 10m 44s 960ms10:44.96 2024-06-181 year ago HSC 11m 05s 940ms11:05.94 2024-06-171 year ago HSC 12m 10s 640ms12:10.64 2024-06-171 year ago HSC 12m 41s 870ms12:41.87 2024-06-161 year ago HSC 20m 11s 540ms20:11.54 2024-06-131 year ago HSC","boost":1},{"location":"leaderboards/solvers/rowan/","title":"Rowan Fortier","text":"View Options Time Format Date Format","boost":1},{"location":"leaderboards/solvers/rowan/#rankings","title":"Rankings","text":"Event Rank Time Date Program 3x3x3x3 Single 11 3m 00s 310ms3:00.31 2025-01-229 months ago HSC 2x2x2x2 Single 13 52s 230ms52.23 2024-08-071 year ago HSC 4x4x4x4 Single 11 33m 42s 900ms33:42.90 2024-04-241 year ago HSC 1x3x3x3 Single 6 1m 13s 350ms1:13.35 2024-03-311 year ago MPU 2x2x2x3 Single image/svg+xml  3 2m 58s 900ms2:58.90 2024-06-201 year ago MPU Physical 2x2x2x2 Single image/svg+xml  3 1m 18s 240ms1:18.24 2022-09-173 years ago - Physical 2x2x2x2 One-Handed 4 5m 35s 290ms5:35.29 2023-03-122 years ago - 3-Layer Simplex Single image/svg+xml  3 1m 30s 460ms1:30.46 2023-01-262 years ago MC4D 3x3x3x3x3 Single 4 58m 47s 790ms58:47.79 2025-09-091 month ago MC7D-KB  2x2x2x2x2 Single image/svg+xml  3 7m 42s 720ms7:42.72 2025-09-081 month ago MC7D-KB","boost":1},{"location":"leaderboards/solvers/rowan/#history","title":"History","text":"4D5D+ HypercubesHypercuboidsPhysicalOther 3x3x3x32x2x2x24x4x4x4 Single Rank Time Date Program 11 3m 00s 310ms3:00.31 2025-01-229 months ago HSC 3m 10s 890ms3:10.89 2025-01-189 months ago HSC 3m 23s 430ms3:23.43 2025-01-149 months ago HSC 3m 24s 580ms3:24.58 2024-12-1010 months ago HSC 3m 25s 050ms3:25.05 2024-12-1010 months ago HSC 3m 25s 850ms3:25.85 2024-12-0910 months ago HSC 3m 33s 630ms3:33.63 2024-12-0910 months ago HSC 3m 34s 440ms3:34.44 2024-04-081 year ago HSC 3m 45s 380ms3:45.38 2024-01-281 year ago HSC 3m 55s 650ms3:55.65 2024-01-241 year ago HSC 4m 02s 370ms4:02.37 2024-01-221 year ago HSC 4m 02s 820ms4:02.82 2023-08-122 years ago HSC 4m 07s 830ms4:07.83 2023-07-132 years ago HSC 4m 10s 390ms4:10.39 2023-07-062 years ago HSC 4m 12s 920ms4:12.92 2023-02-212 years ago HSC 4m 20s 020ms4:20.02 2023-01-122 years ago HSC 4m 27s 700ms4:27.70 2023-01-122 years ago HSC 4m 38s 750ms4:38.75 2023-01-122 years ago HSC 4m 42s 190ms4:42.19 2023-01-112 years ago HSC 4m 50s 970ms4:50.97 2023-01-092 years ago HSC 4m 55s 270ms4:55.27 2023-01-092 years ago HSC 5m 02s 290ms5:02.29 2023-01-062 years ago HSC 5m 21s 880ms5:21.88 2023-01-062 years ago HSC 5m 27s 170ms5:27.17 2023-01-052 years ago HSC 5m 45s 180ms5:45.18 2023-01-052 years ago HSC 5m 48s 120ms5:48.12 2023-01-052 years ago HSC 5m 51s 330ms5:51.33 2023-01-052 years ago HSC 5m 58s 300ms5:58.30 2023-01-042 years ago HSC 6m 25s 040ms6:25.04 2023-01-042 years ago HSC 6m 31s 020ms6:31.02 2022-12-012 years ago HSC 8m 58s 820ms8:58.82 2022-11-182 years ago HSC Single Rank Time Date Program 13 52s 230ms52.23 2024-08-071 year ago HSC 1m 02s 710ms1:02.71 2024-06-021 year ago HSC Single Rank Time Date Program 11 33m 42s 900ms33:42.90 2024-04-241 year ago HSC 46m 19s 150ms46:19.15 2024-04-241 year ago HSC 1x3x3x32x2x2x3 Single Rank Time Date Program 6 1m 13s 350ms1:13.35 2024-03-311 year ago MPU 1m 15s 580ms1:15.58 2023-05-312 years ago MPU Single Rank Time Date Program image/svg+xml  3 2m 58s 900ms2:58.90 2024-06-201 year ago MPU 3m 19s 700ms3:19.70 2024-06-201 year ago MPU Physical 2x2x2x2 SingleOne-Handed Rank Time Date image/svg+xml  3 1m 18s 240ms1:18.24 2022-09-173 years ago 1m 27s 170ms1:27.17 2022-08-023 years ago 1m 28s 140ms1:28.14 2022-06-203 years ago 1m 46s 240ms1:46.24 2022-05-073 years ago 1m 56s 750ms1:56.75 2021-12-113 years ago 2m 00s 660ms2:00.66 2021-12-113 years ago 2m 03s 580ms2:03.58 2021-12-093 years ago 2m 05s 270ms2:05.27 2021-12-063 years ago 2m 16s 540ms2:16.54 2021-11-153 years ago Rank Time Date 4 5m 35s 290ms5:35.29 2023-03-122 years ago 6m 14s 880ms6:14.88 2023-03-122 years ago 6m 25s 120ms6:25.12 2022-07-013 years ago 3-Layer Simplex Single Rank Time Date Program image/svg+xml  3 1m 30s 460ms1:30.46 2023-01-262 years ago MC4D 1m 43s 450ms1:43.45 2023-01-252 years ago MC4D 2m 14s 040ms2:14.04 2023-01-232 years ago MC4D 5D 3x3x3x3x32x2x2x2x2 Single Rank Time Date Program 4 58m 47s 790ms58:47.79 2025-09-091 month ago MC7D-KB  1h 27m 51s 430ms1:27:51.43 2025-09-061 month ago MC7D-KB  1h 37m 42s 500ms1:37:42.50 2025-02-277 months ago MC7D 1h 52m 29s 730ms1:52:29.73 2024-07-011 year ago MC7D 2h 14m 16s 580ms2:14:16.58 2024-06-291 year ago MC7D 2h 30m 30s 480ms2:30:30.48 2024-06-261 year ago MC7D 3h 01m 48s 630ms3:01:48.63 2024-06-251 year ago MC7D 7h 54m 19s 600ms7:54:19.60 2024-04-061 year ago MC7D Single Rank Time Date Program image/svg+xml  3 7m 42s 720ms7:42.72 2025-09-081 month ago MC7D-KB  14m 04s 780ms14:04.78 2025-09-051 month ago MC7D-KB  16m 38s 980ms16:38.98 2025-09-051 month ago MC7D-KB  20m 29s 880ms20:29.88 2025-09-051 month ago MC7D-KB","boost":1},{"location":"leaderboards/solvers/saturnb/","title":"Saturnb","text":"View Options Time Format Date Format","boost":1},{"location":"leaderboards/solvers/saturnb/#rankings","title":"Rankings","text":"Event Rank Time Date Program 3x3x3x3 Single 16 4m 25s 820ms4:25.82 2024-12-1410 months ago HSC 2x2x2x2 Single 10 44s 660ms44.66 2024-07-161 year ago HSC","boost":1},{"location":"leaderboards/solvers/saturnb/#history","title":"History","text":"4D Hypercubes 3x3x3x32x2x2x2 Single Rank Time Date Program 16 4m 25s 820ms4:25.82 2024-12-1410 months ago HSC 4m 58s 940ms4:58.94 2024-10-141 year ago HSC 5m 22s 340ms5:22.34 2024-09-081 year ago HSC 5m 48s 460ms5:48.46 2024-08-281 year ago HSC 6m 09s 180ms6:09.18 2024-08-261 year ago HSC 6m 38s 150ms6:38.15 2024-08-121 year ago HSC 7m 38s 780ms7:38.78 2024-08-081 year ago HSC 7m 57s 350ms7:57.35 2024-07-131 year ago HSC 9m 04s 990ms9:04.99 2024-07-121 year ago HSC Single Rank Time Date Program 10 44s 660ms44.66 2024-07-161 year ago HSC 53s 640ms53.64 2024-07-051 year ago HSC 1m 24s 920ms1:24.92 2024-07-011 year ago HSC","boost":1},{"location":"leaderboards/solvers/starry/","title":"Starryninja","text":"View Options Time Format Date Format","boost":1},{"location":"leaderboards/solvers/starry/#rankings","title":"Rankings","text":"Event Rank Time Date Program 3x3x3x3 Single 39 20m 17s 510ms20:17.51 2024-07-201 year ago HSC","boost":1},{"location":"leaderboards/solvers/starry/#history","title":"History","text":"4D Hypercubes 3x3x3x3 Single Rank Time Date Program 39 20m 17s 510ms20:17.51 2024-07-201 year ago HSC","boost":1},{"location":"leaderboards/solvers/stella/","title":"Stella","text":"View Options Time Format Date Format","boost":1},{"location":"leaderboards/solvers/stella/#rankings","title":"Rankings","text":"Event Rank Time Date Program 3x3x3x3 Single 30 8m 49s 070ms8:49.07 2024-06-291 year ago HSC","boost":1},{"location":"leaderboards/solvers/stella/#history","title":"History","text":"4D Hypercubes 3x3x3x3 Single Rank Time Date Program 30 8m 49s 070ms8:49.07 2024-06-291 year ago HSC 13m 49s 860ms13:49.86 2024-06-081 year ago HSC 15m 29s 970ms15:29.97 2024-06-081 year ago HSC 21m 57s 070ms21:57.07 2024-06-021 year ago HSC 42m 53s 540ms42:53.54 2024-06-021 year ago HSC","boost":1},{"location":"leaderboards/solvers/tetrian/","title":"Tetrian","text":"View Options Time Format Date Format","boost":1},{"location":"leaderboards/solvers/tetrian/#rankings","title":"Rankings","text":"Event Rank Time Date Program 3x3x3x3 Single 34 10m 11s 870ms10:11.87 2019-05-046 years ago MC4D 3x3x3x3 No Filters 4 10m 11s 870ms10:11.87 2019-05-046 years ago MC4D 2x2x2x2 Single 14 1m 00s 800ms1:00.80 2021-07-244 years ago MC4D 4x4x4x4 Single 14 1h 12m 07s 650ms1:12:07.65 2019-05-196 years ago MC4D 3-Layer Simplex Single 4 1m 43s 440ms1:43.44 2021-07-244 years ago MC4D","boost":1},{"location":"leaderboards/solvers/tetrian/#history","title":"History","text":"4D HypercubesOther 3x3x3x32x2x2x24x4x4x4 SingleNo Filters Rank Time Date Program 34 10m 11s 870ms10:11.87 2019-05-046 years ago MC4D Rank Time Date Program 4 10m 11s 870ms10:11.87 2019-05-046 years ago MC4D Single Rank Time Date Program 14 1m 00s 800ms1:00.80 2021-07-244 years ago MC4D Single Rank Time Date Program 14 1h 12m 07s 650ms1:12:07.65 2019-05-196 years ago MC4D 3-Layer Simplex Single Rank Time Date Program 4 1m 43s 440ms1:43.44 2021-07-244 years ago MC4D","boost":1},{"location":"leaderboards/solvers/tymofro/","title":"Tymon Fro","text":"View Options Time Format Date Format","boost":1},{"location":"leaderboards/solvers/tymofro/#rankings","title":"Rankings","text":"Event Rank Time Date Program 3x3x3x3 Single 13 3m 53s 450ms3:53.45 2024-02-121 year ago HSC 2x2x2x2 Single 11 45s 370ms45.37 2024-03-191 year ago HSC 4x4x4x4 Single 8 17m 52s 810ms17:52.81 2024-03-211 year ago HSC 5x5x5x5 Single 6 1h 27m 10s 780ms1:27:10.78 2023-10-012 years ago HSC 1x3x3x3 Single image/svg+xml  2 57s 460ms57.46 2023-11-111 year ago MPU 2x2x2x3 Single 4 4m 22s 580ms4:22.58 2024-06-111 year ago MPU Physical 2x2x2x2 Single 4 1m 19s 680ms1:19.68 2023-11-071 year ago - Physical 2x2x2x2 One-Handed image/svg+xml  3 2m 56s 980ms2:56.98 2023-10-082 years ago - 2x2x2x2x2 Single 5 48m 22s 310ms48:22.31 2024-07-021 year ago MPU Canon-Cut Klein Quartic Single 6 1h 13m 41s 380ms1:13:41.38 2024-06-211 year ago MT","boost":1},{"location":"leaderboards/solvers/tymofro/#history","title":"History","text":"4D5D+MagicTile HypercubesHypercuboidsPhysical 3x3x3x32x2x2x24x4x4x45x5x5x5 Single Rank Time Date Program 13 3m 53s 450ms3:53.45 2024-02-121 year ago HSC 4m 08s 700ms4:08.70 2024-01-251 year ago HSC 4m 33s 150ms4:33.15 2023-08-222 years ago HSC 5m 41s 880ms5:41.88 2023-08-212 years ago HSC 6m 22s 380ms6:22.38 2023-08-162 years ago HSC 6m 54s 540ms6:54.54 2023-07-312 years ago HSC 7m 19s 720ms7:19.72 2023-07-272 years ago HSC 9m 08s 770ms9:08.77 2023-07-222 years ago HSC 10m 41s 570ms10:41.57 2023-07-222 years ago HSC 12m 48s 460ms12:48.46 2023-07-212 years ago HSC 15m 22s 620ms15:22.62 2023-07-172 years ago HSC Single Rank Time Date Program 11 45s 370ms45.37 2024-03-191 year ago HSC 54s 520ms54.52 2023-08-172 years ago HSC Single Rank Time Date Program 8 17m 52s 810ms17:52.81 2024-03-211 year ago HSC 23m 21s 810ms23:21.81 2024-03-191 year ago HSC 26m 09s 960ms26:09.96 2023-08-022 years ago HSC 34m 00s 120ms34:00.12 2023-07-252 years ago HSC Single Rank Time Date Program 6 1h 27m 10s 780ms1:27:10.78 2023-10-012 years ago HSC 1x3x3x32x2x2x3 Single Rank Time Date Program image/svg+xml  2 57s 460ms57.46 2023-11-111 year ago MPU 1m 06s 710ms1:06.71 2023-11-101 year ago MPU 1m 19s 640ms1:19.64 2023-11-041 year ago MPU Single Rank Time Date Program 4 4m 22s 580ms4:22.58 2024-06-111 year ago MPU Physical 2x2x2x2 SingleOne-Handed Rank Time Date 4 1m 19s 680ms1:19.68 2023-11-071 year ago 1m 26s 100ms1:26.10 2023-09-172 years ago 2m 01s 930ms2:01.93 2023-08-162 years ago Rank Time Date image/svg+xml  3 2m 56s 980ms2:56.98 2023-10-082 years ago 5D 2x2x2x2x2 Single Rank Time Date Program 5 48m 22s 310ms48:22.31 2024-07-021 year ago MPU 58m 41s 410ms58:41.41 2024-07-021 year ago MPU 1h 13m 07s 260ms1:13:07.26 2024-04-011 year ago MPU Canon-Cut Klein Quartic Single Rank Time Date Program 6 1h 13m 41s 380ms1:13:41.38 2024-06-211 year ago MT","boost":1},{"location":"leaderboards/solvers/vigoprins/","title":"Vigo Prins","text":"View Options Time Format Date Format","boost":1},{"location":"leaderboards/solvers/vigoprins/#rankings","title":"Rankings","text":"Event Rank Time Date Program Physical 2x2x2x2 Single 8 2m 11s 720ms2:11.72 2025-06-184 months ago -","boost":1},{"location":"leaderboards/solvers/vigoprins/#history","title":"History","text":"4D Physical Physical 2x2x2x2 Single Rank Time Date 8 2m 11s 720ms2:11.72 2025-06-184 months ago","boost":1},{"location":"leaderboards/solvers/vin/","title":"Vin","text":"View Options Time Format Date Format","boost":1},{"location":"leaderboards/solvers/vin/#rankings","title":"Rankings","text":"Event Rank Time Date Program 3x3x3x3 Single 8 2m 40s 010ms2:40.01 2025-06-104 months ago HSC 3x3x3x3x3 Single 5 1h 49m 47s 500ms1:49:47.50 2025-02-158 months ago MC7D","boost":1},{"location":"leaderboards/solvers/vin/#history","title":"History","text":"4D5D+ Hypercubes 3x3x3x3 Single Rank Time Date Program 8 2m 40s 010ms2:40.01 2025-06-104 months ago HSC 2m 54s 640ms2:54.64 2025-05-314 months ago HSC 3m 08s 260ms3:08.26 2025-05-215 months ago HSC 3m 40s 830ms3:40.83 2025-05-125 months ago HSC 4m 52s 600ms4:52.60 2025-04-186 months ago HSC 5m 27s 310ms5:27.31 2025-04-156 months ago HSC 7m 17s 250ms7:17.25 2025-01-199 months ago HSC 16m 33s 940ms16:33.94 2024-06-091 year ago HSC 5D 3x3x3x3x3 Single Rank Time Date Program 5 1h 49m 47s 500ms1:49:47.50 2025-02-158 months ago MC7D 2h 14m 20s 280ms2:14:20.28 2025-02-128 months ago MC7D 2h 36m 47s 850ms2:36:47.85 2024-07-181 year ago MC7D 2h 45m 09s 530ms2:45:09.53 2024-07-161 year ago MC7D 3h 20m 00s 680ms3:20:00.68 2024-07-161 year ago MC7D 4h 00m 40s 450ms4:00:40.45 2024-07-011 year ago MC7D 4h 23m 58s 910ms4:23:58.91 2024-06-271 year ago MC7D 6h 40m 34s 760ms6:40:34.76 2024-06-261 year ago MC7D","boost":1},{"location":"leaderboards/solvers/void/","title":"The Void","text":"View Options Time Format Date Format","boost":1},{"location":"leaderboards/solvers/void/#rankings","title":"Rankings","text":"Event Rank Time Date Program 3x3x3x3 Single 33 9m 47s 690ms9:47.69 2025-03-306 months ago HSC 4x4x4x4 Single 10 28m 00s 370ms28:00.37 2025-05-274 months ago HSC","boost":1},{"location":"leaderboards/solvers/void/#history","title":"History","text":"4D Hypercubes 3x3x3x34x4x4x4 Single Rank Time Date Program 33 9m 47s 690ms9:47.69 2025-03-306 months ago HSC 17m 19s 920ms17:19.92 2023-06-282 years ago HSC 17m 19s 920ms17:19.92 2023-06-282 years ago HSC 20m 12s 920ms20:12.92 2023-06-112 years ago HSC Single Rank Time Date Program 10 28m 00s 370ms28:00.37 2025-05-274 months ago HSC","boost":1},{"location":"leaderboards/solvers/voytxt/","title":"Vojt\u011bch K\u0159i\u017ean (voytxt)","text":"View Options Time Format Date Format","boost":1},{"location":"leaderboards/solvers/voytxt/#rankings","title":"Rankings","text":"Event Rank Time Date Program 3x3x3x3 Single 15 4m 22s 660ms4:22.66 2025-06-144 months ago HSC","boost":1},{"location":"leaderboards/solvers/voytxt/#history","title":"History","text":"4D Hypercubes 3x3x3x3 Single Rank Time Date Program 15 4m 22s 660ms4:22.66 2025-06-144 months ago HSC","boost":1},{"location":"leaderboards/solvers/weill/","title":"Freya","text":"View Options Time Format Date Format","boost":1},{"location":"leaderboards/solvers/weill/#rankings","title":"Rankings","text":"Event Rank Time Date Program 3x3x3x3 Single 40 24m 46s 950ms24:46.95 2022-12-022 years ago HSC","boost":1},{"location":"leaderboards/solvers/weill/#history","title":"History","text":"4D Hypercubes 3x3x3x3 Single Rank Time Date Program 40 24m 46s 950ms24:46.95 2022-12-022 years ago HSC","boost":1},{"location":"leaderboards/solvers/ysinx/","title":"y=sin(x)","text":"View Options Time Format Date Format","boost":1},{"location":"leaderboards/solvers/ysinx/#rankings","title":"Rankings","text":"Event Rank Time Date Program 3x3x3x3 Single 10 2m 48s 550ms2:48.55 2025-07-073 months ago HSC 11-cell Single image/svg+xml  1 59m 01s 990ms59:01.99 2025-08-142 months ago NM11C Canon-Cut Klein Quartic Single image/svg+xml  1 8m 51s 460ms8:51.46 2025-07-203 months ago MT Canon-Cut Dyck Map Single image/svg+xml  1 4m 55s 810ms4:55.81 2025-05-085 months ago MT","boost":1},{"location":"leaderboards/solvers/ysinx/#history","title":"History","text":"4DMagicTile HypercubesOther 3x3x3x3 Single Rank Time Date Program 10 2m 48s 550ms2:48.55 2025-07-073 months ago HSC 3m 40s 870ms3:40.87 2025-07-053 months ago HSC 4m 27s 920ms4:27.92 2025-06-054 months ago HSC 11-cell Single Rank Time Date Program image/svg+xml  1 59m 01s 990ms59:01.99 2025-08-142 months ago NM11C Canon-Cut Klein QuarticCanon-Cut Dyck Map Single Rank Time Date Program image/svg+xml  1 8m 51s 460ms8:51.46 2025-07-203 months ago MT 9m 47s 400ms9:47.40 2025-06-034 months ago MT 10m 46s 870ms10:46.87 2025-05-075 months ago MT 11m 20s 930ms11:20.93 2025-05-065 months ago MT Single Rank Time Date Program image/svg+xml  1 4m 55s 810ms4:55.81 2025-05-085 months ago MT","boost":1},{"location":"leaderboards/solvers/yuste/","title":"Sebastian Yuste","text":"View Options Time Format Date Format","boost":1},{"location":"leaderboards/solvers/yuste/#rankings","title":"Rankings","text":"Event Rank Time Date Program 3x3x3x3 Blindfolded image/svg+xml  1 1h 21m 17s 680ms1:21:17.68 2022-03-173 years ago MC4D","boost":1},{"location":"leaderboards/solvers/yuste/#history","title":"History","text":"4D Hypercubes 3x3x3x3 Blindfolded Rank Time Date Program image/svg+xml  1 1h 21m 17s 680ms1:21:17.68 2022-03-173 years ago MC4D","boost":1},{"location":"leaderboards/submit/","title":"Hypercubing Leaderboard Submission Form","text":"<p>Please submit using this Google form</p>"},{"location":"leaderboards/submit/confirmation/","title":"Hypercubing Leaderboard Submission","text":"<p>Thank you for your submission to the Hypercubing.xyz leaderboard! Please allow up to one week for your submission to appear in the rankings.</p>"},{"location":"methods/","title":"Methods","text":"<p>This page lists solving methods by puzzle.</p> <p>It\u2019s a good idea to learn Notation before trying to learn any of these methods</p>"},{"location":"methods/#physical-2222","title":"Physical 2x2x2x2","text":"<p>While you can use virtual 2<sup>4</sup> methods on the physical 2<sup>4</sup>, it isn\u2019t recommended because you may have to use an excessive amount of gyros. These methods are specifically designed for the unique restrictive turning of the physical 2<sup>4</sup> in mind.</p> <ul> <li>Luna\u2019s Method</li> <li>Rowan\u2019s Method</li> <li>Grant\u2019s OBC Method</li> <li>P4L (PBLBC)</li> <li>GRCL Method</li> </ul>"},{"location":"methods/#2222","title":"2x2x2x2","text":"<ul> <li>4Tega</li> <li>Cell By Cell</li> </ul>"},{"location":"methods/#3333","title":"3x3x3x3","text":"<ul> <li>CFOP</li> <li>3-Block</li> <li>Octachoroux</li> </ul>"},{"location":"methods/#4444","title":"4x4x4x4+","text":"<ul> <li>Reduction</li> <li>3Block</li> </ul>"},{"location":"methods/big-cube-reduction/","title":"Big Cube Reduction","text":"<p>4<sup>4</sup> with paired 1c centers</p> <p></p> <p>Just like 3D reduction of big cubes, higher dimensional reduction works by pairing up groups of pieces with more and more colors until the n<sup>d</sup> is reduced into an (n-1)<sup>d</sup>. Pairing up pieces is done in a very similar way to the 3D method; If you can solve 3<sup>3</sup>, 4<sup>3</sup>, and 3<sup>4</sup>, then you can solve 4<sup>4</sup>.</p>"},{"location":"methods/dimensional-reduction/","title":"Dimensional Reduction","text":"<p>Dimensional reduced 3<sup>4</sup></p> <p></p> <p>Dimensional reduction is a technique to reduce an n<sup>d</sup> puzzle into an n<sup>d-1</sup> puzzle. It does this by pairing up n-piece long bars (e.g. to reduce 3<sup>4</sup> into 3<sup>3</sup>, pair up 3-piece long bars).</p> <p>To get to the dimensionally reduced state from a solved 3<sup>4</sup>, do only turns that don\u2019t change the colours of the I/O axis (moves that look like big 3<sup>3</sup> moves).</p> Does RKT PLC count as Dimensional Reduction? <p>RKT PLC does not count as dimensional reduction because certain states of the last cell are not reachable without incurring some form of RKT debt.</p> <p>Below is Andrey\u2019s log file of a 3<sup>4</sup> solve done with dimensional reduction. It\u2019s essentially a CFOP solve, but with some advanced pseudo-slotting and commutators. The solve is similar to doing Pseudo F2L (where the pairs can be in any slot), and then doing OLC/PLC (except solving the PLC into the scrambled state of the rest of the puzzle) and then finishing by solving the reduced puzzle that remains.</p> Andrey_34.log Andrey_34.log<pre><code>MagicCube4D 3 0 315 {4,3,3} 3\n-0.18955569589822457 0.43991704061351233 -0.877805009971115 -2.7145128148370095E-16\n-2.839993659326744E-9 1.4847274022149884E-10 6.876845398745129E-10 -1.0\n-0.14794206390078768 -0.8966035341133775 -0.41739100175276544 8.357431997622695E-19\n0.970660488472316 -0.05074544307867573 -0.2350385417871584 -2.925836319069701E-9\n*\n104,1,1 12,-1,2 82,1,4 72,1,4 101,-1,1 58,1,4 169,1,4 136,1,2 174,-1,1 158,-1,2\n100,-1,2 44,-1,2 156,1,4 201,-1,1 141,-1,4 40,1,4 208,1,2 162,1,2 143,1,2 171,1,1\n208,-1,1 144,1,4 182,-1,1 56,-1,2 186,1,4 126,1,1 200,-1,2 120,-1,2 156,1,1 194,1,2\n166,-1,2 85,1,1 6,-1,1 143,-1,1 120,1,2 182,-1,2 147,1,4 203,1,1 71,-1,2 192,-1,2\n73,1,2 5,-1,2 159,-1,1 124,-1,2 5,1,2 184,1,4 122,1,1 213,-1,1 m| 102,-1,1\n24,1,1 49,-1,1 20,1,1 131,-1,1 24,1,1 186,1,1 157,1,1 22,1,1 49,-1,1 211,-1,4\n209,1,1 75,-1,1 197,1,1 75,1,1 212,1,4 131,-1,1 194,1,1 131,1,1 195,-1,4 102,-1,1\n211,1,1 102,1,1 214,-1,4 184,1,1 214,-1,1 184,-1,1 214,1,4 78,-1,1 210,1,1 78,1,1\n210,-1,4 209,-1,1 76,1,1 205,1,1 76,-1,1 212,-1,4 78,-1,1 199,1,1 78,1,1 191,-1,4\n202,1,1 52,-1,1 204,1,4 132,1,1 210,1,1 210,1,1 132,-1,1 15,1,1 128,1,1 74,-1,1\n106,-1,1 214,1,4 131,1,1 195,-1,1 131,-1,1 214,-1,4 214,-1,1 187,-1,1 196,-1,4 158,-1,1\n213,1,1 158,1,1 196,1,4 155,1,1 211,1,4 78,1,1 210,-1,1 78,-1,1 22,1,1 214,1,1\n77,1,1 212,1,1 77,-1,1 206,1,1 185,-1,1 212,-1,1 185,1,1 77,1,1 212,-1,1 77,-1,1\n190,1,1 6,-1,1 48,1,1 209,-1,1 48,-1,1 190,1,4 182,1,1 160,-1,1 52,-1,1 24,1,1\n157,1,1 213,1,4 157,-1,1 198,1,1 157,1,1 213,-1,4 157,-1,1 213,1,4 74,1,1 187,-1,1\n189,-1,4 105,1,1 211,1,4 105,-1,1 214,1,1 105,1,1 211,-1,4 105,-1,1 189,1,4 187,1,1\n105,1,1 211,1,4 105,-1,1 214,1,1 105,1,1 211,-1,4 105,-1,1 3,1,1 210,1,1 130,-1,1\n212,-1,4 130,1,1 199,1,1 130,-1,1 212,1,4 130,1,1 192,1,4 74,1,1 193,-1,4 198,1,1\n76,-1,1 210,-1,4 76,1,1 201,1,1 76,-1,1 210,1,4 76,1,1 193,1,4 101,1,1 187,-1,1\n187,-1,1 200,1,4 48,-1,1 209,-1,4 48,1,1 191,1,1 48,-1,1 209,1,4 48,1,1 200,1,4\n51,-1,1 199,1,4 51,1,1 213,-1,1 51,-1,1 199,1,4 51,1,1 182,-1,1 78,1,1 202,1,4\n78,-1,1 210,1,1 210,1,1 78,1,1 202,1,4 78,-1,1 128,1,2 160,1,1 128,1,2 160,-1,1\n182,-1,2 182,-1,2 132,-1,1 202,1,4 132,1,1 196,1,1 132,-1,1 202,1,4 132,1,1 211,1,1\n211,1,1 47,-1,1 201,1,1 101,1,1 74,1,1 201,1,1 128,-1,1 155,-1,1 200,1,1 47,1,1\n155,1,1 200,1,1 52,-1,1 202,1,1 74,-1,1 128,-1,1 202,1,1 182,-1,1 160,1,1 208,1,1\n182,-1,1 155,-1,1 208,1,1 155,1,2 206,1,1 182,1,1 101,1,1 206,1,1 47,1,1 74,-1,1\n207,1,1 182,1,1 128,1,1 207,1,1 187,-1,1 197,1,1 47,1,1 74,1,1 47,-1,1 74,-1,1\n47,1,1 74,1,1 197,1,1 133,-1,1 155,-1,1 155,-1,1 133,-1,1 52,1,1 133,1,1 52,-1,1\n205,1,1 74,-1,1 182,-1,1 74,1,1 182,1,1 74,-1,1 182,-1,1 205,1,1 133,-1,1 203,1,1\n155,-1,1 101,-1,1 155,1,1 101,1,1 155,-1,1 101,-1,1 203,1,1 52,-1,1 79,1,1 52,1,1\n52,1,1 208,1,1 182,-1,1 155,-1,1 182,1,1 155,1,1 182,-1,1 155,-1,1 208,1,1 155,-1,1\n74,-1,1 74,-1,1 182,1,1 74,-1,1 182,-1,1 101,1,1 182,1,1 101,-1,1 182,1,1 101,-1,1\n101,-1,1 74,1,1 74,1,1 47,-1,1 128,1,1 155,-1,1 155,-1,1 47,-1,1 47,-1,1 79,-1,1\n79,-1,1 47,-1,2 47,-1,2 106,1,1 74,-1,1 74,-1,1 47,1,1 133,1,1 133,1,1 79,1,1\n79,1,1 101,1,2 101,1,2 187,-1,1 47,1,1 47,1,1 101,1,1 101,1,1 47,1,1 47,1,1\n101,1,1 101,1,1 47,1,1 47,1,1 74,-1,1 74,-1,1 47,-1,2 74,1,1 74,1,1 47,1,2\n74,1,1 74,1,1 133,1,1 133,1,1.\n</code></pre> <p>The move count is extremely low, which is pretty cool.</p>"},{"location":"methods/drbelt/","title":"DRBelt","text":"<p>DRBelt is a Physical 3x3x3x3 method developed by The Cube Dude. It aims to minimize the number of gyros needed to solve the puzzle for a faster and more enjoyable solving experience.</p>"},{"location":"methods/drbelt/#recommended-knowledge","title":"Recommended Knowledge","text":"<p>Before learning this method, it is recommended to have experience with the following: 3x3x3x3 General Solving, 3x3x3 Edge Orientation, Physical 2x2x2x2 General Solving</p>"},{"location":"methods/drbelt/#step-1-ridge-band","title":"Step 1: Ridge Band","text":"<p>In this step, solve 4 ridges that all share the same 2 axes. For example, this could mean solving the Red/Green, Red/Blue, Orange/Blue, and Orange/Green ridges.</p>"},{"location":"methods/drbelt/#step-2-ridge-orientation","title":"Step 2: Ridge Orientation","text":"<p>In this step, orient the remaining ridges. This can be done by doing quarter turns on one of the component cells of the Ridge Band in a way that doesn\u2019t break existing progress. This can be done in a similar way as 3x3x3 Edge Orientation. After doing this, gyro the ridge band to the tertiary axes (aka Sticky-Outy Bits)</p>"},{"location":"methods/drbelt/#step-3-belt","title":"Step 3: Belt","text":"<p>In this step, solve the rest of the middle layer by making two 1x3x3 blocks around opposite centers.</p>"},{"location":"methods/drbelt/#step-4-ol2c","title":"Step 4: OL2C","text":"<p>In this step, orient the remaining edges and corners. To do this with a low number of gyros, arrange 8 misoriented pieces onto a belt cell in a valid 3D OLL configuration. Then, gyro to that axis and do a RKT 3D OLL.</p>"},{"location":"methods/drbelt/#step-5-pl2c","title":"Step 5: PL2C","text":"<p>In this step, solve the remaining pieces with a combination of Outer Turns and RKT.</p>"},{"location":"methods/general-cfop/","title":"Generalized CFOP","text":"<p>This article is a generator for the steps of a dimension-generalized CFOP method. For CFOP on 3<sup>4</sup>, see CFOP.</p> <p>CFOP on: 3<sup>5</sup></p> <p></p>"},{"location":"methods/general-cfop/#cross","title":"Cross","text":""},{"location":"methods/general-cfop/#f2l","title":"F2L","text":""},{"location":"methods/general-cfop/#oll","title":"OLL","text":""},{"location":"methods/general-cfop/#pll","title":"PLL","text":""},{"location":"methods/ll-strats/","title":"Last Layer Strategies","text":"<p>This page is a work in progress.</p> <p>This page documents some common last layer strategies for hypercubes (variants of these techniques will work on other puzzles too).</p>"},{"location":"methods/ll-strats/#ollpll","title":"OLL/PLL","text":"<p>First all of the pieces are oriented in increasing order by number of stickers.</p> <p>To orient 2c pieces, use EOLL algorithms from 2-look OLL.</p> <p>To orient the 3c pieces, use RKT to set up the E slice of the last cell into a configuration that looks like a possible OCLL case. Then use OCLL algorithms to solve that case. </p> <p>Avoiding monotwist/flip</p> <p>In higher dimensions, it\u2019s possible to have a single 3c+ piece twisted in place. To avoid this situation, make sure that your last OCLL algorithm setup will solve all of the remaining pieces of that piece type. For example if you have five pieces left to orient, don\u2019t set up an alg that orients four of them, because then you will be left with one. Instead, you can do an alg that orients three pieces, followed by an alg that orients two more.</p> <p>To orient the 4c pieces, use RKT to set up OCLL cases, but this time you have to perform the OCLL alg with RKT. Again, it\u2019s possible to have just one 4c left to orient, so be smart about your last setup and algorithm.</p> <p>To orient 5c+ pieces, you have to use RKT to setup OCLL cases, and then do the algorithm using double/triple/etc RKT.</p> <p>For PLL, first permute the 2c pieces using U-perms or other EPLL algorithms. Then use RKT to permute the last layer like a lower dimensional puzzle using RKT.</p>"},{"location":"methods/ll-strats/#direct-ll","title":"Direct LL","text":"<p>In 4D+, you can use F2L isolations to help you orient and permute blocks of pieces at the same time.</p>"},{"location":"methods/ll-strats/#partial-direct-ll","title":"Partial Direct LL","text":"<p>If you use direct LL techniques to just solve the F2L of the LL recursively until you\u2019re left with a \u201csquare\u201d of pieces that need orienting and permuting. This group of pieces is the same amount as in 3D, except they can be oriented wrong in many different ways. From here, you can use algorithms to orient them, and then just normal PLL algorithms to permute them.</p>"},{"location":"methods/2x2x2x2/4tega/","title":"4tega","text":"<p>4tega is the 4-dimensional equivalent of the Ortega Method on 2<sup>3</sup>. There are 2 main variants, as there is no perfect way to generalize this method to 4d.</p>"},{"location":"methods/2x2x2x2/4tega/#variant-1","title":"Variant 1","text":""},{"location":"methods/2x2x2x2/4tega/#orient-both-cells","title":"Orient Both Cells","text":"<p>Start by orienting a single side, using either colour from that side or its opposite side. This can easily be done without RKT by using blockbuilding. Next, use 2<sup>4</sup> OLC strategies to orient the other cell. Because the first cell isn\u2019t solved, you don\u2019t have to worry about messing it up, allowing you to save moves.</p>"},{"location":"methods/2x2x2x2/4tega/#separate-colors","title":"Separate colors","text":"<p>Separate the colors of the cells that are oriented, leaving you with two 2<sup>3</sup> solves.</p>"},{"location":"methods/2x2x2x2/4tega/#permute-both-cells","title":"Permute Both Cells","text":"<p>Solve the first cell like a 2<sup>3</sup> without RKT, then solve the other cell like a 2<sup>3</sup>, but using RKT.</p>"},{"location":"methods/2x2x2x2/4tega/#variant-2","title":"Variant 2","text":""},{"location":"methods/2x2x2x2/4tega/#orient-both-cells_1","title":"Orient Both Cells","text":"<p>Same as in Variant 1.</p>"},{"location":"methods/2x2x2x2/4tega/#separate-colors_1","title":"Separate colors","text":"<p>Same as in Variant 1.</p>"},{"location":"methods/2x2x2x2/4tega/#orient-both-layers-of-both-cells","title":"Orient Both Layers of Both Cells","text":"<p>Use RKT to orient both layers of both cells, just like OBL in 3D Ortega. This can be done using the OCLL algorithms.</p>"},{"location":"methods/2x2x2x2/4tega/#p4lpblbc","title":"P4L/PBLBC","text":"<p>Permute all 4 layers of both cells at once using algorithms. Some algorithms can be found on Rowan\u2019s PBLBC algorithms sheet.</p>"},{"location":"methods/2x2x2x2/cell-by-cell/","title":"Cell by Cell","text":"<p>Cell by Cell is the 4D equivalent of Layer by Layer.</p>"},{"location":"methods/2x2x2x2/cell-by-cell/#1-solve-the-first-cell","title":"1. Solve the first cell","text":"<p>Completely solve one of the sides of the puzzle. You can do this by blockbuilding, or by getting all the same color one on side and then permuting the pieces around until they are solved.</p>"},{"location":"methods/2x2x2x2/cell-by-cell/#2-solve-the-last-cell","title":"2. Solve the last cell","text":""},{"location":"methods/2x2x2x2/cell-by-cell/#a-orient-the-last-cell","title":"a. Orient the last cell","text":"<p>In this stage, it is possible to orient the last cell in the same way as you would orient 4c pieces in 3<sup>4</sup>: using RKT to set up OCLL cases, and then using RKT to perform those algorithms. However, in 2<sup>4</sup>, because there is no need to preserve 2c and 3c pieces like in 3<sup>4</sup>, there is a lot more flexibility in how pieces can be oriented. Something that can be done is grouping four unoriented corners together in a 1x1x2x2 block; then all four of these pieces can be oriented with just a U OLL case (F R U R\u2019 U\u2019 F\u2019) with big moves. Something similar can be done with the T and L OLL shapes as well. This way of orienting pieces is useful because not only are more pieces oriented at a time, but they don\u2019t take as many moves to do compared to doing the algorithms in RKT. However, if there are less than 4 pieces to orient, then the process from there is largely the same as 3<sup>4</sup>. If there are 3 unoriented pieces, set the pieces into a Sune or Antisune OLL case, and then solve it with RKT. If there are 2 unoriented pieces, set the pieces into a U, T, or L OLL case, and then solve it with RKT. If there is 1 unoriented piece, you can do the monoflip algorithm from 3<sup>4</sup>, though for 2<sup>4</sup> specifically, a shorter algorithm is to do BR (R U Ozx2 R\u2019 U\u2019 Ozx2) BL</p>"},{"location":"methods/2x2x2x2/cell-by-cell/#b-permute-the-last-cell","title":"b. Permute the last cell","text":"<p>Permute the last cell like a 2<sup>3</sup> using RKT. You may run into RKT parity in this step, or you can avoid it by using certain last layer algorithms.</p>"},{"location":"methods/2x2x2x2/orozco/","title":"Orozco","text":"<p>Orozco is a method one can use to solve the 2x2x2x2 Blindfolded. It works by cycling 2 corners with one target corner using RKT and setup moves. This makes it relatively straightforward to execute, as one can usually find an intuitive way to swap the pieces.</p>"},{"location":"methods/2x2x2x2/orozco/#prerequisite-knowledge","title":"Prerequisite Knowledge","text":"<p>Before learning 2x2x2x2 Orozco, you should be familiar with the following: General Blind solving, 3x3x3 Orozco, General 4D solving, Commutator Construction, 4D Blind Solving Principles.</p>"},{"location":"methods/2x2x2x2/orozco/#setting-pieces-up","title":"Setting Pieces Up","text":"<p>Use whichever buffer and helper you find best, but a common combination is IUFR and IUBR. To make the swap easier, set the target piece up to the I cell, ideally in a way that makes an RKT 8 move commutator possible.</p>"},{"location":"methods/2x2x2x2/orozco/#swapping-pieces","title":"Swapping Pieces","text":"<p>To swap pieces, simply do an RKT commutator of those pieces. </p>"},{"location":"methods/2x2x2x2/orozco/#optimizations","title":"Optimizations","text":"<p>If a cycle break is necessary, find the helper buffer piece and swap to that. This ensures that that piece won\u2019t need to be twisted at the end of the solve. As previously mentioned, set pieces up so that an RKT 8 move commutator is possible.</p>"},{"location":"methods/2x2x2x2-physical/grant/","title":"Grant\u2019s OBC Method for physical 2x2x2x2","text":"<p>Grant\u2019s OBC Method uses only 3 gyros, making it much faster than Rowan\u2019s OBC Method. It works by secretly setting up to an H OCLL case while orienting both cells.</p>"},{"location":"methods/2x2x2x2-physical/grant/#steps","title":"Steps","text":""},{"location":"methods/2x2x2x2-physical/grant/#inspection","title":"Inspection","text":"<p>Before starting the solve, inspect the puzzle for an opposite colour pair that you can easily get exactly 8 stickers from that pair to be on the y-axis. They can be in any spot, as long as they are pointing up or down.</p>"},{"location":"methods/2x2x2x2-physical/grant/#getting-8-oriented-to-y-axis-then-gyro","title":"Getting 8 Oriented to Y-axis, then gyro","text":"<p>This is done in just a few simple moves, and should be fully planned during inspection for speedsolving. This step is very difficult to get used to, but gets easier over time. Once it looks like the image above, perform the gyro algorithm such that those 8 stickers end up on the x-axis (the \u201cpipped\u201d spots).</p>"},{"location":"methods/2x2x2x2-physical/grant/#orient-the-remaining-8-to-y-axis","title":"Orient the remaining 8 to y-axis","text":"<p>Now that 8 corners have been oriented, you can do any moves (besides a gyro), and not affect their orientation. Pair up the remaining 8 so that they are all on the same cell, and oriented to the y-axis.</p>"},{"location":"methods/2x2x2x2-physical/grant/#finish-orientation","title":"Finish orientation","text":"<p>Rotate the cell with the pieces you just paired up to the w-axis (facing in/out). Now perform the gyro algorithm, and cancel into the 5 move H OCLL case, and then gyro again.</p>"},{"location":"methods/2x2x2x2-physical/grcl/","title":"GRCL Method","text":"<p>The Grant Rowan Connor Luna method, or GRCL (pronounced \u201cgurkle\u201d) is a combination of the best parts of several methods, including Grant\u2019s OBC method, Rowan\u2019s OBC method, Luna\u2019s cell blockbuilding technique, and Connor Lindsay\u2019s P4L algorithms. The name GRCL was proposed by Hypercubers Discord member Jasper on July 18 2022.</p>"},{"location":"methods/2x2x2x2-physical/grcl/#steps","title":"Steps","text":"<ul> <li>Orient Both Cells using either Grant\u2019s method or Rowan\u2019s method (whatever looks better in that particular scramble)</li> <li>Separate the oriented colours of both cells while orienting 2 layers on those cells by holding the puzzle vertically and using Luna\u2019s method</li> <li>Permute both layers of both cells using Rowan\u2019s updated version of Connor\u2019s P4L algorithms</li> </ul>"},{"location":"methods/2x2x2x2-physical/luna/","title":"Luna\u2019s Method for 2x2x2x2","text":"<p>A method that Luna developed in 2017-18 making heavy use of an IU move sequence.</p>"},{"location":"methods/2x2x2x2-physical/luna/#steps","title":"Steps","text":"<ul> <li>Orient the D cell with opposite colours</li> <li>Orient the U cell making use of the IU move</li> <li>Permute a single cell via blockbuilding</li> <li>Permute the last cell using RKT</li> </ul>"},{"location":"methods/2x2x2x2-physical/luna/#resources","title":"Resources","text":"<ul> <li>Luna\u2019s video</li> </ul>"},{"location":"methods/2x2x2x2-physical/p4l/","title":"P4L","text":""},{"location":"methods/2x2x2x2-physical/p4l/#history","title":"History","text":"<p>PBLBC/P4L/PAL is an advanced algorithm set for speedsolving Melinda\u2019s Physical 2x2x2x2. It is used after orientation and separation of 2 opposite cells, followed by (or simultaneously) orienting both layers on both of those cells. This leaves you with two 2x2x2 PBL cases, one on each cell. The original idea for this came from Connor Lindsay, who created most of the algorithms in his algorithm sheet.</p> <p>Two years later, Rowan tried optimizing the algorithms, and compiled them in a new algorithm sheet.</p>"},{"location":"methods/2x2x2x2-physical/p4l/#algorithms","title":"Algorithms","text":"<p>Each layer can be in 3 different permutations: solved, adjacent swap, and opposite swap. This gives us 81 cases, but some of these are impossible. Cases can also be rearranged via Case Manipulation, further reducing the number of cases to 29. Practically however, only a few algorithms are used because all the bad cases are really slow to execute.</p>"},{"location":"methods/2x2x2x2-physical/p4l/#big-3d-cases","title":"Big 3D Cases","text":"<p>Big 3D cases are the cases where you have 2 pairs of the same layers, such as OOAA. In such a case, you can just use the normal 2<sup>3</sup> PBL algorithm for that case (but it must be a version with the moveset <code>&lt;R2,L2,F2,B2,U*,D*&gt;</code> only, due to the restrictions in turning the puzzle).</p>"},{"location":"methods/2x2x2x2-physical/rowan/","title":"Rowan\u2019s OBC Method for 2x2x2x2","text":"<p>Rowan developed this method for Orienting Both Cells while trying to solve the physical 2x2x2x2 for the first time in a YouTube video.</p>"},{"location":"methods/2x2x2x2-physical/rowan/#steps","title":"Steps","text":""},{"location":"methods/2x2x2x2-physical/rowan/#inspection","title":"Inspection","text":"<p>Before starting the solve, inspect the puzzle for an opposite colour pair that has 4 or fewer stickers oriented to the Left/Right axis (x-axis). They can be made of any colour in the colour pair, and can be in any spot on the puzzle.</p> 4 red/orange corners oriented to L/R"},{"location":"methods/2x2x2x2-physical/rowan/#getting-8-oriented-to-y-axis","title":"Getting 8 Oriented to Y-axis","text":"<p>Hold the puzzle vertically, and use block building to orient 8 pieces on a cell to the y-axis using the same colour pair that has 4 or less from inspection. This step is intuitive and does not require any RKT.</p> 8 red/orange corners oriented to U/D"},{"location":"methods/2x2x2x2-physical/rowan/#getting-12-oriented-to-y-axis","title":"Getting 12 Oriented to Y-axis","text":"<p>Now use RKT to orient a layer of 4 stickers on the other cell, leaving you with a \u201clast layer\u201d of 4 unoriented pieces on one of the cells.</p> 12 red/orange corners oriented to U/D"},{"location":"methods/2x2x2x2-physical/rowan/#fixing-the-last-layer","title":"Fixing the Last Layer","text":"<p>Gyro the puzzle such that the 12 pieces that were oriented end up on the x-axis. Now you should have 4 (or fewer) stickers from that colour pair oriented in other directions besides the x-axis. All you need to do is use RKT to make it into a layer that looks like a possible OCLL case, not worrying about messing up the other 12 corners.</p> H OCLL case set up on LU <p>From here, gyro back. Now you will have a normal OCLL case that you can solve using RKT. After doing that algorithm, you should have all 16 corners oriented to the y-axis. Finally, you just gyro to put them all on the x-axis, and OBC is solved.</p>"},{"location":"methods/2x2x2x2-physical/rowan/#analysis","title":"Analysis","text":"<p>This technique takes more moves than other known OBC methods, and it uses up to 4 gyros. Besides the skip case where everything is already oriented, the best possible case for this technique uses 3 gyros, making it slower than other techniques. It also requires knowing the OCLL algorithms, which other techniques don\u2019t.</p>"},{"location":"methods/3x3x3x3/3block/","title":"3-Block","text":"<p>3-Block is a method designed for quickly speedsolving the 3<sup>4</sup>. Many speedsolving world records have been set using this method. It was primarily invented by Luna and HactarCE, and has been described as \u201cZZ without EO\u201d. 3-Block is most analogous to the 3<sup>3</sup> method FreeFOP (which omits a single cross piece in order to pair pieces easier). Compared to 4D CFOP, 3-Block uses ~20% fewer moves.</p> <p>Prerequisites</p> <ul> <li>Knowledge of how the 3<sup>4</sup> moves</li> <li>Notation</li> <li>RKT</li> <li>3D CFOP with 2-look OLL &amp; PLL</li> </ul> HSC Piece filters (3<sup>4</sup>) Hactar\u2019s filters (pink cross)Rowan\u2019s filters (white cross)Rowan\u2019s new filters (pink cross)Triplets instead of pairsJosie\u2019s filters (pink cross) (hides more) <pre><code>- preset_name: 4-cross\n  visible_pieces: 000200080a5010284280\n- preset_name: Mid (back)\n  visible_pieces: 000200084a5090294284\n- preset_name: Mid\n  visible_pieces: 000200094a5294294294\n- preset_name: Left (cross)\n  visible_pieces: 000200094a5294296294\n- preset_name: Left\n  visible_pieces: 0002000d4a5a943962d4\n- preset_name: BL-a\n  visible_pieces: 0002000d4a7a943963d4\n- preset_name: BL\n  visible_pieces: 0002000d6a7ad4b963d6\n- preset_name: FL-a\n  visible_pieces: 0002000d6b7ad4bd63d6\n- preset_name: FL\n  visible_pieces: 0002008d6b7bd6bd6bd6\n- preset_name: Right (cross)\n  visible_pieces: 0002008d6b7bd6bdebd6\n- preset_name: Right\n  visible_pieces: 0002008d7b7bf6fdebd7\n- preset_name: BR-a\n  visible_pieces: 0002008d7bfbf6fdefd7\n- preset_name: BR\n  visible_pieces: 0002008dfbfbf7ffefdf\n- preset_name: FR-a\n  visible_pieces: 0002008dfffbf7ffffdf\n- preset_name: FR\n  visible_pieces: 0002008fffffffffffff\n- preset_name: OLC 2c\n  visible_pieces: \"01471400000000000000\"\n- preset_name: OLC 3c\n  visible_pieces: aaa8aa20000000000000\n- preset_name: OLC 4c\n  visible_pieces: \"54104150000000000000\"\n- preset_name: OLC\n  visible_pieces: ffffff70000000000000\n- preset_name: PLC 2c\n  visible_pieces: 014714080a5010004000\n- preset_name: PLC cross\n  visible_pieces: \"01479e20000000000000\"\n- preset_name: PLC F2L\n  visible_pieces: 01efff70000000000000\n- preset_name: PLC\n  visible_pieces: ffffff70000000000000\n- preset_name: End\n  visible_pieces: ffffffffffffffffffff\n</code></pre> <pre><code>- preset_name: 4/6Cross\n  visible_pieces: 000204080a5830004080\n- preset_name: Middle 1\n  visible_pieces: 00070e080a5830004080\n- preset_name: Middle 2\n  visible_pieces: 00070e080a583000e0c1\n- preset_name: Left Block 1\n  visible_pieces: 00478e080a5a3008e0d1\n- preset_name: Left Block 2\n  visible_pieces: 00478e080e5e3008e0d1\n- preset_name: Left Block 3\n  visible_pieces: 00c78f080e5e3008e0d1\n- preset_name: Left Block 4\n  visible_pieces: 00c78f080e5e3008f0f1\n- preset_name: Left Block 5\n  visible_pieces: 00c78f080f5f3008f0f1\n- preset_name: Left Block 6\n  visible_pieces: 00e7cf080f5f3008f0f1\n- preset_name: Left Block 7\n  visible_pieces: 00e7cf080f5f300cf8f1\n- preset_name: Right Block 1\n  visible_pieces: 00e7df280f5fb00cfaf5\n- preset_name: Right Block 2\n  visible_pieces: 00e7df280fdfb10cfaf5\n- preset_name: Right Block 3\n  visible_pieces: 00e7ff680fdfb10cfaf5\n- preset_name: Right Block 4\n  visible_pieces: 00e7ff680fdfb10cfefd\n- preset_name: Right Block 5\n  visible_pieces: 00e7ff680ffff10cfefd\n- preset_name: Right Block 6\n  visible_pieces: 00efff780ffff10cfefd\n- preset_name: Right Block 7\n  visible_pieces: 00efff780ffff10cffff\n- preset_name: 2c OLC\n  visible_pieces: 01efff7d5ffff12cffff\n- preset_name: 3c OLC\n  visible_pieces: abeffffffffff57dffff\n- preset_name: 4c OLC\n  visible_pieces: 54ffff700ffffb8effff\n- preset_name: 2c PLC\n  visible_pieces: 01efff7d5ffff12cffff\n- preset_name: RKT PLC Cross\n  visible_pieces: ab00000d500000204000\n- preset_name: RKT PLC F2L\n  visible_pieces: ff10008ff00000204000\n- preset_name: RKT PLC LL\n  visible_pieces: ff10008ff0000ef30000\n</code></pre> <pre><code>- preset_name: 4-cross\n  visible_pieces: 000200080a5010284280\n- preset_name: odM\n  visible_pieces: 000200094a5014294280\n- preset_name: ouM\n  visible_pieces: 000200094a5294294294\n- preset_name: OLES\n  visible_pieces: 000200094a5294296294\n- preset_name: oLS\n  visible_pieces: 0002000d4a5a943962d4\n- preset_name: oBLE\n  visible_pieces: 0002000d4a7a943963d4\n- preset_name: oDBL\n  visible_pieces: 0002000d6a7a94b963d4\n- preset_name: oUBL\n  visible_pieces: 0002000d6a7ad4b963d6\n- preset_name: oFLE\n  visible_pieces: 0002000d6b7ad4bd63d6\n- preset_name: oDFL\n  visible_pieces: 0002008d6b7ad6bd63d6\n- preset_name: oUFL\n  visible_pieces: 0002008d6b7bd6bd6bd6\n- preset_name: ORES\n  visible_pieces: 0002008d6b7bd6bdebd6\n- preset_name: oRS\n  visible_pieces: 0002008d7b7bf6fdebd7\n- preset_name: oBRE\n  visible_pieces: 0002008d7bfbf6fdefd7\n- preset_name: oDBR\n  visible_pieces: 0002008dfbfbf6ffefd7\n- preset_name: oUBR\n  visible_pieces: 0002008dfbfbf7ffefdf\n- preset_name: oFRE\n  visible_pieces: 0002008dfffbf7ffffdf\n- preset_name: oDFR\n  visible_pieces: 0002008ffffbffffffdf\n- preset_name: oUFR\n  visible_pieces: 0002008fffffffffffff\n- preset_name: OLC 2c\n  visible_pieces: \"01471400000000000000\"\n- preset_name: OLC 3c\n  visible_pieces: aaa8aa20000000000000\n- preset_name: OLC 4c\n  visible_pieces: \"54104150000000000000\"\n- preset_name: PLC 2c\n  visible_pieces: 014714080a5010004000\n- preset_name: PLC cross\n  visible_pieces: \"01479e20000000000000\"\n- preset_name: PLC F2L\n  visible_pieces: 01efff70000000000000\n- preset_name: PLC\n  visible_pieces: ffffff70000000000000\n- preset_name: End\n  visible_pieces: ffffffffffffffffffff\n</code></pre> <pre><code>- preset_name: 4-cross\n  visible_pieces: 000200080a5010284280\n- preset_name: odM\n  visible_pieces: 000200094a5014294280\n- preset_name: ouM\n  visible_pieces: 000200094a5294294294\n- preset_name: OLES\n  visible_pieces: 000200094a5294296294\n- preset_name: oLS\n  visible_pieces: 0002000d4a5a943962d4\n- preset_name: triplet 1\n  visible_pieces: 0002000d6a7ad43962d4\n- preset_name: triplet 2\n  visible_pieces: 0002000d6a7ad4b963d6\n- preset_name: triplet 3\n  visible_pieces: 0002008d6b7bd4b963d6\n- preset_name: triplet 4\n  visible_pieces: 0002008d6b7bd6bd6bd6\n- preset_name: ORES\n  visible_pieces: 0002008d6b7bd6bdebd6\n- preset_name: oRS\n  visible_pieces: 0002008d7b7bf6fdebd7\n- preset_name: triplet 5\n  visible_pieces: 0002008dfbfbf7fdebd7\n- preset_name: triplet 6\n  visible_pieces: 0002008dfbfbf7ffefdf\n- preset_name: triplet 7\n  visible_pieces: 0002008ffffff7ffefdf\n- preset_name: triplet 8\n  visible_pieces: 0002008fffffffffffff\n- preset_name: OLC 2c\n  visible_pieces: \"01471400000000000000\"\n- preset_name: OLC 3c\n  visible_pieces: aaa8aa20000000000000\n- preset_name: OLC 4c\n  visible_pieces: \"54104150000000000000\"\n- preset_name: PLC 2c\n  visible_pieces: 014714080a5010004000\n- preset_name: PLC cross\n  visible_pieces: \"01479e20000000000000\"\n- preset_name: PLC F2L\n  visible_pieces: 01efff70000000000000\n- preset_name: PLC\n  visible_pieces: ffffff70000000000000\n- preset_name: End\n  visible_pieces: ffffffffffffffffffff\n</code></pre> <pre><code>- preset_name: centers\nvisible_pieces: \"000200080a5010004000\"\n- preset_name: cross\nvisible_pieces: \"000200080a5010284280\"\n- preset_name: mid back\nvisible_pieces: \"00000008424090294284\"\n- preset_name: mid front\nvisible_pieces: \"00000009424294294294\"\n- preset_name: left cross\nvisible_pieces: \"000000094a4294296294\"\n- preset_name: left mid\nvisible_pieces: \"00000004080800102040\"\n- preset_name: left back a\nvisible_pieces: \"00000004082800102140\"\n- preset_name: left back b\nvisible_pieces: \"00000004282840902142\"\n- preset_name: left front a\nvisible_pieces: \"00000004292840942142\"\n- preset_name: left front b\nvisible_pieces: \"00000084292942942942\"\n- preset_name: right cross\nvisible_pieces: \"0000008429394294a942\"\n- preset_name: right mid\nvisible_pieces: \"00000000101020408001\"\n- preset_name: right back a\nvisible_pieces: \"00000000109020408401\"\n- preset_name: right back b\nvisible_pieces: \"00000000909021428409\"\n- preset_name: right front a\nvisible_pieces: \"00000000949021429409\"\n- preset_name: right front b\nvisible_pieces: \"00000002949429429429\"\n- preset_name: olc 2c\nvisible_pieces: \"01471400000000000000\"\n- preset_name: olc 3c\nvisible_pieces: \"aaa8aa20000000000000\"\n- preset_name: olc 4c\nvisible_pieces: \"54104150000000000000\"\n- preset_name: plc 2c\nvisible_pieces: \"014714080a5010004000\"\n- preset_name: plc cross\nvisible_pieces: \"01459e20000000000000\"\n- preset_name: plc f2l\nvisible_pieces: \"00efff70000000000000\"\n- preset_name: plc ll\nvisible_pieces: \"ffffff70000000000000\"\n- preset_name: end\nvisible_pieces: \"ffffffffffffffffffff\"\n</code></pre> HSC Piece filters (4<sup>4</sup>, 5<sup>4</sup>, 6<sup>4</sup>, 7<sup>4</sup>) <p>These are all Hactar\u2019s filters, which use pink cross.</p> 4<sup>4</sup>5<sup>4</sup>6<sup>4</sup>7<sup>4</sup> <pre><code>- preset_name: U center\n  visible_pieces: \"000000000000000000000000000660000000000006600000000000000000\"\n- preset_name: D center\n  visible_pieces: \"000000000000000006600000000660066000000006600000000000000000\"\n- preset_name: B center\n  visible_pieces: \"000000000000000006600060060660066000600606600000000000000000\"\n- preset_name: F center\n  visible_pieces: \"000000000000000006606066060660066060660606600000000000000000\"\n- preset_name: First 5 centers\n  visible_pieces: \"000000000000000006606066060660066060660606600000066006600000\"\n- preset_name: D cross ridge\n  visible_pieces: \"000000000000000006606066060660066060660606600660066006600000\"\n- preset_name: B cross ridge\n  visible_pieces: \"000000000000000006606066060660066060660606600660066606660000\"\n- preset_name: U cross ridge\n  visible_pieces: \"000000000000000006606066060660066060660606600660066606660660\"\n- preset_name: 4-cross\n  visible_pieces: \"000000000000000006606066060660066060660606600660666666660660\"\n- preset_name: Belt 1/4\n  visible_pieces: \"000000000000000006666066060660066660660606600666666666660660\"\n- preset_name: Belt 2/4\n  visible_pieces: \"000000000000000006666066060666066660660606660666666666660666\"\n- preset_name: Belt 3/4\n  visible_pieces: \"000000000000000066666066060666666660660606666666666666660666\"\n- preset_name: Belt\n  visible_pieces: \"000000000000000066666066066666666660660666666666666666666666\"\n- preset_name: L center\n  visible_pieces: \"000000000000000066666566566666666665665666666666666666666666\"\n- preset_name: L 1/3\n  visible_pieces: \"000000000000000066666566566666666665665666666666677667766666\"\n- preset_name: L 2/3\n  visible_pieces: \"000000000000000067766566566666677665665666666776677667766666\"\n- preset_name: L 3/3\n  visible_pieces: \"000000000000000067766566566776677665665667766776677667766776\"\n- preset_name: BL 1/3\n  visible_pieces: \"000000000000000067766576576776677665765767766776677767776776\"\n- preset_name: BL 2/3\n  visible_pieces: \"000000000000000067776576576776677765765767766777677767776776\"\n- preset_name: BL 3/3\n  visible_pieces: \"000000000000000067776576576777677765765767776777677767776777\"\n- preset_name: FL 1/3\n  visible_pieces: \"000000000000000067777577576777677775775767776777777777776777\"\n- preset_name: FL 2/3\n  visible_pieces: \"000000000000000077777577576777777775775767777777777777776777\"\n- preset_name: FL 3/3\n  visible_pieces: \"000000000000000077777577577777777775775777777777777777777777\"\n- preset_name: R center\n  visible_pieces: 000000000000000077777f77f7777777777f77f777777777777777777777\n- preset_name: R 1/3\n  visible_pieces: 000000000000000077777f77f7777777777f77f7777777777ff77ff77777\n- preset_name: R 2/3\n  visible_pieces: 00000000000000007ff77f77f777777ff77f77f777777ff77ff77ff77777\n- preset_name: R 3/3\n  visible_pieces: 00000000000000007ff77f77f77ff77ff77f77f77ff77ff77ff77ff77ff7\n- preset_name: BR 1/3\n  visible_pieces: 00000000000000007ff77ff7ff7ff77ff77ff7ff7ff77ff77fff7fff7ff7\n- preset_name: BR 2/3\n  visible_pieces: 00000000000000007fff7ff7ff7ff77fff7ff7ff7ff77fff7fff7fff7ff7\n- preset_name: BR 3/3\n  visible_pieces: 00000000000000007fff7ff7ff7fff7fff7ff7ff7fff7fff7fff7fff7fff\n- preset_name: FR 1/3\n  visible_pieces: 00000000000000007fffffffff7fff7fffffffff7fff7fffffffffff7fff\n- preset_name: FR 2/3\n  visible_pieces: 0000000000000000ffffffffff7fffffffffffff7fffffffffffffff7fff\n- preset_name: FR 3/3\n  visible_pieces: 0000000000000000ffffffffffffffffffffffffffffffffffffffffffff\n- preset_name: RLC 1/6\n  visible_pieces: \"000006600660066000000000000000000000000000000000000000000000\"\n- preset_name: RLC 2/6\n  visible_pieces: \"000006660666066000000000000000000000000000000000000000000000\"\n- preset_name: RLC 3/6\n  visible_pieces: \"066006660666066000000000000000000000000000000000000000000000\"\n- preset_name: RLC 4/6\n  visible_pieces: \"066007760776066000000000000000000000000000000000000000000000\"\n- preset_name: RLC 6/6\n  visible_pieces: 06606ff66ff6066000000000000000000000000000000000000000000000\n- preset_name: ELC 2/12\n  visible_pieces: \"000600000000000600000000000000000000000000000000000000000000\"\n- preset_name: ELC 4/12\n  visible_pieces: \"600600000000600600000000000000000000000000000000000000000000\"\n- preset_name: ELC 6/12\n  visible_pieces: \"611600000000611600000000000000000000000000000000000000000000\"\n- preset_name: ELC 8/12\n  visible_pieces: \"611610011001611600000000000000000000000000000000000000000000\"\n- preset_name: ELC 10/12\n  visible_pieces: \"699610011001699600000000000000000000000000000000000000000000\"\n- preset_name: ELC 12/12\n  visible_pieces: \"699690099009699600000000000000000000000000000000000000000000\"\n- preset_name: OLC\n  visible_pieces: ffffffffffffffff00000000000000000000000000000000000000000000\n- preset_name: PLC 2c\n  visible_pieces: 06606ff66ff6066006606f66f6066006606f66f606600000066006600000\n- preset_name: PLC cross\n  visible_pieces: 06606ff66ff66ff600000000000000000000000000000000000000000000\n- preset_name: PLC F2L\n  visible_pieces: 0660ffffffffffff00000000000000000000000000000000000000000000\n- preset_name: PLC\n  visible_pieces: ffffffffffffffff00000000000000000000000000000000000000000000\n- preset_name: Done\n  visible_pieces: ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\n</code></pre> <pre><code>- preset_name: U center\n  visible_pieces: 0000000000000004000000000000000000000000000000000007ec100080000000481200000c9370000000000000000000007ec100000000000000002000000000000000\n- preset_name: D center\n  visible_pieces: 00000000000000040000000000000000837e0000000000000007ec100ec9300000481200000c93700837e0000000000000007ec100000000000000002000000000000000\n- preset_name: B center\n  visible_pieces: 00000000000000040000000000000000837e0000c100c100c107ec100ec9300007481700070c93700837e0000c100c100c107ec100000000000000002000000000000000\n- preset_name: F center\n  visible_pieces: 00000000000000040000000000000000837e0830c930c930c107ec100ec930e007e817e0070c93700837e0830c930c930c107ec100000000000000002000000000000000\n- preset_name: O center\n  visible_pieces: 00000000000000040000000000000000837e0830c930c930c107ec100ec930e007e817e0070c93700837e0830c930c930c107ec100000000c93700837e0007ec10000000\n- preset_name: 4-cross D center\n  visible_pieces: 00000000000000040000000000000000837e0830c930c930c107ec100ec930e007e817e0070c93700837e0830c930c930c107ec100080000c93700837e0007ec10000000\n- preset_name: 4-cross D\n  visible_pieces: 00000000000000040000000000000000837e0830c930c930c107ec100ec930e007e817e0070c93700837e0830c930c930c107ec100ec9300c93700837e0007ec10000000\n- preset_name: 4-cross B center\n  visible_pieces: 00000000000000040000000000000000837e0830c930c930c107ec100ec930e007e817e0070c93700837e0830c930c930c107ec100ec9300c93700837e8007ec10000000\n- preset_name: 4-cross B\n  visible_pieces: 00000000000000040000000000000000837e0830c930c930c107ec100ec930e007e817e0070c93700837e0830c930c930c107ec100ec9300c937e0837ec107ec93000000\n- preset_name: 4-cross U center\n  visible_pieces: 00000000000000040000000000000000837e0830c930c930c107ec100ec930e007e817e0070c93700837e0830c930c930c107ec100ec9300c937e0837ec107ec93008000\n- preset_name: 4-cross U\n  visible_pieces: 00000000000000040000000000000000837e0830c930c930c107ec100ec930e007e817e0070c93700837e0830c930c930c107ec100ec9300c937e0837ec107ec930ec930\n- preset_name: 4-cross F center\n  visible_pieces: 00000000000000040000000000000000837e0830c930c930c107ec100ec930e007e817e0070c93700837e0830c930c930c107ec100ec9300c937e8837ec107ec930ec930\n- preset_name: 4-cross F\n  visible_pieces: 00000000000000040000000000000000837e0830c930c930c107ec100ec930e007e817e0070c93700837e0830c930c930c107ec100ec930ec937ec937ec937ec930ec930\n- preset_name: Mid DB ridge center\n  visible_pieces: 00000000000000040000000000000000837e0830c930c930c107ec100ec932e007e817e0070c93700837e0830c930c930c107ec100ec930ec937ec937ec937ec930ec930\n- preset_name: Mid DB ridge\n  visible_pieces: 00000000000000040000000000000000837ec930c930c930c107ec100ec937e007e817e0070c93700837ec930c930c930c107ec100ec930ec937ec937ec937ec930ec930\n- preset_name: Mid DB\n  visible_pieces: 00000000000000040000000000000000837ec930c930c930c107ec100ec937e007e817e0070c93700837ec930c930c930c107ec100ec937ec937ec937ec937ec930ec930\n- preset_name: Mid UB ridge center\n  visible_pieces: 00000000000000040000000000000000837ec930c930c930c107ec100ec937e007e817e0070c93740837ec930c930c930c107ec100ec937ec937ec937ec937ec930ec930\n- preset_name: Mid UB ridge\n  visible_pieces: 00000000000000040000000000000000837ec930c930c930c107ec930ec937e007e817e0070c937e0837ec930c930c930c107ec930ec937ec937ec937ec937ec930ec930\n- preset_name: Mid UB\n  visible_pieces: 00000000000000040000000000000000837ec930c930c930c107ec930ec937e007e817e0070c937e0837ec930c930c930c107ec930ec937ec937ec937ec937ec930ec937\n- preset_name: Mid DF ridge center\n  visible_pieces: 00000000000000040000000000000000837ec930c930c930c107ec932ec937e007e817e0070c937e0837ec930c930c930c107ec930ec937ec937ec937ec937ec930ec937\n- preset_name: Mid DF ridge\n  visible_pieces: 0000000000000004000000000000000c937ec930c930c930c107ec937ec937e007e817e0070c937ec937ec930c930c930c107ec930ec937ec937ec937ec937ec930ec937\n- preset_name: Mid DF\n  visible_pieces: 0000000000000004000000000000000c937ec930c930c930c107ec937ec937e007e817e0070c937ec937ec930c930c930c107ec937ec937ec937ec937ec937ec930ec937\n- preset_name: Mid UF ridge center\n  visible_pieces: 0000000000000004000000000000000c937ec930c930c930c107ec937ec937e007e817e0074c937ec937ec930c930c930c107ec937ec937ec937ec937ec937ec930ec937\n- preset_name: Mid UF ridge\n  visible_pieces: 0000000000000004000000000000000c937ec930c930c930c937ec937ec937e007e817e007ec937ec937ec930c930c930c937ec937ec937ec937ec937ec937ec930ec937\n- preset_name: Mid UF\n  visible_pieces: 0000000000000004000000000000000c937ec930c930c930c937ec937ec937e007e817e007ec937ec937ec930c930c930c937ec937ec937ec937ec937ec937ec937ec937\n- preset_name: L center\n  visible_pieces: 0000000000000000000000000000000c937ec9bac9bac9bac937ec937ec937ea27ea27ea27ec937ec937ec9bac9bac9bac937ec937ec937ec937ec937ec937ec937ec937\n- preset_name: L cross ridge center\n  visible_pieces: 0000000000000000000000000000000c937ec9bac9bac9bac937ec937ec937ea27ea27ea27ec937ec937ec9bac9bac9bac937ec937ec937ec937ec9b7ec937ec937ec937\n- preset_name: L cross ridge\n  visible_pieces: 0000000000000000000000000000000c937ec9bac9bac9bac937ec937ec937ea27ea27ea27ec937ec937ec9bac9bac9bac937ec937ec937eedb7ecdb7fc9b7fe937ec937\n- preset_name: L D ridge center\n  visible_pieces: 0000000000000000000000000000000c937ec9bac9bac9bac937ec937ee937ea27ea27ea27ec937ec937ec9bac9bac9bac937ec937ec937eedb7ecdb7fc9b7fe937ec937\n- preset_name: L D ridge\n  visible_pieces: 0000000000000000000000000000000cdb7fc9bac9bac9bac937ec937fed37ea27ea27ea27ec937ecdb7fc9bac9bac9bac937ec937ec937eedb7ecdb7fc9b7fe937ec937\n- preset_name: L D\n  visible_pieces: 0000000000000000000000000000000cdb7fc9bac9bac9bac937ec937fed37ea27ea27ea27ec937ecdb7fc9bac9bac9bac937ec937fed37eedb7ecdb7fc9b7fe937ec937\n- preset_name: L U ridge center\n  visible_pieces: 0000000000000000000000000000000cdb7fc9bac9bac9bac937ec937fed37ea27ea27ea27ecd37ecdb7fc9bac9bac9bac937ec937fed37eedb7ecdb7fc9b7fe937ec937\n- preset_name: L U ridge\n  visible_pieces: 0000000000000000000000000000000cdb7fc9bac9bac9bac9b7fe937fed37ea27ea27ea27eedb7ecdb7fc9bac9bac9bac9b7fe937fed37eedb7ecdb7fc9b7fe937ec937\n- preset_name: L U\n  visible_pieces: 0000000000000000000000000000000cdb7fc9bac9bac9bac9b7fe937fed37ea27ea27ea27eedb7ecdb7fc9bac9bac9bac9b7fe937fed37eedb7ecdb7fc9b7fe937fed37\n- preset_name: L B ridge center\n  visible_pieces: 0000000000000000000000000000000cdb7fc9bac9bac9bac9b7fe937fed37ea27eaa7ea27eedb7ecdb7fc9bac9bac9bac9b7fe937fed37eedb7ecdb7fc9b7fe937fed37\n- preset_name: L B ridge\n  visible_pieces: 0000000000000000000000000000000cdb7fc9bae9bae9bae9b7fe937fed37eaa7eaa7eaa7eedb7ecdb7fc9bae9bae9bae9b7fe937fed37eedb7ecdb7fc9b7fe937fed37\n- preset_name: L B\n  visible_pieces: 0000000000000000000000000000000cdb7fc9bae9bae9bae9b7fe937fed37eaa7eaa7eaa7eedb7ecdb7fc9bae9bae9bae9b7fe937fed37eedb7fcdb7fe9b7fed37fed37\n- preset_name: L DB\n  visible_pieces: 0000000000000000000000000000000cdb7fe9bae9bae9bae9b7fe937fedb7eaa7eaa7eaa7eedb7ecdb7fe9bae9bae9bae9b7fe937fedb7eedb7fcdb7fe9b7fed37fed37\n- preset_name: L UB\n  visible_pieces: 0000000000000000000000000000000cdb7fe9bae9bae9bae9b7fed37fedb7eaa7eaa7eaa7eedb7fcdb7fe9bae9bae9bae9b7fed37fedb7eedb7fcdb7fe9b7fed37fedb7\n- preset_name: L F ridge center\n  visible_pieces: 0000000000000000000000000000000cdb7fe9bae9bae9bae9b7fed37fedb7eaa7faa7eaa7eedb7fcdb7fe9bae9bae9bae9b7fed37fedb7eedb7fcdb7fe9b7fed37fedb7\n- preset_name: L F ridge\n  visible_pieces: 0000000000000000000000000000000cdb7fedbaedbaedbae9b7fed37fedb7faa7faa7faa7eedb7fcdb7fedbaedbaedbae9b7fed37fedb7eedb7fcdb7fe9b7fed37fedb7\n- preset_name: L F\n  visible_pieces: 0000000000000000000000000000000cdb7fedbaedbaedbae9b7fed37fedb7faa7faa7faa7eedb7fcdb7fedbaedbaedbae9b7fed37fedb7fedb7fedb7fedb7fed37fedb7\n- preset_name: L DF\n  visible_pieces: 0000000000000000000000000000000edb7fedbaedbaedbae9b7fedb7fedb7faa7faa7faa7eedb7fedb7fedbaedbaedbae9b7fedb7fedb7fedb7fedb7fedb7fed37fedb7\n- preset_name: L UF\n  visible_pieces: 0000000000000000000000000000000edb7fedbaedbaedbaedb7fedb7fedb7faa7faa7faa7fedb7fedb7fedbaedbaedbaedb7fedb7fedb7fedb7fedb7fedb7fedb7fedb7\n- preset_name: R center\n  visible_pieces: 0000000000000000000000000000000edb7fedbffdbffdbffdb7fedb7fedb7fef7fef7fef7fedb7fedb7fedbffdbffdbffdb7fedb7fedb7fedb7fedb7fedb7fedb7fedb7\n- preset_name: R cross ridge center\n  visible_pieces: 0000000000000000000000000000000edb7fedbffdbffdbffdb7fedb7fedb7fef7fef7fef7fedb7fedb7fedbffdbffdbffdb7fedb7fedb7fedb7fedbffedb7fedb7fedb7\n- preset_name: R cross ridge\n  visible_pieces: 0000000000000000000000000000000edb7fedbffdbffdbffdb7fedb7fedb7fef7fef7fef7fedb7fedb7fedbffdbffdbffdb7fedb7fedb7feffffedffffdbffffb7fedb7\n- preset_name: R D ridge center\n  visible_pieces: 0000000000000000000000000000000edb7fedbffdbffdbffdb7fedb7fefb7fef7fef7fef7fedb7fedb7fedbffdbffdbffdb7fedb7fedb7feffffedffffdbffffb7fedb7\n- preset_name: R D ridge\n  visible_pieces: 0000000000000000000000000000000edffffdbffdbffdbffdb7fedb7ffff7fef7fef7fef7fedb7fedffffdbffdbffdbffdb7fedb7fedb7feffffedffffdbffffb7fedb7\n- preset_name: R D\n  visible_pieces: 0000000000000000000000000000000edffffdbffdbffdbffdb7fedb7ffff7fef7fef7fef7fedb7fedffffdbffdbffdbffdb7fedb7ffff7feffffedffffdbffffb7fedb7\n- preset_name: R U ridge center\n  visible_pieces: 0000000000000000000000000000000edffffdbffdbffdbffdb7fedb7ffff7fef7fef7fef7fedf7fedffffdbffdbffdbffdb7fedb7ffff7feffffedffffdbffffb7fedb7\n- preset_name: R U ridge\n  visible_pieces: 0000000000000000000000000000000edffffdbffdbffdbffdbffffb7ffff7fef7fef7fef7feffffedffffdbffdbffdbffdbffffb7ffff7feffffedffffdbffffb7fedb7\n- preset_name: R U\n  visible_pieces: 0000000000000000000000000000000edffffdbffdbffdbffdbffffb7ffff7fef7fef7fef7feffffedffffdbffdbffdbffdbffffb7ffff7feffffedffffdbffffb7ffff7\n- preset_name: R B ridge center\n  visible_pieces: 0000000000000000000000000000000edffffdbffdbffdbffdbffffb7ffff7fef7fefffef7feffffedffffdbffdbffdbffdbffffb7ffff7feffffedffffdbffffb7ffff7\n- preset_name: R B ridge\n  visible_pieces: 0000000000000000000000000000000edffffdbfffbfffbfffbffffb7ffff7fefffefffefffeffffedffffdbfffbfffbfffbffffb7ffff7feffffedffffdbffffb7ffff7\n- preset_name: R B\n  visible_pieces: 0000000000000000000000000000000edffffdbfffbfffbfffbffffb7ffff7fefffefffefffeffffedffffdbfffbfffbfffbffffb7ffff7fefffffdfffffbfffff7ffff7\n- preset_name: R DB\n  visible_pieces: 0000000000000000000000000000000edfffffbfffbfffbfffbffffb7ffffffefffefffefffeffffedfffffbfffbfffbfffbffffb7ffffffefffffdfffffbfffff7ffff7\n- preset_name: R UB\n  visible_pieces: 0000000000000000000000000000000edfffffbfffbfffbfffbfffff7ffffffefffefffefffefffffdfffffbfffbfffbfffbfffff7ffffffefffffdfffffbfffff7fffff\n- preset_name: R F ridge center\n  visible_pieces: 0000000000000000000000000000000edfffffbfffbfffbfffbfffff7ffffffefffffffefffefffffdfffffbfffbfffbfffbfffff7ffffffefffffdfffffbfffff7fffff\n- preset_name: R F ridge\n  visible_pieces: 0000000000000000000000000000000edfffffffffffffffffbfffff7ffffffffffffffffffefffffdfffffffffffffffffbfffff7ffffffefffffdfffffbfffff7fffff\n- preset_name: R F\n  visible_pieces: 0000000000000000000000000000000edfffffffffffffffffbfffff7ffffffffffffffffffefffffdfffffffffffffffffbfffff7ffffffffffffffffffffffff7fffff\n- preset_name: R DF\n  visible_pieces: 0000000000000000000000000000000effffffffffffffffffbffffffffffffffffffffffffefffffffffffffffffffffffbffffffffffffffffffffffffffffff7fffff\n- preset_name: R UF\n  visible_pieces: 0000000000000000000000000000000effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\n- preset_name: 2c OLC\n  visible_pieces: 000100000200012f901008000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n- preset_name: RLC 1/6\n  visible_pieces: 00000000000000000000000000c9370000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n- preset_name: RLC 2/6\n  visible_pieces: 0c937000000000000000000000c9370000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n- preset_name: RLC 3/6\n  visible_pieces: 0c937000000c10000830000070c9370000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n- preset_name: RLC 4/6\n  visible_pieces: 0c9370c1000c93000837000070c9370000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n- preset_name: RLC 6/6\n  visible_pieces: 0c9370c5c81d9b813a37136470c9370000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n- preset_name: ELC 1/12\n  visible_pieces: \"0000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\"\n- preset_name: ELC 2/12\n  visible_pieces: 0000000000000000000000000e0000e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n- preset_name: ELC 3/12\n  visible_pieces: 0000000000000000000000000e0248e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n- preset_name: ELC 4/12\n  visible_pieces: 0000000000000000000000000e26c8e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n- preset_name: ELC 5/12\n  visible_pieces: e000000000000000000000000e26c8e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n- preset_name: ELC 6/12\n  visible_pieces: e0000e0000000000000000000e26c8e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n- preset_name: ELC 7/12\n  visible_pieces: e0248e0000000000000000000e26c8e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n- preset_name: ELC 8/12\n  visible_pieces: e26c8e0000000000000000000e26c8e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n- preset_name: ELC 9/12\n  visible_pieces: e26c8e0200000400000800000e26c8e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n- preset_name: ELC 10/12\n  visible_pieces: e26c8e0200002400004800008e26c8e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n- preset_name: ELC 11/12\n  visible_pieces: e26c8e220000640000c800008e26c8e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n- preset_name: ELC 12/12\n  visible_pieces: e26c8e220002640004c800088e26c8e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n- preset_name: OLC\n  visible_pieces: fffffffffffffffffffffffffffffff100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n- preset_name: 2c PLC\n  visible_pieces: 000100000200012f901008000000100000200000001680000000400004c1104812ee77481208832000020000000168000000040000000000001000017400004000000000\n- preset_name: PLC cross\n  visible_pieces: 0c9370cdfffd9bfbfb37fff77eefffe000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n- preset_name: PLC F2L\n  visible_pieces: 0c9370effffffffffffffffffffffff100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n- preset_name: PLC\n  visible_pieces: fffffffffffffffffffffffffffffff100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n- preset_name: Done\n  visible_pieces: ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\n</code></pre> <pre><code>- preset_name: U center\n  visible_pieces: 0000000000000004000000000000000000000000000000000007ec100080000000481200000c9370000000000000000000007ec100000000000000002000000000000000\n- preset_name: D center\n  visible_pieces: 00000000000000040000000000000000837e0000000000000007ec100ec9300000481200000c93700837e0000000000000007ec100000000000000002000000000000000\n- preset_name: B center\n  visible_pieces: 00000000000000040000000000000000837e0000c100c100c107ec100ec9300007481700070c93700837e0000c100c100c107ec100000000000000002000000000000000\n- preset_name: F center\n  visible_pieces: 00000000000000040000000000000000837e0830c930c930c107ec100ec930e007e817e0070c93700837e0830c930c930c107ec100000000000000002000000000000000\n- preset_name: O center\n  visible_pieces: 00000000000000040000000000000000837e0830c930c930c107ec100ec930e007e817e0070c93700837e0830c930c930c107ec100000000c93700837e0007ec10000000\n- preset_name: 4-cross D center\n  visible_pieces: 00000000000000040000000000000000837e0830c930c930c107ec100ec930e007e817e0070c93700837e0830c930c930c107ec100080000c93700837e0007ec10000000\n- preset_name: 4-cross D\n  visible_pieces: 00000000000000040000000000000000837e0830c930c930c107ec100ec930e007e817e0070c93700837e0830c930c930c107ec100ec9300c93700837e0007ec10000000\n- preset_name: 4-cross B center\n  visible_pieces: 00000000000000040000000000000000837e0830c930c930c107ec100ec930e007e817e0070c93700837e0830c930c930c107ec100ec9300c93700837e8007ec10000000\n- preset_name: 4-cross B\n  visible_pieces: 00000000000000040000000000000000837e0830c930c930c107ec100ec930e007e817e0070c93700837e0830c930c930c107ec100ec9300c937e0837ec107ec93000000\n- preset_name: 4-cross U center\n  visible_pieces: 00000000000000040000000000000000837e0830c930c930c107ec100ec930e007e817e0070c93700837e0830c930c930c107ec100ec9300c937e0837ec107ec93008000\n- preset_name: 4-cross U\n  visible_pieces: 00000000000000040000000000000000837e0830c930c930c107ec100ec930e007e817e0070c93700837e0830c930c930c107ec100ec9300c937e0837ec107ec930ec930\n- preset_name: 4-cross F center\n  visible_pieces: 00000000000000040000000000000000837e0830c930c930c107ec100ec930e007e817e0070c93700837e0830c930c930c107ec100ec9300c937e8837ec107ec930ec930\n- preset_name: 4-cross F\n  visible_pieces: 00000000000000040000000000000000837e0830c930c930c107ec100ec930e007e817e0070c93700837e0830c930c930c107ec100ec930ec937ec937ec937ec930ec930\n- preset_name: Mid DB ridge center\n  visible_pieces: 00000000000000040000000000000000837e0830c930c930c107ec100ec932e007e817e0070c93700837e0830c930c930c107ec100ec930ec937ec937ec937ec930ec930\n- preset_name: Mid DB ridge\n  visible_pieces: 00000000000000040000000000000000837ec930c930c930c107ec100ec937e007e817e0070c93700837ec930c930c930c107ec100ec930ec937ec937ec937ec930ec930\n- preset_name: Mid DB\n  visible_pieces: 00000000000000040000000000000000837ec930c930c930c107ec100ec937e007e817e0070c93700837ec930c930c930c107ec100ec937ec937ec937ec937ec930ec930\n- preset_name: Mid UB ridge center\n  visible_pieces: 00000000000000040000000000000000837ec930c930c930c107ec100ec937e007e817e0070c93740837ec930c930c930c107ec100ec937ec937ec937ec937ec930ec930\n- preset_name: Mid UB ridge\n  visible_pieces: 00000000000000040000000000000000837ec930c930c930c107ec930ec937e007e817e0070c937e0837ec930c930c930c107ec930ec937ec937ec937ec937ec930ec930\n- preset_name: Mid UB\n  visible_pieces: 00000000000000040000000000000000837ec930c930c930c107ec930ec937e007e817e0070c937e0837ec930c930c930c107ec930ec937ec937ec937ec937ec930ec937\n- preset_name: Mid DF ridge center\n  visible_pieces: 00000000000000040000000000000000837ec930c930c930c107ec932ec937e007e817e0070c937e0837ec930c930c930c107ec930ec937ec937ec937ec937ec930ec937\n- preset_name: Mid DF ridge\n  visible_pieces: 0000000000000004000000000000000c937ec930c930c930c107ec937ec937e007e817e0070c937ec937ec930c930c930c107ec930ec937ec937ec937ec937ec930ec937\n- preset_name: Mid DF\n  visible_pieces: 0000000000000004000000000000000c937ec930c930c930c107ec937ec937e007e817e0070c937ec937ec930c930c930c107ec937ec937ec937ec937ec937ec930ec937\n- preset_name: Mid UF ridge center\n  visible_pieces: 0000000000000004000000000000000c937ec930c930c930c107ec937ec937e007e817e0074c937ec937ec930c930c930c107ec937ec937ec937ec937ec937ec930ec937\n- preset_name: Mid UF ridge\n  visible_pieces: 0000000000000004000000000000000c937ec930c930c930c937ec937ec937e007e817e007ec937ec937ec930c930c930c937ec937ec937ec937ec937ec937ec930ec937\n- preset_name: Mid UF\n  visible_pieces: 0000000000000004000000000000000c937ec930c930c930c937ec937ec937e007e817e007ec937ec937ec930c930c930c937ec937ec937ec937ec937ec937ec937ec937\n- preset_name: L center\n  visible_pieces: 0000000000000000000000000000000c937ec9bac9bac9bac937ec937ec937ea27ea27ea27ec937ec937ec9bac9bac9bac937ec937ec937ec937ec937ec937ec937ec937\n- preset_name: L cross ridge center\n  visible_pieces: 0000000000000000000000000000000c937ec9bac9bac9bac937ec937ec937ea27ea27ea27ec937ec937ec9bac9bac9bac937ec937ec937ec937ec9b7ec937ec937ec937\n- preset_name: L cross ridge\n  visible_pieces: 0000000000000000000000000000000c937ec9bac9bac9bac937ec937ec937ea27ea27ea27ec937ec937ec9bac9bac9bac937ec937ec937eedb7ecdb7fc9b7fe937ec937\n- preset_name: L D ridge center\n  visible_pieces: 0000000000000000000000000000000c937ec9bac9bac9bac937ec937ee937ea27ea27ea27ec937ec937ec9bac9bac9bac937ec937ec937eedb7ecdb7fc9b7fe937ec937\n- preset_name: L D ridge\n  visible_pieces: 0000000000000000000000000000000cdb7fc9bac9bac9bac937ec937fed37ea27ea27ea27ec937ecdb7fc9bac9bac9bac937ec937ec937eedb7ecdb7fc9b7fe937ec937\n- preset_name: L D\n  visible_pieces: 0000000000000000000000000000000cdb7fc9bac9bac9bac937ec937fed37ea27ea27ea27ec937ecdb7fc9bac9bac9bac937ec937fed37eedb7ecdb7fc9b7fe937ec937\n- preset_name: L U ridge center\n  visible_pieces: 0000000000000000000000000000000cdb7fc9bac9bac9bac937ec937fed37ea27ea27ea27ecd37ecdb7fc9bac9bac9bac937ec937fed37eedb7ecdb7fc9b7fe937ec937\n- preset_name: L U ridge\n  visible_pieces: 0000000000000000000000000000000cdb7fc9bac9bac9bac9b7fe937fed37ea27ea27ea27eedb7ecdb7fc9bac9bac9bac9b7fe937fed37eedb7ecdb7fc9b7fe937ec937\n- preset_name: L U\n  visible_pieces: 0000000000000000000000000000000cdb7fc9bac9bac9bac9b7fe937fed37ea27ea27ea27eedb7ecdb7fc9bac9bac9bac9b7fe937fed37eedb7ecdb7fc9b7fe937fed37\n- preset_name: L B ridge center\n  visible_pieces: 0000000000000000000000000000000cdb7fc9bac9bac9bac9b7fe937fed37ea27eaa7ea27eedb7ecdb7fc9bac9bac9bac9b7fe937fed37eedb7ecdb7fc9b7fe937fed37\n- preset_name: L B ridge\n  visible_pieces: 0000000000000000000000000000000cdb7fc9bae9bae9bae9b7fe937fed37eaa7eaa7eaa7eedb7ecdb7fc9bae9bae9bae9b7fe937fed37eedb7ecdb7fc9b7fe937fed37\n- preset_name: L B\n  visible_pieces: 0000000000000000000000000000000cdb7fc9bae9bae9bae9b7fe937fed37eaa7eaa7eaa7eedb7ecdb7fc9bae9bae9bae9b7fe937fed37eedb7fcdb7fe9b7fed37fed37\n- preset_name: L DB\n  visible_pieces: 0000000000000000000000000000000cdb7fe9bae9bae9bae9b7fe937fedb7eaa7eaa7eaa7eedb7ecdb7fe9bae9bae9bae9b7fe937fedb7eedb7fcdb7fe9b7fed37fed37\n- preset_name: L UB\n  visible_pieces: 0000000000000000000000000000000cdb7fe9bae9bae9bae9b7fed37fedb7eaa7eaa7eaa7eedb7fcdb7fe9bae9bae9bae9b7fed37fedb7eedb7fcdb7fe9b7fed37fedb7\n- preset_name: L F ridge center\n  visible_pieces: 0000000000000000000000000000000cdb7fe9bae9bae9bae9b7fed37fedb7eaa7faa7eaa7eedb7fcdb7fe9bae9bae9bae9b7fed37fedb7eedb7fcdb7fe9b7fed37fedb7\n- preset_name: L F ridge\n  visible_pieces: 0000000000000000000000000000000cdb7fedbaedbaedbae9b7fed37fedb7faa7faa7faa7eedb7fcdb7fedbaedbaedbae9b7fed37fedb7eedb7fcdb7fe9b7fed37fedb7\n- preset_name: L F\n  visible_pieces: 0000000000000000000000000000000cdb7fedbaedbaedbae9b7fed37fedb7faa7faa7faa7eedb7fcdb7fedbaedbaedbae9b7fed37fedb7fedb7fedb7fedb7fed37fedb7\n- preset_name: L DF\n  visible_pieces: 0000000000000000000000000000000edb7fedbaedbaedbae9b7fedb7fedb7faa7faa7faa7eedb7fedb7fedbaedbaedbae9b7fedb7fedb7fedb7fedb7fedb7fed37fedb7\n- preset_name: L UF\n  visible_pieces: 0000000000000000000000000000000edb7fedbaedbaedbaedb7fedb7fedb7faa7faa7faa7fedb7fedb7fedbaedbaedbaedb7fedb7fedb7fedb7fedb7fedb7fedb7fedb7\n- preset_name: R center\n  visible_pieces: 0000000000000000000000000000000edb7fedbffdbffdbffdb7fedb7fedb7fef7fef7fef7fedb7fedb7fedbffdbffdbffdb7fedb7fedb7fedb7fedb7fedb7fedb7fedb7\n- preset_name: R cross ridge center\n  visible_pieces: 0000000000000000000000000000000edb7fedbffdbffdbffdb7fedb7fedb7fef7fef7fef7fedb7fedb7fedbffdbffdbffdb7fedb7fedb7fedb7fedbffedb7fedb7fedb7\n- preset_name: R cross ridge\n  visible_pieces: 0000000000000000000000000000000edb7fedbffdbffdbffdb7fedb7fedb7fef7fef7fef7fedb7fedb7fedbffdbffdbffdb7fedb7fedb7feffffedffffdbffffb7fedb7\n- preset_name: R D ridge center\n  visible_pieces: 0000000000000000000000000000000edb7fedbffdbffdbffdb7fedb7fefb7fef7fef7fef7fedb7fedb7fedbffdbffdbffdb7fedb7fedb7feffffedffffdbffffb7fedb7\n- preset_name: R D ridge\n  visible_pieces: 0000000000000000000000000000000edffffdbffdbffdbffdb7fedb7ffff7fef7fef7fef7fedb7fedffffdbffdbffdbffdb7fedb7fedb7feffffedffffdbffffb7fedb7\n- preset_name: R D\n  visible_pieces: 0000000000000000000000000000000edffffdbffdbffdbffdb7fedb7ffff7fef7fef7fef7fedb7fedffffdbffdbffdbffdb7fedb7ffff7feffffedffffdbffffb7fedb7\n- preset_name: R U ridge center\n  visible_pieces: 0000000000000000000000000000000edffffdbffdbffdbffdb7fedb7ffff7fef7fef7fef7fedf7fedffffdbffdbffdbffdb7fedb7ffff7feffffedffffdbffffb7fedb7\n- preset_name: R U ridge\n  visible_pieces: 0000000000000000000000000000000edffffdbffdbffdbffdbffffb7ffff7fef7fef7fef7feffffedffffdbffdbffdbffdbffffb7ffff7feffffedffffdbffffb7fedb7\n- preset_name: R U\n  visible_pieces: 0000000000000000000000000000000edffffdbffdbffdbffdbffffb7ffff7fef7fef7fef7feffffedffffdbffdbffdbffdbffffb7ffff7feffffedffffdbffffb7ffff7\n- preset_name: R B ridge center\n  visible_pieces: 0000000000000000000000000000000edffffdbffdbffdbffdbffffb7ffff7fef7fefffef7feffffedffffdbffdbffdbffdbffffb7ffff7feffffedffffdbffffb7ffff7\n- preset_name: R B ridge\n  visible_pieces: 0000000000000000000000000000000edffffdbfffbfffbfffbffffb7ffff7fefffefffefffeffffedffffdbfffbfffbfffbffffb7ffff7feffffedffffdbffffb7ffff7\n- preset_name: R B\n  visible_pieces: 0000000000000000000000000000000edffffdbfffbfffbfffbffffb7ffff7fefffefffefffeffffedffffdbfffbfffbfffbffffb7ffff7fefffffdfffffbfffff7ffff7\n- preset_name: R DB\n  visible_pieces: 0000000000000000000000000000000edfffffbfffbfffbfffbffffb7ffffffefffefffefffeffffedfffffbfffbfffbfffbffffb7ffffffefffffdfffffbfffff7ffff7\n- preset_name: R UB\n  visible_pieces: 0000000000000000000000000000000edfffffbfffbfffbfffbfffff7ffffffefffefffefffefffffdfffffbfffbfffbfffbfffff7ffffffefffffdfffffbfffff7fffff\n- preset_name: R F ridge center\n  visible_pieces: 0000000000000000000000000000000edfffffbfffbfffbfffbfffff7ffffffefffffffefffefffffdfffffbfffbfffbfffbfffff7ffffffefffffdfffffbfffff7fffff\n- preset_name: R F ridge\n  visible_pieces: 0000000000000000000000000000000edfffffffffffffffffbfffff7ffffffffffffffffffefffffdfffffffffffffffffbfffff7ffffffefffffdfffffbfffff7fffff\n- preset_name: R F\n  visible_pieces: 0000000000000000000000000000000edfffffffffffffffffbfffff7ffffffffffffffffffefffffdfffffffffffffffffbfffff7ffffffffffffffffffffffff7fffff\n- preset_name: R DF\n  visible_pieces: 0000000000000000000000000000000effffffffffffffffffbffffffffffffffffffffffffefffffffffffffffffffffffbffffffffffffffffffffffffffffff7fffff\n- preset_name: R UF\n  visible_pieces: 0000000000000000000000000000000effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\n- preset_name: 2c OLC\n  visible_pieces: 000100000200012f901008000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n- preset_name: RLC 1/6\n  visible_pieces: 00000000000000000000000000c9370000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n- preset_name: RLC 2/6\n  visible_pieces: 0c937000000000000000000000c9370000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n- preset_name: RLC 3/6\n  visible_pieces: 0c937000000c10000830000070c9370000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n- preset_name: RLC 4/6\n  visible_pieces: 0c9370c1000c93000837000070c9370000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n- preset_name: RLC 6/6\n  visible_pieces: 0c9370c5c81d9b813a37136470c9370000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n- preset_name: ELC 1/12\n  visible_pieces: \"0000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\"\n- preset_name: ELC 2/12\n  visible_pieces: 0000000000000000000000000e0000e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n- preset_name: ELC 3/12\n  visible_pieces: 0000000000000000000000000e0248e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n- preset_name: ELC 4/12\n  visible_pieces: 0000000000000000000000000e26c8e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n- preset_name: ELC 5/12\n  visible_pieces: e000000000000000000000000e26c8e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n- preset_name: ELC 6/12\n  visible_pieces: e0000e0000000000000000000e26c8e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n- preset_name: ELC 7/12\n  visible_pieces: e0248e0000000000000000000e26c8e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n- preset_name: ELC 8/12\n  visible_pieces: e26c8e0000000000000000000e26c8e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n- preset_name: ELC 9/12\n  visible_pieces: e26c8e0200000400000800000e26c8e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n- preset_name: ELC 10/12\n  visible_pieces: e26c8e0200002400004800008e26c8e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n- preset_name: ELC 11/12\n  visible_pieces: e26c8e220000640000c800008e26c8e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n- preset_name: ELC 12/12\n  visible_pieces: e26c8e220002640004c800088e26c8e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n- preset_name: OLC\n  visible_pieces: fffffffffffffffffffffffffffffff100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n- preset_name: 2c PLC\n  visible_pieces: 000100000200012f901008000000100000200000001680000000400004c1104812ee77481208832000020000000168000000040000000000001000017400004000000000\n- preset_name: PLC cross\n  visible_pieces: 0c9370cdfffd9bfbfb37fff77eefffe000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n- preset_name: PLC F2L\n  visible_pieces: 0c9370effffffffffffffffffffffff100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n- preset_name: PLC\n  visible_pieces: fffffffffffffffffffffffffffffff100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n- preset_name: Done\n  visible_pieces: ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\n</code></pre> <pre><code>- preset_name: Centers\n  visible_pieces: \"000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008000000000000000000808101000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000\"\n- preset_name: 3x3 Centers\n  visible_pieces: 0000000000000000000000000000c1e07000000083c1e00000000783c100000000000000000000000000000000000000000000000000000000000000000000000000000000000000e0783000000000078f1e078f1e078f1e0000000000c1e07000000083c1e0000000000c1e783c1e783c1e7830000000000783c10000000e0783000000000078f1e078f1e078f1e0000000000c1e070000000000000000000000000000000000000000000000000000000000000000000000000000000000000083c1e00000000783c10000000e07830000000000000000000000000000\n- preset_name: 5x5 Centers\n  visible_pieces: 00000000000000e3f9fc7e3000c7e3f9fc70008fc7e3f9f0000f9fc7e3f1000e3f9fc7e30000000000000008fc7e3f9f00ebffd7ebffd7ebffd7ebffd7ebffd700f9fc7e3f1000e3f9fc7e308fef7f9fef7f9fef7f9fef7f9fef7f10c7e3f9fc70008fc7e3f9f00ebffd7ebffd7ebffd7ebffd7ebffd700f9fc7e3f1000e3f9fc7e308fef7f9fef7f9fef7f9fef7f9fef7f10c7e3f9fc70008fc7e3f9f00ebffd7ebffd7ebffd7ebffd7ebffd700f9fc7e3f1000000000000000c7e3f9fc70008fc7e3f9f0000f9fc7e3f1000e3f9fc7e3000c7e3f9fc700000000000000\n- preset_name: Ridges\n  visible_pieces: \"000000100000000000000000000000000000040000140000100000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000400001400001000000000000140028000000000000800002800002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000008000028000020000000000000000000000000000008000000\"\n- preset_name: 3x3 Ridges\n  visible_pieces: 0000783c100000000000000007001c06010c1e00281c02083c104038140070000000000000000c1e07000000000000000000000000000000000000000000000000000000000083080603800e00000040108060108060108020000007001c06010c1e00281c02083000000140028140028140028000000c1040381400783080603800e00000040108060108060108020000007001c06010c10000000000000000000000000000000000000000000000000000000000e07830000000000000000e00281c02083c1040381400783080603800e000000000000000083c1e0000\n- preset_name: 5x5 Ridges\n  visible_pieces: 00f9fc7e3f10c71c0603814f9f281c06038e3f50381c060d7eb060381c0afc71c0603814f10c7e3f9fc700f50381c060d7140028140028140028140028140028eb060381c0afc71c0603814f501080601080601080601080601080af281c06038e3f50381c060d7140028140028140028140028140028eb060381c0afc71c0603814f501080601080601080601080601080af281c06038e3f50381c060d7140028140028140028140028140028eb060381c0af00e3f9fc7e308f281c06038e3f50381c060d7eb060381c0afc71c0603814f9f281c06038e308fc7e3f9f00\n- preset_name: 3x3 Edges\n  visible_pieces: c10403814007000000000000401000000001c02000000002814000000004010000000000007001c06010c1000000000000000000000000000000000000000000000000000000280000000080200000000000000000000000000000401000000001c020000000028000000000000000000000000000000140000000040380000000080200000000000000000000000000000401000000001400000000000000000000000000000000000000000000000000000083080603800e00000000000080200000000281400000000403800000000802000000000000e00281c02083\n- preset_name: 5x5 Edges\n  visible_pieces: eb060381c0af280000000080601000000001c020000000028140000000040380000000080af281c06038eb020000000028000000000000000000000000000000140000000040380000000080200000000000000000000000000000401000000001c020000000028000000000000000000000000000000140000000040380000000080200000000000000000000000000000401000000001c020000000028000000000000000000000000000000140000000040d71c0603814f501000000001c0200000000281400000000403800000000806010000000014f50381c060d7\n- preset_name: Mid 1.1.1\n  visible_pieces: 0000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000080000000000000000008081010000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000083c1e00000000783c10000000e07830000000000000000000000000000\n- preset_name: Mid 1.1.2\n  visible_pieces: 0000000000000000000000000000c1e07000000083c1e00000000783c100000000000000000000000000000000000000000000000000000000000000000000000000000000000000e0783000000000078f1e078f1e078f1e0000000000c1e07000000083c1e0000000000c1e783c1e783c1e7830000000000783c10000000e0783000000000078f1e078f1e078f1e0000000000c1e07000000000000000000000000000000000000000000000000000000000000000000000000c7e3f9fc70008fc7e3f9f0000f9fc7e3f1000e3f9fc7e3000c7e3f9fc700000000000000\n- preset_name: Mid 1.2.1\n  visible_pieces: 000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c1e0700000000080000000000000000008081010000000000000000783c10000000000000000000000000000000000000000000000000c1e07000000000000000000000000000000000000000000000000000000000000000000000000c7e3f9fc70008fc7e3f9f0000f9fc7e3f1000e3f9fc7e3000c7e3f9fc700000000000000\n- preset_name: Mid 1.2.2\n  visible_pieces: 0000000000000000000000000000c1e07000000083c1e00000000783c1000000000000000000000000000000000000000000000000000000000000000000000000f9fc7e3f100000e0783000000000078f1e078f1e078f1e00000000c7e3f9fc70000083c1e0000000000c1e783c1e783c1e78300000000f9fc7e3f100000e0783000000000078f1e078f1e078f1e00000000c7e3f9fc70000000000000000000000000000000000000000000000f9fc7e3f1000000000000000c7e3f9fc70008fc7e3f9f0000f9fc7e3f1000e3f9fc7e3000c7e3f9fc700000000000000\n- preset_name: Mid 1.3.1\n  visible_pieces: 0000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000000000000000000000000000f9fc7e3f100000e078300000000000000000000000000000000000c7e3f9fc70000083c1e000000000000000080810100000000000000f9fc7e3f100000e078300000000000000000000000000000000000c7e3f9fc70000000000000000000000000000000000000000000000f9fc7e3f1000000000000000c7e3f9fc70008fc7e3f9f0000f9fc7e3f1000e3f9fc7e3000c7e3f9fc700000000000000\n- preset_name: Mid 1.3.2\n  visible_pieces: 0000000000000000000000000000c1e07000000083c1e00000000783c1000000000000000000000000000008fc7e3f9f0000000000000000000000000000000000f9fc7e3f1000e3f9fc7e30000000078f1e078f1e078f1e00000000c7e3f9fc70008fc7e3f9f00000000c1e783c1e783c1e78300000000f9fc7e3f1000e3f9fc7e30000000078f1e078f1e078f1e00000000c7e3f9fc70008fc7e3f9f0000000000000000000000000000000000f9fc7e3f1000000000000000c7e3f9fc70008fc7e3f9f0000f9fc7e3f1000e3f9fc7e3000c7e3f9fc700000000000000\n- preset_name: Mid 1.4.1\n  visible_pieces: 0000000000000000000000000000000000000000008000000000000000000000000000000000000000000008fc7e3f9f0000000000000000000000000000000000f9fc7e3f1000e3f9fc7e3000000000000e00000e00000e00000000c7e3f9fc70008fc7e3f9f0000000000008380818300008300000000f9fc7e3f1000e3f9fc7e3000000000000e00000e00000e00000000c7e3f9fc70008fc7e3f9f0000000000000000000000000000000000f9fc7e3f1000000000000000c7e3f9fc70008fc7e3f9f0000f9fc7e3f1000e3f9fc7e3000c7e3f9fc700000000000000\n- preset_name: Mid 1.4.2\n  visible_pieces: 0000000000000000000000000000c1e07000000083c1e00000000783c1000000000000000000000000000008fc7e3f9f000000c70000c70000c70000c70000c700f9fc7e3f1000e3f9fc7e3000000f178f1f178f1f178f1f10000f10c7e3f9fc70008fc7e3f9f000000c7c1e7c7c1e7c7c1e7c70000c700f9fc7e3f1000e3f9fc7e3000000f178f1f178f1f178f1f10000f10c7e3f9fc70008fc7e3f9f000000c70000c70000c70000c70000c700f9fc7e3f1000000000000000c7e3f9fc70008fc7e3f9f0000f9fc7e3f1000e3f9fc7e3000c7e3f9fc700000000000000\n- preset_name: Mid 1.5.1\n  visible_pieces: 0000000000000000000000000000000000000000008000000000000000000000000000000000000000000008fc7e3f9f000000c70000c70000c70000c70000c700f9fc7e3f1000e3f9fc7e3000000f17000f17000f17000f10000f10c7e3f9fc70008fc7e3f9f000000c7c100c7c181c7c100c70000c700f9fc7e3f1000e3f9fc7e3000000f17000f17000f17000f10000f10c7e3f9fc70008fc7e3f9f000000c70000c70000c70000c70000c700f9fc7e3f1000000000000000c7e3f9fc70008fc7e3f9f0000f9fc7e3f1000e3f9fc7e3000c7e3f9fc700000000000000\n- preset_name: Mid 1.5.2\n  visible_pieces: 0000000000000000000000000000c1e07000000083c1e00000000783c1000000000000000000000000000008fc7e3f9f00e300c7e300c7e300c7e300c7e300c700f9fc7e3f1000e3f9fc7e308f000f9f8f1f9f8f1f9f8f1f9f000f10c7e3f9fc70008fc7e3f9f00e300c7e3e7c7e3e7c7e3e7c7e300c700f9fc7e3f1000e3f9fc7e308f000f9f8f1f9f8f1f9f8f1f9f000f10c7e3f9fc70008fc7e3f9f00e300c7e300c7e300c7e300c7e300c700f9fc7e3f1000000000000000c7e3f9fc70008fc7e3f9f0000f9fc7e3f1000e3f9fc7e3000c7e3f9fc700000000000000\n- preset_name: Mid 2.1.1\n  visible_pieces: 00000000000000e3f9fc7e3000c7e3f9fc70008fc7e3f9f0000f9fc7e3f1000e3f9fc7e30000000000000008fc7e3f9f00ebffd7ebffd7ebffd7ebffd7ebffd700f9fc7e3f1000e3f9fc7e308fef7f9fef7f9fef7f9fef7f9fef7f10c7e3f9fc70008fc7e3f9f00ebffd7ebffd7ebffd7ebffd7ebffd700f9fc7e3f1000e3f9fc7e308fef7f9fef7f9fef7f9fef7f9fef7f10c7e3f9fc70008fc7e3f9f00ebffd7ebffd7ebffd7ebffd7ebffd700f9fc7e3f1000000000000000c7e3f9fc70008fc7e3f9f0000f9fc7e3f1000e3f9fc7e3000c7e3f9fc700000008000000\n- preset_name: Mid 2.1.2\n  visible_pieces: 00000000000000e3f9fc7e3000c7e3f9fc70008fc7e3f9f0000f9fc7e3f1000e3f9fc7e30000000000000008fc7e3f9f00ebffd7ebffd7ebffd7ebffd7ebffd700f9fc7e3f1000e3f9fc7e308fef7f9fef7f9fef7f9fef7f9fef7f10c7e3f9fc70008fc7e3f9f00ebffd7ebffd7ebffd7ebffd7ebffd700f9fc7e3f1000e3f9fc7e308fef7f9fef7f9fef7f9fef7f9fef7f10c7e3f9fc70008fc7e3f9f00ebffd7ebffd7ebffd7ebffd7ebffd700f9fc7e3f1000000000000000c7e3f9fc70008fc7e3f9f0000f9fc7e3f1000e3f9fc7e3000c7e3f9fc70000083c1e0000\n- preset_name: Mid 2.1.3\n  visible_pieces: 00000000000000e3f9fc7e3000c7e3f9fc70008fc7e3f9f0000f9fc7e3f1000e3f9fc7e30000000000000008fc7e3f9f00ebffd7ebffd7ebffd7ebffd7ebffd700f9fc7e3f1000e3f9fc7e308fef7f9fef7f9fef7f9fef7f9fef7f10c7e3f9fc70008fc7e3f9f00ebffd7ebffd7ebffd7ebffd7ebffd700f9fc7e3f1000e3f9fc7e308fef7f9fef7f9fef7f9fef7f9fef7f10c7e3f9fc70008fc7e3f9f00ebffd7ebffd7ebffd7ebffd7ebffd700f9fc7e3f1000000000000000c7e3f9fc70008fc7e3f9f0000f9fc7e3f1000e3f9fc7e3000c7e3f9fc70008fc7e3f9f00\n- preset_name: Mid 2.2.1\n  visible_pieces: 00000000000000e3f9fc7e3000c7e3f9fc70008fc7e3f9f0000f9fc7e3f1000e3f9fc7e30000000000000008fc7e3f9f00ebffd7ebffd7ebffd7ebffd7ebffd700f9fc7e3f1000e3f9fc7e308fef7f9fef7f9fef7f9fef7f9fef7f10c7e3f9fc70008fc7e3f9f00ebffd7ebffd7ebffd7ebffd7ebffd700f9fc7e3f1000e3f9fc7e308fef7f9fef7f9fef7f9fef7f9fef7f10c7e3f9fc70008fc7e3f9f00ebffd7ebffd7ebffd7ebffd7ebffd700f9fc7e3f1000000020000000c7e3f9fc70008fc7e3f9f0000f9fc7e3f1000e3f9fc7e3000c7e3f9fc70008fc7e3f9f00\n- preset_name: Mid 2.2.2\n  visible_pieces: 00000000000000e3f9fc7e3000c7e3f9fc70008fc7e3f9f0000f9fc7e3f1000e3f9fc7e30000000000000008fc7e3f9f00ebffd7ebffd7ebffd7ebffd7ebffd700f9fc7e3f1000e3f9fc7e308fef7f9fef7f9fef7f9fef7f9fef7f10c7e3f9fc70008fc7e3f9f00ebffd7ebffd7ebffd7ebffd7ebffd700f9fc7e3f1000e3f9fc7e308fef7f9fef7f9fef7f9fef7f9fef7f10c7e3f9fc70008fc7e3f9f00ebffd7ebffd7ebffd7ebffd7ebffd700f9fc7e3f100000e078300000c7e3f9fc70008fc7e3f9f0000f9fc7e3f1000e3f9fc7e3000c7e3f9fc70008fc7e3f9f00\n- preset_name: Mid 2.2.3\n  visible_pieces: 00000000000000e3f9fc7e3000c7e3f9fc70008fc7e3f9f0000f9fc7e3f1000e3f9fc7e30000000000000008fc7e3f9f00ebffd7ebffd7ebffd7ebffd7ebffd700f9fc7e3f1000e3f9fc7e308fef7f9fef7f9fef7f9fef7f9fef7f10c7e3f9fc70008fc7e3f9f00ebffd7ebffd7ebffd7ebffd7ebffd700f9fc7e3f1000e3f9fc7e308fef7f9fef7f9fef7f9fef7f9fef7f10c7e3f9fc70008fc7e3f9f00ebffd7ebffd7ebffd7ebffd7ebffd700f9fc7e3f1000e3f9fc7e3000c7e3f9fc70008fc7e3f9f0000f9fc7e3f1000e3f9fc7e3000c7e3f9fc70008fc7e3f9f00\n- preset_name: Mid 2.3.1\n  visible_pieces: 00000000000000e3f9fc7e3000c7e3f9fc70008fc7e3f9f0000f9fc7e3f1000e3f9fc7e30000000000000008fc7e3f9f00ebffd7ebffd7ebffd7ebffd7ebffd700f9fc7e3f1000e3f9fc7e308fef7f9fef7f9fef7f9fef7f9fef7f10c7e3f9fc70008fc7e3f9f00ebffd7ebffd7ebffd7ebffd7ebffd700f9fc7e3f1000e3f9fc7e308fef7f9fef7f9fef7f9fef7f9fef7f10c7e3f9fc70008fc7e3f9f00ebffd7ebffd7ebffd7ebffd7ebffd700f9fc7e3f1000e3f9fc7e3000c7e3f9fc70008fc7e3f9f0000f9fc7e3f1200e3f9fc7e3000c7e3f9fc70008fc7e3f9f00\n- preset_name: Mid 2.3.2\n  visible_pieces: 00000000000000e3f9fc7e3000c7e3f9fc70008fc7e3f9f0000f9fc7e3f1000e3f9fc7e30000000000000008fc7e3f9f00ebffd7ebffd7ebffd7ebffd7ebffd700f9fc7e3f1000e3f9fc7e308fef7f9fef7f9fef7f9fef7f9fef7f10c7e3f9fc70008fc7e3f9f00ebffd7ebffd7ebffd7ebffd7ebffd700f9fc7e3f1000e3f9fc7e308fef7f9fef7f9fef7f9fef7f9fef7f10c7e3f9fc70008fc7e3f9f00ebffd7ebffd7ebffd7ebffd7ebffd700f9fc7e3f1000e3f9fc7e3000c7e3f9fc70008fc7e3f9f8300f9fc7e3f1700e3f9fc7e3e00c7e3f9fc70008fc7e3f9f00\n- preset_name: Mid 2.3.3\n  visible_pieces: 00000000000000e3f9fc7e3000c7e3f9fc70008fc7e3f9f0000f9fc7e3f1000e3f9fc7e30000000000000008fc7e3f9f00ebffd7ebffd7ebffd7ebffd7ebffd700f9fc7e3f1000e3f9fc7e308fef7f9fef7f9fef7f9fef7f9fef7f10c7e3f9fc70008fc7e3f9f00ebffd7ebffd7ebffd7ebffd7ebffd700f9fc7e3f1000e3f9fc7e308fef7f9fef7f9fef7f9fef7f9fef7f10c7e3f9fc70008fc7e3f9f00ebffd7ebffd7ebffd7ebffd7ebffd700f9fc7e3f1000e3f9fc7e3000c7e3f9fc7e308fc7e3f9fc700f9fc7e3f9f00e3f9fc7e3f10c7e3f9fc7e308fc7e3f9f00\n- preset_name: Mid 2.4.1\n  visible_pieces: 00000000000000e3f9fc7e3000c7e3f9fc70008fc7e3f9f0000f9fc7e3f1000e3f9fc7e30000000000000008fc7e3f9f00ebffd7ebffd7ebffd7ebffd7ebffd700f9fc7e3f1000e3f9fc7e308fef7f9fef7f9fef7f9fef7f9fef7f10c7e3f9fc70008fc7e3f9f00ebffd7ebffd7ebffd7ebffd7ebffd700f9fc7e3f1000e3f9fc7e308fef7f9fef7f9fef7f9fef7f9fef7f10c7e3f9fc70008fc7e3f9f00ebffd7ebffd7ebffd7ebffd7ebffd700f9fc7e3f1000e3f9fc7e3000c7e3f9fc7e308fc7e3f9fc780f9fc7e3f9f00e3f9fc7e3f10c7e3f9fc7e308fc7e3f9f00\n- preset_name: Mid 2.4.2\n  visible_pieces: 00000000000000e3f9fc7e3000c7e3f9fc70008fc7e3f9f0000f9fc7e3f1000e3f9fc7e30000000000000008fc7e3f9f00ebffd7ebffd7ebffd7ebffd7ebffd700f9fc7e3f1000e3f9fc7e308fef7f9fef7f9fef7f9fef7f9fef7f10c7e3f9fc70008fc7e3f9f00ebffd7ebffd7ebffd7ebffd7ebffd700f9fc7e3f1000e3f9fc7e308fef7f9fef7f9fef7f9fef7f9fef7f10c7e3f9fc70008fc7e3f9f00ebffd7ebffd7ebffd7ebffd7ebffd700f9fc7e3f1000e3f9fc7e3000c7e3f9fc7e3e8fc7e3f9fc7c1f9fc7e3f9f83e3f9fc7e3f10c7e3f9fc7e308fc7e3f9f00\n- preset_name: Mid 2.4.3\n  visible_pieces: 00000000000000e3f9fc7e3000c7e3f9fc70008fc7e3f9f0000f9fc7e3f1000e3f9fc7e30000000000000008fc7e3f9f00ebffd7ebffd7ebffd7ebffd7ebffd700f9fc7e3f1000e3f9fc7e308fef7f9fef7f9fef7f9fef7f9fef7f10c7e3f9fc70008fc7e3f9f00ebffd7ebffd7ebffd7ebffd7ebffd700f9fc7e3f1000e3f9fc7e308fef7f9fef7f9fef7f9fef7f9fef7f10c7e3f9fc70008fc7e3f9f00ebffd7ebffd7ebffd7ebffd7ebffd700f9fc7e3f1000e3f9fc7e308fc7e3f9fc7e3f9fc7e3f9fc7e3f9fc7e3f9fc7e3f9fc7e3f9fc7e3f9fc7e308fc7e3f9f00\n- preset_name: Mid 3.1.1\n  visible_pieces: 00000000000000e3f9fc7e3000c7e3f9fc70008fc7e3f9f0000f9fc7e3f1000e3f9fc7e30000000000000008fc7e3f9f00ebffd7ebffd7ebffd7ebffd7ebffd700f9fc7e3f1000e3f9fc7e308fef7f9fef7f9fef7f9fef7f9fef7f10c7e3f9fc70008fc7e3f9f01ebffd7ebffd7ebffd7ebffd7ebffd700f9fc7e3f1000e3f9fc7e308fef7f9fef7f9fef7f9fef7f9fef7f10c7e3f9fc70008fc7e3f9f00ebffd7ebffd7ebffd7ebffd7ebffd700f9fc7e3f1000e3f9fc7e308fc7e3f9fc7e3f9fc7e3f9fc7e3f9fc7e3f9fc7e3f9fc7e3f9fc7e3f9fc7e308fc7e3f9f00\n- preset_name: Mid 3.1.2\n  visible_pieces: 00000000000000e3f9fc7e3000c7e3f9fc70008fc7e3f9f0000f9fc7e3f1000e3f9fc7e30000000000000008fc7e3f9f00ebffd7ebffd7ebffd7ebffd7ebffd700f9fc7e3f1000e3f9fc7e3e8fef7f9fef7f9fef7f9fef7f9fef7f10c7e3f9fc70008fc7e3f9f83ebffd7ebffd7ebffd7ebffd7ebffd700f9fc7e3f1000e3f9fc7e3e8fef7f9fef7f9fef7f9fef7f9fef7f10c7e3f9fc70008fc7e3f9f00ebffd7ebffd7ebffd7ebffd7ebffd700f9fc7e3f1000e3f9fc7e308fc7e3f9fc7e3f9fc7e3f9fc7e3f9fc7e3f9fc7e3f9fc7e3f9fc7e3f9fc7e308fc7e3f9f00\n- preset_name: Mid 3.1.3\n  visible_pieces: 00000000000000e3f9fc7e3000c7e3f9fc70008fc7e3f9f0000f9fc7e3f1000e3f9fc7e30000000000000008fc7e3f9fc7ebffd7ebffd7ebffd7ebffd7ebffd700f9fc7e3f1000e3f9fc7e3f9fef7f9fef7f9fef7f9fef7f9fef7f10c7e3f9fc70008fc7e3f9fc7ebffd7ebffd7ebffd7ebffd7ebffd700f9fc7e3f1000e3f9fc7e3f9fef7f9fef7f9fef7f9fef7f9fef7f10c7e3f9fc70008fc7e3f9fc7ebffd7ebffd7ebffd7ebffd7ebffd700f9fc7e3f1000e3f9fc7e308fc7e3f9fc7e3f9fc7e3f9fc7e3f9fc7e3f9fc7e3f9fc7e3f9fc7e3f9fc7e308fc7e3f9f00\n- preset_name: Mid 3.1.4\n  visible_pieces: 00000000000000e3f9fc7e3000c7e3f9fc70008fc7e3f9f0000f9fc7e3f1000e3f9fc7e30000000000000008fc7e3f9fc7ebffd7ebffd7ebffd7ebffd7ebffd700f9fc7e3f1000e3f9fc7e3f9fef7f9fef7f9fef7f9fef7f9fef7f10c7e3f9fc70008fc7e3f9fc7ebffd7ebffd7ebffd7ebffd7ebffd700f9fc7e3f1000e3f9fc7e3f9fef7f9fef7f9fef7f9fef7f9fef7f10c7e3f9fc70008fc7e3f9fc7ebffd7ebffd7ebffd7ebffd7ebffd700f9fc7e3f1000e3f9fc7e3f9fc7e3f9fc7e3f9fc7e3f9fc7e3f9fc7e3f9fc7e3f9fc7e3f9fc7e3f9fc7e308fc7e3f9f00\n- preset_name: Mid 3.2.1\n  visible_pieces: 00000000000000e3f9fc7e3000c7e3f9fc70008fc7e3f9f0000f9fc7e3f1000e3f9fc7e30000000000000008fc7e3f9fc7ebffd7ebffd7ebffd7ebffd7ebffd700f9fc7e3f1000e3f9fc7e3f9fef7f9fef7f9fef7f9fef7f9fef7f10c7e3f9fc70008fc7e3f9fc7ebffd7ebffd7ebffd7ebffd7ebffd700f9fc7e3f1200e3f9fc7e3f9fef7f9fef7f9fef7f9fef7f9fef7f10c7e3f9fc70008fc7e3f9fc7ebffd7ebffd7ebffd7ebffd7ebffd700f9fc7e3f1000e3f9fc7e3f9fc7e3f9fc7e3f9fc7e3f9fc7e3f9fc7e3f9fc7e3f9fc7e3f9fc7e3f9fc7e308fc7e3f9f00\n- preset_name: Mid 3.2.2\n  visible_pieces: 00000000000000e3f9fc7e3000c7e3f9fc70008fc7e3f9f0000f9fc7e3f1000e3f9fc7e30000000000000008fc7e3f9fc7ebffd7ebffd7ebffd7ebffd7ebffd700f9fc7e3f1000e3f9fc7e3f9fef7f9fef7f9fef7f9fef7f9fef7f10c7e3f9fc7c108fc7e3f9fc7ebffd7ebffd7ebffd7ebffd7ebffd700f9fc7e3f1700e3f9fc7e3f9fef7f9fef7f9fef7f9fef7f9fef7f10c7e3f9fc7c108fc7e3f9fc7ebffd7ebffd7ebffd7ebffd7ebffd700f9fc7e3f1000e3f9fc7e3f9fc7e3f9fc7e3f9fc7e3f9fc7e3f9fc7e3f9fc7e3f9fc7e3f9fc7e3f9fc7e308fc7e3f9f00\n- preset_name: Mid 3.2.3\n  visible_pieces: 00000000000000e3f9fc7e3000c7e3f9fc70008fc7e3f9f0000f9fc7e3f1000e3f9fc7e30000000000000008fc7e3f9fc7ebffd7ebffd7ebffd7ebffd7ebffd700f9fc7e3f9f00e3f9fc7e3f9fef7f9fef7f9fef7f9fef7f9fef7f10c7e3f9fc7e308fc7e3f9fc7ebffd7ebffd7ebffd7ebffd7ebffd700f9fc7e3f9f00e3f9fc7e3f9fef7f9fef7f9fef7f9fef7f9fef7f10c7e3f9fc7e308fc7e3f9fc7ebffd7ebffd7ebffd7ebffd7ebffd700f9fc7e3f9f00e3f9fc7e3f9fc7e3f9fc7e3f9fc7e3f9fc7e3f9fc7e3f9fc7e3f9fc7e3f9fc7e3f9fc7e308fc7e3f9f00\n- preset_name: Mid 3.2.4\n  visible_pieces: 00000000000000e3f9fc7e3000c7e3f9fc70008fc7e3f9f0000f9fc7e3f1000e3f9fc7e30000000000000008fc7e3f9fc7ebffd7ebffd7ebffd7ebffd7ebffd700f9fc7e3f9f00e3f9fc7e3f9fef7f9fef7f9fef7f9fef7f9fef7f10c7e3f9fc7e308fc7e3f9fc7ebffd7ebffd7ebffd7ebffd7ebffd700f9fc7e3f9f00e3f9fc7e3f9fef7f9fef7f9fef7f9fef7f9fef7f10c7e3f9fc7e308fc7e3f9fc7ebffd7ebffd7ebffd7ebffd7ebffd700f9fc7e3f9f00e3f9fc7e3f9fc7e3f9fc7e3f9fc7e3f9fc7e3f9fc7e3f9fc7e3f9fc7e3f9fc7e3f9fc7e308fc7e3f9fc7\n- preset_name: Mid 3.3.1\n  visible_pieces: 00000000000000e3f9fc7e3000c7e3f9fc70008fc7e3f9f0000f9fc7e3f1000e3f9fc7e30000000000000008fc7e3f9fc7ebffd7ebffd7ebffd7ebffd7ebffd700f9fc7e3f9f00e3f9fc7e3f9fef7f9fef7f9fef7f9fef7f9fef7f10c7e3f9fc7e348fc7e3f9fc7ebffd7ebffd7ebffd7ebffd7ebffd700f9fc7e3f9f00e3f9fc7e3f9fef7f9fef7f9fef7f9fef7f9fef7f10c7e3f9fc7e308fc7e3f9fc7ebffd7ebffd7ebffd7ebffd7ebffd700f9fc7e3f9f00e3f9fc7e3f9fc7e3f9fc7e3f9fc7e3f9fc7e3f9fc7e3f9fc7e3f9fc7e3f9fc7e3f9fc7e308fc7e3f9fc7\n- preset_name: Mid 3.3.2\n  visible_pieces: 00000000000000e3f9fc7e3000c7e3f9fc70008fc7e3f9f0000f9fc7e3f1000e3f9fc7e30000000000000008fc7e3f9fc7ebffd7ebffd7ebffd7ebffd7ebffd700f9fc7e3f9f83e3f9fc7e3f9fef7f9fef7f9fef7f9fef7f9fef7f10c7e3f9fc7e3e8fc7e3f9fc7ebffd7ebffd7ebffd7ebffd7ebffd700f9fc7e3f9f83e3f9fc7e3f9fef7f9fef7f9fef7f9fef7f9fef7f10c7e3f9fc7e308fc7e3f9fc7ebffd7ebffd7ebffd7ebffd7ebffd700f9fc7e3f9f00e3f9fc7e3f9fc7e3f9fc7e3f9fc7e3f9fc7e3f9fc7e3f9fc7e3f9fc7e3f9fc7e3f9fc7e308fc7e3f9fc7\n- preset_name: Mid 3.3.3\n  visible_pieces: 00000000000000e3f9fc7e3000c7e3f9fc70008fc7e3f9f0000f9fc7e3f1000e3f9fc7e300000000000000f9fc7e3f9fc7ebffd7ebffd7ebffd7ebffd7ebffd700f9fc7e3f9fc7e3f9fc7e3f9fef7f9fef7f9fef7f9fef7f9fef7f10c7e3f9fc7e3f9fc7e3f9fc7ebffd7ebffd7ebffd7ebffd7ebffd700f9fc7e3f9fc7e3f9fc7e3f9fef7f9fef7f9fef7f9fef7f9fef7f10c7e3f9fc7e3f9fc7e3f9fc7ebffd7ebffd7ebffd7ebffd7ebffd700f9fc7e3f9f00e3f9fc7e3f9fc7e3f9fc7e3f9fc7e3f9fc7e3f9fc7e3f9fc7e3f9fc7e3f9fc7e3f9fc7e308fc7e3f9fc7\n- preset_name: Mid 3.3.4\n  visible_pieces: 00000000000000e3f9fc7e3000c7e3f9fc70008fc7e3f9f0000f9fc7e3f1000e3f9fc7e300000000000000f9fc7e3f9fc7ebffd7ebffd7ebffd7ebffd7ebffd700f9fc7e3f9fc7e3f9fc7e3f9fef7f9fef7f9fef7f9fef7f9fef7f10c7e3f9fc7e3f9fc7e3f9fc7ebffd7ebffd7ebffd7ebffd7ebffd700f9fc7e3f9fc7e3f9fc7e3f9fef7f9fef7f9fef7f9fef7f9fef7f10c7e3f9fc7e3f9fc7e3f9fc7ebffd7ebffd7ebffd7ebffd7ebffd700f9fc7e3f9fc7e3f9fc7e3f9fc7e3f9fc7e3f9fc7e3f9fc7e3f9fc7e3f9fc7e3f9fc7e3f9fc7e3f9fc7e308fc7e3f9fc7\n- preset_name: Mid 3.4.1\n  visible_pieces: 00000000000000e3f9fc7e3000c7e3f9fc70008fc7e3f9f0000f9fc7e3f1000e3f9fc7e300000000000000f9fc7e3f9fc7ebffd7ebffd7ebffd7ebffd7ebffd700f9fc7e3f9fc7e3f9fc7e3f9fef7f9fef7f9fef7f9fef7f9fef7f10c7e3f9fc7e3f9fc7e3f9fc7ebffd7ebffd7ebffd7ebffd7ebffd780f9fc7e3f9fc7e3f9fc7e3f9fef7f9fef7f9fef7f9fef7f9fef7f10c7e3f9fc7e3f9fc7e3f9fc7ebffd7ebffd7ebffd7ebffd7ebffd700f9fc7e3f9fc7e3f9fc7e3f9fc7e3f9fc7e3f9fc7e3f9fc7e3f9fc7e3f9fc7e3f9fc7e3f9fc7e3f9fc7e308fc7e3f9fc7\n- preset_name: Mid 3.4.2\n  visible_pieces: 00000000000000e3f9fc7e3000c7e3f9fc70008fc7e3f9f0000f9fc7e3f1000e3f9fc7e300000000000000f9fc7e3f9fc7ebffd7ebffd7ebffd7ebffd7ebffd700f9fc7e3f9fc7e3f9fc7e3f9fef7f9fef7f9fef7f9fef7f9fef7f17c7e3f9fc7e3f9fc7e3f9fc7ebffd7ebffd7ebffd7ebffd7ebffd7c1f9fc7e3f9fc7e3f9fc7e3f9fef7f9fef7f9fef7f9fef7f9fef7f17c7e3f9fc7e3f9fc7e3f9fc7ebffd7ebffd7ebffd7ebffd7ebffd700f9fc7e3f9fc7e3f9fc7e3f9fc7e3f9fc7e3f9fc7e3f9fc7e3f9fc7e3f9fc7e3f9fc7e3f9fc7e3f9fc7e308fc7e3f9fc7\n- preset_name: Mid 3.4.3\n  visible_pieces: 00000000000000e3f9fc7e3000c7e3f9fc70008fc7e3f9f0000f9fc7e3f1000e3f9fc7e300000000000000f9fc7e3f9fc7ebffd7ebffd7ebffd7ebffd7ebffd7e3f9fc7e3f9fc7e3f9fc7e3f9fef7f9fef7f9fef7f9fef7f9fef7f9fc7e3f9fc7e3f9fc7e3f9fc7ebffd7ebffd7ebffd7ebffd7ebffd7e3f9fc7e3f9fc7e3f9fc7e3f9fef7f9fef7f9fef7f9fef7f9fef7f9fc7e3f9fc7e3f9fc7e3f9fc7ebffd7ebffd7ebffd7ebffd7ebffd7e3f9fc7e3f9fc7e3f9fc7e3f9fc7e3f9fc7e3f9fc7e3f9fc7e3f9fc7e3f9fc7e3f9fc7e3f9fc7e3f9fc7e308fc7e3f9fc7\n- preset_name: Mid 3.4.4\n  visible_pieces: 00000000000000e3f9fc7e3000c7e3f9fc70008fc7e3f9f0000f9fc7e3f1000e3f9fc7e300000000000000f9fc7e3f9fc7ebffd7ebffd7ebffd7ebffd7ebffd7e3f9fc7e3f9fc7e3f9fc7e3f9fef7f9fef7f9fef7f9fef7f9fef7f9fc7e3f9fc7e3f9fc7e3f9fc7ebffd7ebffd7ebffd7ebffd7ebffd7e3f9fc7e3f9fc7e3f9fc7e3f9fef7f9fef7f9fef7f9fef7f9fef7f9fc7e3f9fc7e3f9fc7e3f9fc7ebffd7ebffd7ebffd7ebffd7ebffd7e3f9fc7e3f9fc7e3f9fc7e3f9fc7e3f9fc7e3f9fc7e3f9fc7e3f9fc7e3f9fc7e3f9fc7e3f9fc7e3f9fc7e3f9fc7e3f9fc7\n- preset_name: Left 1.1.1\n  visible_pieces: 00000000000000000000000000000000000000000080000000000000000000000000000000000000000000f9fc7e3f9fc7e300c7e300c7e300c7e300c7e300c7e3f9fc7e3f9fc7e3f9fc7e3f9f000f9f8a0f9f8a0f9f8a0f9f000f9fc7e3f9fc7e3f9fc7e3f9fc7e300c7e3a2c7e3a3c7e3a2c7e300c7e3f9fc7e3f9fc7e3f9fc7e3f9f000f9f8a0f9f8a0f9f8a0f9f000f9fc7e3f9fc7e3f9fc7e3f9fc7e300c7e300c7e300c7e300c7e300c7e3f9fc7e3f9fc7e3f9fc7e3f9fc7e3f9fc7e3f9fc7e3f9fc7e3f9fc7e3f9fc7e3f9fc7e3f9fc7e3f9fc7e3f9fc7e3f9fc7\n- preset_name: Left 1.1.2\n  visible_pieces: 0000000000000000000000000000c1e07000000083c1e00000000783c10000000000000000000000000000f9fc7e3f9fc7ebaac7ebaac7ebaac7ebaac7ebaac7e3f9fc7e3f9fc7e3f9fc7e3f9faa2f9faf3f9faf3f9faf3f9faa2f9fc7e3f9fc7e3f9fc7e3f9fc7ebaac7ebefc7ebefc7ebefc7ebaac7e3f9fc7e3f9fc7e3f9fc7e3f9faa2f9faf3f9faf3f9faf3f9faa2f9fc7e3f9fc7e3f9fc7e3f9fc7ebaac7ebaac7ebaac7ebaac7ebaac7e3f9fc7e3f9fc7e3f9fc7e3f9fc7e3f9fc7e3f9fc7e3f9fc7e3f9fc7e3f9fc7e3f9fc7e3f9fc7e3f9fc7e3f9fc7e3f9fc7\n- preset_name: Left 1.2.1\n  visible_pieces: 00000000000000e3f9fc7e3000c7e3f9fc70008fc7e3f9f0000f9fc7e3f1000e3f9fc7e300000000000000f9fc7e3f9fc7ebffd7ebffd7ebffd7ebffd7ebffd7e3f9fc7e3f9fc7e3f9fc7e3f9fef7f9fef7f9fef7f9fef7f9fef7f9fc7e3f9fc7e3f9fc7e3f9fc7ebffd7ebffd7ebffd7ebffd7ebffd7e3f9fc7e3f9fc7e3f9fc7e3f9fef7f9fef7f9fef7f9fef7f9fef7f9fc7e3f9fc7e3f9fc7e3f9fc7ebffd7ebffd7ebffd7ebffd7ebffd7e3f9fc7e3f9fc7e3f9fc7e3f9fc7e3f9fc7e3f9fc7e3f9fc7e3f9fe7e3f9fc7e3f9fc7e3f9fc7e3f9fc7e3f9fc7e3f9fc7\n- preset_name: Left 1.2.2\n  visible_pieces: 00000000000000e3f9fc7e3000c7e3f9fc70008fc7e3f9f0000f9fc7e3f1000e3f9fc7e300000000000000f9fc7e3f9fc7ebffd7ebffd7ebffd7ebffd7ebffd7e3f9fc7e3f9fc7e3f9fc7e3f9fef7f9fef7f9fef7f9fef7f9fef7f9fc7e3f9fc7e3f9fc7e3f9fc7ebffd7ebffd7ebffd7ebffd7ebffd7e3f9fc7e3f9fc7e3f9fc7e3f9fef7f9fef7f9fef7f9fef7f9fef7f9fc7e3f9fc7e3f9fc7e3f9fc7ebffd7ebffd7ebffd7ebffd7ebffd7e3f9fc7e3f9fc7e3f9fc7e3f9fc7e3f9fc7e3f9fe7fbf9fc7e3fdfe7f3f9fc7ebfdfe7e3f9fc7e3f9fc7e3f9fc7e3f9fc7\n- preset_name: Left 1.2.3\n  visible_pieces: 00000000000000e3f9fc7e3000c7e3f9fc70008fc7e3f9f0000f9fc7e3f1000e3f9fc7e300000000000000f9fc7e3f9fc7ebffd7ebffd7ebffd7ebffd7ebffd7e3f9fc7e3f9fc7e3f9fc7e3f9fef7f9fef7f9fef7f9fef7f9fef7f9fc7e3f9fc7e3f9fc7e3f9fc7ebffd7ebffd7ebffd7ebffd7ebffd7e3f9fc7e3f9fc7e3f9fc7e3f9fef7f9fef7f9fef7f9fef7f9fef7f9fc7e3f9fc7e3f9fc7e3f9fc7ebffd7ebffd7ebffd7ebffd7ebffd7e3f9fc7e3f9fc7e3f9fc7e3f9fe7fbfdfe7e3fdfe7fbfdfc7ebfdfe7fbf9fc7fbfdfe7f3f9fe7fbfdfe7e3f9fc7e3f9fc7\n- preset_name: Left 1.3.1\n  visible_pieces: 00000000000000e3f9fc7e3000c7e3f9fc70008fc7e3f9f0000f9fc7e3f1000e3f9fc7e300000000000000f9fc7e3f9fc7ebffd7ebffd7ebffd7ebffd7ebffd7e3f9fc7e3f9fc7e3f9fc7e3f9fef7f9fef7f9fef7f9fef7f9fef7f9fc7e3f9fc7e3f9fc7f3f9fc7ebffd7ebffd7ebffd7ebffd7ebffd7e3f9fc7e3f9fc7e3f9fc7e3f9fef7f9fef7f9fef7f9fef7f9fef7f9fc7e3f9fc7e3f9fc7e3f9fc7ebffd7ebffd7ebffd7ebffd7ebffd7e3f9fc7e3f9fc7e3f9fc7e3f9fe7fbfdfe7e3fdfe7fbfdfc7ebfdfe7fbf9fc7fbfdfe7f3f9fe7fbfdfe7e3f9fc7e3f9fc7\n- preset_name: Left 1.3.2\n  visible_pieces: 00000000000000e3f9fc7e3000c7e3f9fc70008fc7e3f9f0000f9fc7e3f1000e3f9fc7e300000000000000f9fc7e3f9fc7ebffd7ebffd7ebffd7ebffd7ebffd7e3f9fc7e3f9fc7ebfdfe7e3f9fef7f9fef7f9fef7f9fef7f9fef7f9fc7e3f9fc7e3f9fe7fbf9fc7ebffd7ebffd7ebffd7ebffd7ebffd7e3f9fc7e3f9fc7ebfdfe7e3f9fef7f9fef7f9fef7f9fef7f9fef7f9fc7e3f9fc7e3f9fc7e3f9fc7ebffd7ebffd7ebffd7ebffd7ebffd7e3f9fc7e3f9fc7e3f9fc7e3f9fe7fbfdfe7e3fdfe7fbfdfc7ebfdfe7fbf9fc7fbfdfe7f3f9fe7fbfdfe7e3f9fc7e3f9fc7\n- preset_name: Left 1.3.3\n  visible_pieces: 00000000000000e3f9fc7e3000c7e3f9fc70008fc7e3f9f0000f9fc7e3f1000e3f9fc7e300000000000000fdfe7fbfdfc7ebffd7ebffd7ebffd7ebffd7ebffd7e3f9fc7e3f9fc7fbfdfe7f3f9fef7f9fef7f9fef7f9fef7f9fef7f9fc7e3f9fc7e3fdfe7fbfdfc7ebffd7ebffd7ebffd7ebffd7ebffd7e3f9fc7e3f9fc7fbfdfe7f3f9fef7f9fef7f9fef7f9fef7f9fef7f9fc7e3f9fc7e3fdfe7fbfdfc7ebffd7ebffd7ebffd7ebffd7ebffd7e3f9fc7e3f9fc7e3f9fc7e3f9fe7fbfdfe7e3fdfe7fbfdfc7ebfdfe7fbf9fc7fbfdfe7f3f9fe7fbfdfe7e3f9fc7e3f9fc7\n- preset_name: Left 1.3.4\n  visible_pieces: 00000000000000e3f9fc7e3000c7e3f9fc70008fc7e3f9f0000f9fc7e3f1000e3f9fc7e300000000000000fdfe7fbfdfc7ebffd7ebffd7ebffd7ebffd7ebffd7e3f9fc7e3f9fc7fbfdfe7f3f9fef7f9fef7f9fef7f9fef7f9fef7f9fc7e3f9fc7e3fdfe7fbfdfc7ebffd7ebffd7ebffd7ebffd7ebffd7e3f9fc7e3f9fc7fbfdfe7f3f9fef7f9fef7f9fef7f9fef7f9fef7f9fc7e3f9fc7e3fdfe7fbfdfc7ebffd7ebffd7ebffd7ebffd7ebffd7e3f9fc7e3f9fc7fbfdfe7f3f9fe7fbfdfe7e3fdfe7fbfdfc7ebfdfe7fbf9fc7fbfdfe7f3f9fe7fbfdfe7e3f9fc7e3f9fc7\n- preset_name: Left 1.4.1\n  visible_pieces: 00000000000000e3f9fc7e3000c7e3f9fc70008fc7e3f9f0000f9fc7e3f1000e3f9fc7e300000000000000fdfe7fbfdfc7ebffd7ebffd7ebffd7ebffd7ebffd7e3f9fc7e3f9fc7fbfdfe7f3f9fef7f9fef7f9fef7f9fef7f9fef7f9fc7e3f9fc7e3fdfe7fbfdfc7ebffd7ebffd7ebffd7ebffd7ebffd7e3f9fe7e3f9fc7fbfdfe7f3f9fef7f9fef7f9fef7f9fef7f9fef7f9fc7e3f9fc7e3fdfe7fbfdfc7ebffd7ebffd7ebffd7ebffd7ebffd7e3f9fc7e3f9fc7fbfdfe7f3f9fe7fbfdfe7e3fdfe7fbfdfc7ebfdfe7fbf9fc7fbfdfe7f3f9fe7fbfdfe7e3f9fc7e3f9fc7\n- preset_name: Left 1.4.2\n  visible_pieces: 00000000000000e3f9fc7e3000c7e3f9fc70008fc7e3f9f0000f9fc7e3f1000e3f9fc7e300000000000000fdfe7fbfdfc7ebffd7ebffd7ebffd7ebffd7ebffd7e3f9fc7e3f9fc7fbfdfe7f3f9fef7f9fef7f9fef7f9fef7f9fef7f9fc7fbfdfc7e3fdfe7fbfdfc7ebffd7ebffd7ebffd7ebffd7ebffd7e3fdfe7f3f9fc7fbfdfe7f3f9fef7f9fef7f9fef7f9fef7f9fef7f9fc7fbfdfc7e3fdfe7fbfdfc7ebffd7ebffd7ebffd7ebffd7ebffd7e3f9fc7e3f9fc7fbfdfe7f3f9fe7fbfdfe7e3fdfe7fbfdfc7ebfdfe7fbf9fc7fbfdfe7f3f9fe7fbfdfe7e3f9fc7e3f9fc7\n- preset_name: Left 1.4.3\n  visible_pieces: 00000000000000e3f9fc7e3000c7e3f9fc70008fc7e3f9f0000f9fc7e3f1000e3f9fc7e300000000000000fdfe7fbfdfc7ebffd7ebffd7ebffd7ebffd7ebffd7ebfdfe7fbf9fc7fbfdfe7f3f9fef7f9fef7f9fef7f9fef7f9fef7f9fe7fbfdfe7e3fdfe7fbfdfc7ebffd7ebffd7ebffd7ebffd7ebffd7ebfdfe7fbf9fc7fbfdfe7f3f9fef7f9fef7f9fef7f9fef7f9fef7f9fe7fbfdfe7e3fdfe7fbfdfc7ebffd7ebffd7ebffd7ebffd7ebffd7ebfdfe7fbf9fc7fbfdfe7f3f9fe7fbfdfe7e3fdfe7fbfdfc7ebfdfe7fbf9fc7fbfdfe7f3f9fe7fbfdfe7e3f9fc7e3f9fc7\n- preset_name: Left 1.4.4\n  visible_pieces: 00000000000000e3f9fc7e3000c7e3f9fc70008fc7e3f9f0000f9fc7e3f1000e3f9fc7e300000000000000fdfe7fbfdfc7ebffd7ebffd7ebffd7ebffd7ebffd7ebfdfe7fbf9fc7fbfdfe7f3f9fef7f9fef7f9fef7f9fef7f9fef7f9fe7fbfdfe7e3fdfe7fbfdfc7ebffd7ebffd7ebffd7ebffd7ebffd7ebfdfe7fbf9fc7fbfdfe7f3f9fef7f9fef7f9fef7f9fef7f9fef7f9fe7fbfdfe7e3fdfe7fbfdfc7ebffd7ebffd7ebffd7ebffd7ebffd7ebfdfe7fbf9fc7fbfdfe7f3f9fe7fbfdfe7e3fdfe7fbfdfc7ebfdfe7fbf9fc7fbfdfe7f3f9fe7fbfdfe7e3fdfe7fbfdfc7\n- preset_name: Left 2.1.1\n  visible_pieces: 00000000000000e3f9fc7e3000c7e3f9fc70008fc7e3f9f0000f9fc7e3f1000e3f9fc7e300000000000000fdfe7fbfdfc7ebffd7ebffd7ebffd7ebffd7ebffd7ebfdfe7fbf9fc7fbfdfe7f3f9fef7f9fef7f9fef7f9fef7f9fef7f9fe7fbfdfe7e3fdfe7fbfdfc7ebffd7ebffd7ebfff7ebffd7ebffd7ebfdfe7fbf9fc7fbfdfe7f3f9fef7f9fef7f9fef7f9fef7f9fef7f9fe7fbfdfe7e3fdfe7fbfdfc7ebffd7ebffd7ebffd7ebffd7ebffd7ebfdfe7fbf9fc7fbfdfe7f3f9fe7fbfdfe7e3fdfe7fbfdfc7ebfdfe7fbf9fc7fbfdfe7f3f9fe7fbfdfe7e3fdfe7fbfdfc7\n- preset_name: Left 2.1.2\n  visible_pieces: 00000000000000e3f9fc7e3000c7e3f9fc70008fc7e3f9f0000f9fc7e3f1000e3f9fc7e300000000000000fdfe7fbfdfc7ebffd7ebffd7ebffd7ebffd7ebffd7ebfdfe7fbf9fc7fbfdfe7f3f9fef7f9fefff9fefff9fefff9fef7f9fe7fbfdfe7e3fdfe7fbfdfc7ebffd7ebfff7ebfff7ebfff7ebffd7ebfdfe7fbf9fc7fbfdfe7f3f9fef7f9fefff9fefff9fefff9fef7f9fe7fbfdfe7e3fdfe7fbfdfc7ebffd7ebffd7ebffd7ebffd7ebffd7ebfdfe7fbf9fc7fbfdfe7f3f9fe7fbfdfe7e3fdfe7fbfdfc7ebfdfe7fbf9fc7fbfdfe7f3f9fe7fbfdfe7e3fdfe7fbfdfc7\n- preset_name: Left 2.1.3\n  visible_pieces: 00000000000000e3f9fc7e3000c7e3f9fc70008fc7e3f9f0000f9fc7e3f1000e3f9fc7e300000000000000fdfe7fbfdfc7ebfff7ebfff7ebfff7ebfff7ebfff7ebfdfe7fbf9fc7fbfdfe7f3f9fefff9fefff9fefff9fefff9fefff9fe7fbfdfe7e3fdfe7fbfdfc7ebfff7ebfff7ebfff7ebfff7ebfff7ebfdfe7fbf9fc7fbfdfe7f3f9fefff9fefff9fefff9fefff9fefff9fe7fbfdfe7e3fdfe7fbfdfc7ebfff7ebfff7ebfff7ebfff7ebfff7ebfdfe7fbf9fc7fbfdfe7f3f9fe7fbfdfe7e3fdfe7fbfdfc7ebfdfe7fbf9fc7fbfdfe7f3f9fe7fbfdfe7e3fdfe7fbfdfc7\n- preset_name: Left 2.1.4\n  visible_pieces: 00000000000000e3f9fc7e3000c7e3f9fc70008fc7e3f9f0000f9fc7e3f1000e3f9fc7e300000000000000fdfe7fbfdfc7ebfff7ebfff7ebfff7ebfff7ebfff7ebfdfe7fbf9fc7fbfdfe7f3f9fefff9fefff9fefff9fefff9fefff9fe7fbfdfe7e3fdfe7fbfdfc7ebfff7ebfff7ebfff7ebfff7ebfff7ebfdfe7fbf9fc7fbfdfe7f3f9fefff9fefff9fefff9fefff9fefff9fe7fbfdfe7e3fdfe7fbfdfc7ebfff7ebfff7ebfff7ebfff7ebfff7ebfdfe7fbf9fc7fbfdfe7f3f9fe7fbfdfe7f3fdfe7fbfdfe7ebfdfe7fbfdfc7fbfdfe7fbf9fe7fbfdfe7f3fdfe7fbfdfc7\n- preset_name: Left 2.2\n  visible_pieces: 00000000000000e3f9fc7e3000c7e3f9fc70008fc7e3f9f0000f9fc7e3f1000e3f9fc7e300000000000000fdfe7fbfdfe7ebfff7ebfff7ebfff7ebfff7ebfff7ebfdfe7fbf9fc7fbfdfe7fbf9fefff9fefff9fefff9fefff9fefff9fe7fbfdfe7e3fdfe7fbfdfe7ebfff7ebfff7ebfff7ebfff7ebfff7ebfdfe7fbf9fc7fbfdfe7fbf9fefff9fefff9fefff9fefff9fefff9fe7fbfdfe7e3fdfe7fbfdfe7ebfff7ebfff7ebfff7ebfff7ebfff7ebfdfe7fbf9fc7fbfdfe7fbf9fe7fbfdfe7f3fdfe7fbfdfe7ebfdfe7fbfdfc7fbfdfe7fbf9fe7fbfdfe7f3fdfe7fbfdfc7\n- preset_name: Left 2.3\n  visible_pieces: 00000000000000e3f9fc7e3000c7e3f9fc70008fc7e3f9f0000f9fc7e3f1000e3f9fc7e300000000000000fdfe7fbfdfe7ebfff7ebfff7ebfff7ebfff7ebfff7ebfdfe7fbfdfc7fbfdfe7fbf9fefff9fefff9fefff9fefff9fefff9fe7fbfdfe7f3fdfe7fbfdfe7ebfff7ebfff7ebfff7ebfff7ebfff7ebfdfe7fbfdfc7fbfdfe7fbf9fefff9fefff9fefff9fefff9fefff9fe7fbfdfe7f3fdfe7fbfdfe7ebfff7ebfff7ebfff7ebfff7ebfff7ebfdfe7fbfdfc7fbfdfe7fbf9fe7fbfdfe7f3fdfe7fbfdfe7ebfdfe7fbfdfc7fbfdfe7fbf9fe7fbfdfe7f3fdfe7fbfdfe7\n- preset_name: Left 3.1.1\n  visible_pieces: 00000000000000e3f9fc7e3000c7e3f9fc70008fc7e3f9f0000f9fc7e3f1000e3f9fc7e300000000000000fdfe7fbfdfe7ebfff7ebfff7ebfff7ebfff7ebfff7ebfdfe7fbfdfc7fbfdfe7fbf9fefff9fefff9fefff9fefff9fefff9fe7fbfdfe7f3fdfe7fbfdfe7ebfff7ebfff7fbfff7ebfff7ebfff7ebfdfe7fbfdfc7fbfdfe7fbf9fefff9fefff9fefff9fefff9fefff9fe7fbfdfe7f3fdfe7fbfdfe7ebfff7ebfff7ebfff7ebfff7ebfff7ebfdfe7fbfdfc7fbfdfe7fbf9fe7fbfdfe7f3fdfe7fbfdfe7ebfdfe7fbfdfc7fbfdfe7fbf9fe7fbfdfe7f3fdfe7fbfdfe7\n- preset_name: Left 3.1.2\n  visible_pieces: 00000000000000e3f9fc7e3000c7e3f9fc70008fc7e3f9f0000f9fc7e3f1000e3f9fc7e300000000000000fdfe7fbfdfe7ebfff7ebfff7ebfff7ebfff7ebfff7ebfdfe7fbfdfc7fbfdfe7fbf9fefffdfefffdfefffdfefff9fefff9fe7fbfdfe7f3fdfe7fbfdfe7ebfff7fbfff7fbfff7fbfff7ebfff7ebfdfe7fbfdfc7fbfdfe7fbf9fefffdfefffdfefffdfefff9fefff9fe7fbfdfe7f3fdfe7fbfdfe7ebfff7ebfff7ebfff7ebfff7ebfff7ebfdfe7fbfdfc7fbfdfe7fbf9fe7fbfdfe7f3fdfe7fbfdfe7ebfdfe7fbfdfc7fbfdfe7fbf9fe7fbfdfe7f3fdfe7fbfdfe7\n- preset_name: Left 3.1.3\n  visible_pieces: 00000000000000e3f9fc7e3000c7e3f9fc70008fc7e3f9f0000f9fc7e3f1000e3f9fc7e300000000000000fdfe7fbfdfe7fbfff7fbfff7fbfff7fbfff7fbfff7ebfdfe7fbfdfc7fbfdfe7fbfdfefffdfefffdfefffdfefffdfefff9fe7fbfdfe7f3fdfe7fbfdfe7fbfff7fbfff7fbfff7fbfff7fbfff7ebfdfe7fbfdfc7fbfdfe7fbfdfefffdfefffdfefffdfefffdfefff9fe7fbfdfe7f3fdfe7fbfdfe7fbfff7fbfff7fbfff7fbfff7fbfff7ebfdfe7fbfdfc7fbfdfe7fbf9fe7fbfdfe7f3fdfe7fbfdfe7ebfdfe7fbfdfc7fbfdfe7fbf9fe7fbfdfe7f3fdfe7fbfdfe7\n- preset_name: Left 3.1.4\n  visible_pieces: 00000000000000e3f9fc7e3000c7e3f9fc70008fc7e3f9f0000f9fc7e3f1000e3f9fc7e300000000000000fdfe7fbfdfe7fbfff7fbfff7fbfff7fbfff7fbfff7ebfdfe7fbfdfc7fbfdfe7fbfdfefffdfefffdfefffdfefffdfefff9fe7fbfdfe7f3fdfe7fbfdfe7fbfff7fbfff7fbfff7fbfff7fbfff7ebfdfe7fbfdfc7fbfdfe7fbfdfefffdfefffdfefffdfefffdfefff9fe7fbfdfe7f3fdfe7fbfdfe7fbfff7fbfff7fbfff7fbfff7fbfff7ebfdfe7fbfdfc7fbfdfe7fbfdfe7fbfdfe7fbfdfe7fbfdfe7fbfdfe7fbfdfe7fbfdfe7fbfdfe7fbfdfe7f3fdfe7fbfdfe7\n- preset_name: Left 3.2\n  visible_pieces: 00000000000000e3f9fc7e3000c7e3f9fc70008fc7e3f9f0000f9fc7e3f1000e3f9fc7e300000000000008fdfe7fbfdfe7fbfff7fbfff7fbfff7fbfff7fbfff7ebfdfe7fbfdfe7fbfdfe7fbfdfefffdfefffdfefffdfefffdfefff9fe7fbfdfe7fbfdfe7fbfdfe7fbfff7fbfff7fbfff7fbfff7fbfff7ebfdfe7fbfdfe7fbfdfe7fbfdfefffdfefffdfefffdfefffdfefff9fe7fbfdfe7fbfdfe7fbfdfe7fbfff7fbfff7fbfff7fbfff7fbfff7ebfdfe7fbfdfe7fbfdfe7fbfdfe7fbfdfe7fbfdfe7fbfdfe7fbfdfe7fbfdfe7fbfdfe7fbfdfe7fbfdfe7f3fdfe7fbfdfe7\n- preset_name: Left 3.3\n  visible_pieces: 00000000000000e3f9fc7e3000c7e3f9fc70008fc7e3f9f0000f9fc7e3f1000e3f9fc7e300000000000008fdfe7fbfdfe7fbfff7fbfff7fbfff7fbfff7fbfff7fbfdfe7fbfdfe7fbfdfe7fbfdfefffdfefffdfefffdfefffdfefffdfe7fbfdfe7fbfdfe7fbfdfe7fbfff7fbfff7fbfff7fbfff7fbfff7fbfdfe7fbfdfe7fbfdfe7fbfdfefffdfefffdfefffdfefffdfefffdfe7fbfdfe7fbfdfe7fbfdfe7fbfff7fbfff7fbfff7fbfff7fbfff7fbfdfe7fbfdfe7fbfdfe7fbfdfe7fbfdfe7fbfdfe7fbfdfe7fbfdfe7fbfdfe7fbfdfe7fbfdfe7fbfdfe7fbfdfe7fbfdfe7\n- preset_name: Right 1.1.1\n  visible_pieces: 0000000000000000000000000000c1e07000000083c1e00000000783c10000000000000000000000000008fdfe7fbfdfe7fbaae7fbaae7fbaae7fbaae7fbaae7fbfdfe7fbfdfe7fbfdfe7fbfdfaaafdfafbfdfafbfdfafbfdfaaafdfe7fbfdfe7fbfdfe7fbfdfe7fbaae7fbefe7fbefe7fbefe7fbaae7fbfdfe7fbfdfe7fbfdfe7fbfdfaaafdfafbfdfafbfdfafbfdfaaafdfe7fbfdfe7fbfdfe7fbfdfe7fbaae7fbaae7fbaae7fbaae7fbaae7fbfdfe7fbfdfe7fbfdfe7fbfdfe7fbfdfe7fbfdfe7fbfdfe7fbfdfe7fbfdfe7fbfdfe7fbfdfe7fbfdfe7fbfdfe7fbfdfe7\n- preset_name: Right 1.1.2\n  visible_pieces: 00000000000000e3f9fc7e3000c7e3f9fc70008fc7e3f9f0000f9fc7e3f1000e3f9fc7e300000000000008fdfe7fbfdfe7fbfff7fbfff7fbfff7fbfff7fbfff7fbfdfe7fbfdfe7fbfdfe7fbfdfefffdfefffdfefffdfefffdfefffdfe7fbfdfe7fbfdfe7fbfdfe7fbfff7fbfff7fbfff7fbfff7fbfff7fbfdfe7fbfdfe7fbfdfe7fbfdfefffdfefffdfefffdfefffdfefffdfe7fbfdfe7fbfdfe7fbfdfe7fbfff7fbfff7fbfff7fbfff7fbfff7fbfdfe7fbfdfe7fbfdfe7fbfdfe7fbfdfe7fbfdfe7fbfdfe7fbfdfe7fbfdfe7fbfdfe7fbfdfe7fbfdfe7fbfdfe7fbfdfe7\n- preset_name: Right 1.1.3\n  visible_pieces: 00000000000000e3f9fc7e3000c7e3f9fc70008fc7e3f9f0000f9fc7e3f1000e3f9fc7e300000000000008fdfe7fbfdfe7fbfff7fbfff7fbfff7fbfff7fbfff7fbfdfe7fbfdfe7fbfdfe7fbfdfefffdfefffdfefffdfefffdfefffdfe7fbfdfe7fbfdfe7fbfdfe7fbfff7fbfff7fbfff7fbfff7fbfff7fbfdfe7fbfdfe7fbfdfe7fbfdfefffdfefffdfefffdfefffdfefffdfe7fbfdfe7fbfdfe7fbfdfe7fbfff7fbfff7fbfff7fbfff7fbfff7fbfdfe7fbfdfe7fbfdfe7fbfdfefffffffffbfdfffffffff7fbffffffffffe7ffffffffffdfefffffffffbfdfe7fbfdfe7\n- preset_name: Right 1.2.1\n  visible_pieces: 00000000000000e3f9fc7e3000c7e3f9fc70008fc7e3f9f0000f9fc7e3f1000e3f9fc7e300000000000008fdfe7fbfdfe7fbfff7fbfff7fbfff7fbfff7fbfff7fbfdfe7fbfdfe7fbfdfe7fbfdfefffdfefffdfefffdfefffdfefffdfe7fbfdfe7fbfdfe7fffdfe7fbfff7fbfff7fbfff7fbfff7fbfff7fbfdfe7fbfdfe7fbfdfe7fbfdfefffdfefffdfefffdfefffdfefffdfe7fbfdfe7fbfdfe7fbfdfe7fbfff7fbfff7fbfff7fbfff7fbfff7fbfdfe7fbfdfe7fbfdfe7fbfdfefffffffffbfdfffffffff7fbffffffffffe7ffffffffffdfefffffffffbfdfe7fbfdfe7\n- preset_name: Right 1.2.2\n  visible_pieces: 00000000000000e3f9fc7e3000c7e3f9fc70008fc7e3f9f0000f9fc7e3f1000e3f9fc7e300000000000008fdfe7fbfdfe7fbfff7fbfff7fbfff7fbfff7fbfff7fbfdfe7fbfdfe7fbffffffbfdfefffdfefffdfefffdfefffdfefffdfe7fbfdfe7fbfdfeffffffe7fbfff7fbfff7fbfff7fbfff7fbfff7fbfdfe7fbfdfe7fbffffffbfdfefffdfefffdfefffdfefffdfefffdfe7fbfdfe7fbfdfe7fbfdfe7fbfff7fbfff7fbfff7fbfff7fbfff7fbfdfe7fbfdfe7fbfdfe7fbfdfefffffffffbfdfffffffff7fbffffffffffe7ffffffffffdfefffffffffbfdfe7fbfdfe7\n- preset_name: Right 1.2.3\n  visible_pieces: 00000000000000e3f9fc7e3000c7e3f9fc70008fc7e3f9f0000f9fc7e3f1000e3f9fc7e300000000000008fdfffffffff7fbfff7fbfff7fbfff7fbfff7fbfff7fbfdfe7fbfdfe7ffffffffffdfefffdfefffdfefffdfefffdfefffdfe7fbfdfe7fbfdfffffffff7fbfff7fbfff7fbfff7fbfff7fbfff7fbfdfe7fbfdfe7ffffffffffdfefffdfefffdfefffdfefffdfefffdfe7fbfdfe7fbfdfffffffff7fbfff7fbfff7fbfff7fbfff7fbfff7fbfdfe7fbfdfe7fbfdfe7fbfdfefffffffffbfdfffffffff7fbffffffffffe7ffffffffffdfefffffffffbfdfe7fbfdfe7\n- preset_name: Right 1.2.4\n  visible_pieces: 00000000000000e3f9fc7e3000c7e3f9fc70008fc7e3f9f0000f9fc7e3f1000e3f9fc7e300000000000008fdfffffffff7fbfff7fbfff7fbfff7fbfff7fbfff7fbfdfe7fbfdfe7ffffffffffdfefffdfefffdfefffdfefffdfefffdfe7fbfdfe7fbfdfffffffff7fbfff7fbfff7fbfff7fbfff7fbfff7fbfdfe7fbfdfe7ffffffffffdfefffdfefffdfefffdfefffdfefffdfe7fbfdfe7fbfdfffffffff7fbfff7fbfff7fbfff7fbfff7fbfff7fbfdfe7fbfdfe7ffffffffffdfefffffffffbfdfffffffff7fbffffffffffe7ffffffffffdfefffffffffbfdfe7fbfdfe7\n- preset_name: Right 1.3.1\n  visible_pieces: 00000000000000e3f9fc7e3000c7e3f9fc70008fc7e3f9f0000f9fc7e3f1000e3f9fc7e300000000000008fdfffffffff7fbfff7fbfff7fbfff7fbfff7fbfff7fbfdfe7fbfdfe7ffffffffffdfefffdfefffdfefffdfefffdfefffdfe7fbfdfe7fbfdfffffffff7fbfff7fbfff7fbfff7fbfff7fbfff7fbfdfeffbfdfe7ffffffffffdfefffdfefffdfefffdfefffdfefffdfe7fbfdfe7fbfdfffffffff7fbfff7fbfff7fbfff7fbfff7fbfff7fbfdfe7fbfdfe7ffffffffffdfefffffffffbfdfffffffff7fbffffffffffe7ffffffffffdfefffffffffbfdfe7fbfdfe7\n- preset_name: Right 1.3.2\n  visible_pieces: 00000000000000e3f9fc7e3000c7e3f9fc70008fc7e3f9f0000f9fc7e3f1000e3f9fc7e300000000000008fdfffffffff7fbfff7fbfff7fbfff7fbfff7fbfff7fbfdfe7fbfdfe7ffffffffffdfefffdfefffdfefffdfefffdfefffdfe7ffffff7fbfdfffffffff7fbfff7fbfff7fbfff7fbfff7fbfff7fbfdffffffdfe7ffffffffffdfefffdfefffdfefffdfefffdfefffdfe7ffffff7fbfdfffffffff7fbfff7fbfff7fbfff7fbfff7fbfff7fbfdfe7fbfdfe7ffffffffffdfefffffffffbfdfffffffff7fbffffffffffe7ffffffffffdfefffffffffbfdfe7fbfdfe7\n- preset_name: Right 1.3.3\n  visible_pieces: 00000000000000e3f9fc7e3000c7e3f9fc70008fc7e3f9f0000f9fc7e3f1000e3f9fc7e300000000000008fdfffffffff7fbfff7fbfff7fbfff7fbfff7fbfff7fbffffffffffe7ffffffffffdfefffdfefffdfefffdfefffdfefffdfefffffffffbfdfffffffff7fbfff7fbfff7fbfff7fbfff7fbfff7fbffffffffffe7ffffffffffdfefffdfefffdfefffdfefffdfefffdfefffffffffbfdfffffffff7fbfff7fbfff7fbfff7fbfff7fbfff7fbffffffffffe7ffffffffffdfefffffffffbfdfffffffff7fbffffffffffe7ffffffffffdfefffffffffbfdfe7fbfdfe7\n- preset_name: Right 1.3.4\n  visible_pieces: 00000000000000e3f9fc7e3000c7e3f9fc70008fc7e3f9f0000f9fc7e3f1000e3f9fc7e300000000000008fdfffffffff7fbfff7fbfff7fbfff7fbfff7fbfff7fbffffffffffe7ffffffffffdfefffdfefffdfefffdfefffdfefffdfefffffffffbfdfffffffff7fbfff7fbfff7fbfff7fbfff7fbfff7fbffffffffffe7ffffffffffdfefffdfefffdfefffdfefffdfefffdfefffffffffbfdfffffffff7fbfff7fbfff7fbfff7fbfff7fbfff7fbffffffffffe7ffffffffffdfefffffffffbfdfffffffff7fbffffffffffe7ffffffffffdfefffffffffbfdfffffffff7\n- preset_name: Right 2.1.1\n  visible_pieces: 00000000000000e3f9fc7e3000c7e3f9fc70008fc7e3f9f0000f9fc7e3f1000e3f9fc7e300000000000008fdfffffffff7fbfff7fbfff7fbfff7fbfff7fbfff7fbffffffffffe7ffffffffffdfefffdfefffdfefffdfefffdfefffdfefffffffffbfdfffffffff7fbfff7fbfff7fbfffffbfff7fbfff7fbffffffffffe7ffffffffffdfefffdfefffdfefffdfefffdfefffdfefffffffffbfdfffffffff7fbfff7fbfff7fbfff7fbfff7fbfff7fbffffffffffe7ffffffffffdfefffffffffbfdfffffffff7fbffffffffffe7ffffffffffdfefffffffffbfdfffffffff7\n- preset_name: Right 2.1.2\n  visible_pieces: 00000000000000e3f9fc7e3000c7e3f9fc70008fc7e3f9f0000f9fc7e3f1000e3f9fc7e300000000000008fdfffffffff7fbfff7fbfff7fbfff7fbfff7fbfff7fbffffffffffe7ffffffffffdfefffdfefffffefffffefffffefffdfefffffffffbfdfffffffff7fbfff7fbfffffbfffffbfffffbfff7fbffffffffffe7ffffffffffdfefffdfefffffefffffefffffefffdfefffffffffbfdfffffffff7fbfff7fbfff7fbfff7fbfff7fbfff7fbffffffffffe7ffffffffffdfefffffffffbfdfffffffff7fbffffffffffe7ffffffffffdfefffffffffbfdfffffffff7\n- preset_name: Right 2.1.3\n  visible_pieces: 00000000000000e3f9fc7e3000c7e3f9fc70008fc7e3f9f0000f9fc7e3f1000e3f9fc7e300000000000008fdfffffffff7fbfffffbfffffbfffffbfffffbfffffbffffffffffe7ffffffffffdfefffffefffffefffffefffffefffffefffffffffbfdfffffffff7fbfffffbfffffbfffffbfffffbfffffbffffffffffe7ffffffffffdfefffffefffffefffffefffffefffffefffffffffbfdfffffffff7fbfffffbfffffbfffffbfffffbfffffbffffffffffe7ffffffffffdfefffffffffbfdfffffffff7fbffffffffffe7ffffffffffdfefffffffffbfdfffffffff7\n- preset_name: Right 2.1.4\n  visible_pieces: 00000000000000e3f9fc7e3000c7e3f9fc70008fc7e3f9f0000f9fc7e3f1000e3f9fc7e300000000000008fdfffffffff7fbfffffbfffffbfffffbfffffbfffffbffffffffffe7ffffffffffdfefffffefffffefffffefffffefffffefffffffffbfdfffffffff7fbfffffbfffffbfffffbfffffbfffffbffffffffffe7ffffffffffdfefffffefffffefffffefffffefffffefffffffffbfdfffffffff7fbfffffbfffffbfffffbfffffbfffffbffffffffffe7ffffffffffdfefffffffffffdfffffffffffbfffffffffff7ffffffffffffefffffffffffdfffffffff7\n- preset_name: Right 2.2\n  visible_pieces: 00000000000000e3f9fc7e3000c7e3f9fc70008fc7e3f9f0000f9fc7e3f1000e3f9fc7e300000000000008fdfffffffffffbfffffbfffffbfffffbfffffbfffffbffffffffffe7ffffffffffffefffffefffffefffffefffffefffffefffffffffbfdfffffffffffbfffffbfffffbfffffbfffffbfffffbffffffffffe7ffffffffffffefffffefffffefffffefffffefffffefffffffffbfdfffffffffffbfffffbfffffbfffffbfffffbfffffbffffffffffe7ffffffffffffefffffffffffdfffffffffffbfffffffffff7ffffffffffffefffffffffffdfffffffff7\n- preset_name: Right 2.3\n  visible_pieces: 00000000000000e3f9fc7e3000c7e3f9fc70008fc7e3f9f0000f9fc7e3f1000e3f9fc7e300000000000008fdfffffffffffbfffffbfffffbfffffbfffffbfffffbfffffffffff7ffffffffffffefffffefffffefffffefffffefffffefffffffffffdfffffffffffbfffffbfffffbfffffbfffffbfffffbfffffffffff7ffffffffffffefffffefffffefffffefffffefffffefffffffffffdfffffffffffbfffffbfffffbfffffbfffffbfffffbfffffffffff7ffffffffffffefffffffffffdfffffffffffbfffffffffff7ffffffffffffefffffffffffdffffffffff\n- preset_name: Right 3.1.1\n  visible_pieces: 00000000000000e3f9fc7e3000c7e3f9fc70008fc7e3f9f0000f9fc7e3f1000e3f9fc7e300000000000008fdfffffffffffbfffffbfffffbfffffbfffffbfffffbfffffffffff7ffffffffffffefffffefffffefffffefffffefffffefffffffffffdfffffffffffbfffffbfffffffffffbfffffbfffffbfffffffffff7ffffffffffffefffffefffffefffffefffffefffffefffffffffffdfffffffffffbfffffbfffffbfffffbfffffbfffffbfffffffffff7ffffffffffffefffffffffffdfffffffffffbfffffffffff7ffffffffffffefffffffffffdffffffffff\n- preset_name: Right 3.1.2\n  visible_pieces: 00000000000000e3f9fc7e3000c7e3f9fc70008fc7e3f9f0000f9fc7e3f1000e3f9fc7e300000000000008fdfffffffffffbfffffbfffffbfffffbfffffbfffffbfffffffffff7ffffffffffffefffffffffffffffffffffffefffffefffffffffffdfffffffffffbfffffffffffffffffffffffbfffffbfffffffffff7ffffffffffffefffffffffffffffffffffffefffffefffffffffffdfffffffffffbfffffbfffffbfffffbfffffbfffffbfffffffffff7ffffffffffffefffffffffffdfffffffffffbfffffffffff7ffffffffffffefffffffffffdffffffffff\n- preset_name: Right 3.1.3\n  visible_pieces: 00000000000000e3f9fc7e3000c7e3f9fc70008fc7e3f9f0000f9fc7e3f1000e3f9fc7e300000000000008fdfffffffffffffffffffffffffffffffffffffffffbfffffffffff7ffffffffffffffffffffffffffffffffffffffffffefffffffffffdfffffffffffffffffffffffffffffffffffffffffbfffffffffff7ffffffffffffffffffffffffffffffffffffffffffefffffffffffdfffffffffffffffffffffffffffffffffffffffffbfffffffffff7ffffffffffffefffffffffffdfffffffffffbfffffffffff7ffffffffffffefffffffffffdffffffffff\n- preset_name: Right 3.1.4\n  visible_pieces: 00000000000000e3f9fc7e3000c7e3f9fc70008fc7e3f9f0000f9fc7e3f1000e3f9fc7e300000000000008fdfffffffffffffffffffffffffffffffffffffffffbfffffffffff7ffffffffffffffffffffffffffffffffffffffffffefffffffffffdfffffffffffffffffffffffffffffffffffffffffbfffffffffff7ffffffffffffffffffffffffffffffffffffffffffefffffffffffdfffffffffffffffffffffffffffffffffffffffffbfffffffffff7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdffffffffff\n- preset_name: Right 3.2\n  visible_pieces: 00000000000000e3f9fc7e3000c7e3f9fc70008fc7e3f9f0000f9fc7e3f1000e3f9fc7e300000000000008fffffffffffffffffffffffffffffffffffffffffffbffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffffffffffffffffffffffffffffffffffffffffffffffffffbffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffffffffffffffffffffffffffffffffffffffffffffffffffbfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdffffffffff\n- preset_name: Right 3.3\n  visible_pieces: 00000000000000e3f9fc7e3000c7e3f9fc70008fc7e3f9f0000f9fc7e3f1000e3f9fc7e300000000000008ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\n- preset_name: RLC 1\n  visible_pieces: 00000000000000e3f9fc7e3000c7e3f9fc70008fc7e3f9f0000f9fc7e3f1000e3f9fc7e3000c7e3f9fc70008fc7e3f9f00ebffd7ebffd7ebffd7ebffd7ebffd700f9fc7e3f1000e3f9fc7e308fef7f9fef7f9fef7f9fef7f9fef7f10c7e3f9fc70008fc7e3f9f00ebffd7ebffd7ebffd7ebffd7ebffd700f9fc7e3f1000e3f9fc7e308fef7f9fef7f9fef7f9fef7f9fef7f10c7e3f9fc70008fc7e3f9f00ebffd7ebffd7ebffd7ebffd7ebffd700f9fc7e3f1000000000000000c7e3f9fc70008fc7e3f9f0000f9fc7e3f1000e3f9fc7e3000c7e3f9fc700000000000000\n- preset_name: RLC 2\n  visible_pieces: 00f9fc7e3f1000e3f9fc7e3000c7e3f9fc70008fc7e3f9f0000f9fc7e3f1000e3f9fc7e3000c7e3f9fc70008fc7e3f9f00ebffd7ebffd7ebffd7ebffd7ebffd700f9fc7e3f1000e3f9fc7e308fef7f9fef7f9fef7f9fef7f9fef7f10c7e3f9fc70008fc7e3f9f00ebffd7ebffd7ebffd7ebffd7ebffd700f9fc7e3f1000e3f9fc7e308fef7f9fef7f9fef7f9fef7f9fef7f10c7e3f9fc70008fc7e3f9f00ebffd7ebffd7ebffd7ebffd7ebffd700f9fc7e3f1000000000000000c7e3f9fc70008fc7e3f9f0000f9fc7e3f1000e3f9fc7e3000c7e3f9fc700000000000000\n- preset_name: RLC 3\n  visible_pieces: 00f9fc7e3f1000e3f9fc7e3f10c7e3f9fc7e308fc7e3f9fc700f9fc7e3f9f00e3f9fc7e3f10c7e3f9fc70008fc7e3f9f00ebffd7ebffd7ebffd7ebffd7ebffd700f9fc7e3f1000e3f9fc7e308fef7f9fef7f9fef7f9fef7f9fef7f10c7e3f9fc70008fc7e3f9f00ebffd7ebffd7ebffd7ebffd7ebffd700f9fc7e3f1000e3f9fc7e308fef7f9fef7f9fef7f9fef7f9fef7f10c7e3f9fc70008fc7e3f9f00ebffd7ebffd7ebffd7ebffd7ebffd700f9fc7e3f1000000000000000c7e3f9fc70008fc7e3f9f0000f9fc7e3f1000e3f9fc7e3000c7e3f9fc700000000000000\n- preset_name: RLC 4\n  visible_pieces: 00f9fc7e3f10c7e3f9fc7e3f9fc7e3f9fc7e3f9fc7e3f9fc7e3f9fc7e3f9fc7e3f9fc7e3f10c7e3f9fc70008fc7e3f9f00ebffd7ebffd7ebffd7ebffd7ebffd700f9fc7e3f1000e3f9fc7e308fef7f9fef7f9fef7f9fef7f9fef7f10c7e3f9fc70008fc7e3f9f00ebffd7ebffd7ebffd7ebffd7ebffd700f9fc7e3f1000e3f9fc7e308fef7f9fef7f9fef7f9fef7f9fef7f10c7e3f9fc70008fc7e3f9f00ebffd7ebffd7ebffd7ebffd7ebffd700f9fc7e3f1000000000000000c7e3f9fc70008fc7e3f9f0000f9fc7e3f1000e3f9fc7e3000c7e3f9fc700000000000000\n- preset_name: RLC 5\n  visible_pieces: 00f9fc7e3f10c7ffffffff7f9feffffffffe3fdffffffffd7ebffffffffbfc7ffffffff7f10c7e3f9fc70008fc7e3f9f00ebffd7ebffd7ebffd7ebffd7ebffd700f9fc7e3f1000e3f9fc7e308fef7f9fef7f9fef7f9fef7f9fef7f10c7e3f9fc70008fc7e3f9f00ebffd7ebffd7ebffd7ebffd7ebffd700f9fc7e3f1000e3f9fc7e308fef7f9fef7f9fef7f9fef7f9fef7f10c7e3f9fc70008fc7e3f9f00ebffd7ebffd7ebffd7ebffd7ebffd700f9fc7e3f1000000000000000c7e3f9fc70008fc7e3f9f0000f9fc7e3f1000e3f9fc7e3000c7e3f9fc700000000000000\n- preset_name: ELC 1\n  visible_pieces: 00000000000000000000000000000000000000000000000000000000000000000000000008f00000000008f70381c060ff140028140028140028140028140028ff060381c0efff1c060381cf701080601080601080601080601080ef381c06038fff70381c060ff140028140028140028140028140028ff060381c0efff1c060381cf701080601080601080601080601080ef381c06038fff70381c060ff140028140028140028140028140028ff060381c0ef10000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n- preset_name: ELC 2\n  visible_pieces: 00000000000000000000000000000000000000000000000000000000000000000000000008f20180402008f70381c060ff140028140028140028140028140028ff060381c0efff1c060381cf701080601080601080601080601080ef381c06038fff70381c060ff140028140028140028140028140028ff060381c0efff1c060381cf701080601080601080601080601080ef381c06038fff70381c060ff140028140028140028140028140028ff060381c0ef10000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n- preset_name: ELC 3\n  visible_pieces: 00000000000000000000000000000000000000000000000000000000000000000000000008f201804020ebf70381c060ff140028140028140028140028140028ff060381c0efff1c060381cf701080601080601080601080601080ef381c06038fff70381c060ff140028140028140028140028140028ff060381c0efff1c060381cf701080601080601080601080601080ef381c06038fff70381c060ff140028140028140028140028140028ff060381c0ef10000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n- preset_name: ELC 4\n  visible_pieces: 00000000000000000000000000000000000000000000000000000000000000000000000008f281c06038ebf70381c060ff140028140028140028140028140028ff060381c0efff1c060381cf701080601080601080601080601080ef381c06038fff70381c060ff140028140028140028140028140028ff060381c0efff1c060381cf701080601080601080601080601080ef381c06038fff70381c060ff140028140028140028140028140028ff060381c0ef10000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n- preset_name: ELC 5\n  visible_pieces: e3000000000000000000000000000000000000000000000000000000000000000000000008f281c06038ebf70381c060ff140028140028140028140028140028ff060381c0efff1c060381cf701080601080601080601080601080ef381c06038fff70381c060ff140028140028140028140028140028ff060381c0efff1c060381cf701080601080601080601080601080ef381c06038fff70381c060ff140028140028140028140028140028ff060381c0ef10000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n- preset_name: ELC 6\n  visible_pieces: eb040201800000000000000000000000000000000000000000000000000000000000000008f281c06038ebf70381c060ff140028140028140028140028140028ff060381c0efff1c060381cf701080601080601080601080601080ef381c06038fff70381c060ff140028140028140028140028140028ff060381c0efff1c060381cf701080601080601080601080601080ef381c06038fff70381c060ff140028140028140028140028140028ff060381c0ef10000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n- preset_name: ELC 7\n  visible_pieces: eb040201808f00000000000000000000000000000000000000000000000000000000000008f281c06038ebf70381c060ff140028140028140028140028140028ff060381c0efff1c060381cf701080601080601080601080601080ef381c06038fff70381c060ff140028140028140028140028140028ff060381c0efff1c060381cf701080601080601080601080601080ef381c06038fff70381c060ff140028140028140028140028140028ff060381c0ef10000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n- preset_name: ELC 8\n  visible_pieces: eb060381c0af00000000000000000000000000000000000000000000000000000000000008f281c06038ebf70381c060ff140028140028140028140028140028ff060381c0efff1c060381cf701080601080601080601080601080ef381c06038fff70381c060ff140028140028140028140028140028ff060381c0efff1c060381cf701080601080601080601080601080ef381c06038fff70381c060ff140028140028140028140028140028ff060381c0ef10000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n- preset_name: ELC 9\n  visible_pieces: eb060381c0af08000000000000100000000000200000000000400000000000800000000008f281c06038ebf70381c060ff140028140028140028140028140028ff060381c0efff1c060381cf701080601080601080601080601080ef381c06038fff70381c060ff140028140028140028140028140028ff060381c0efff1c060381cf701080601080601080601080601080ef381c06038fff70381c060ff140028140028140028140028140028ff060381c0ef10000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n- preset_name: ELC 10\n  visible_pieces: eb060381c0af28000000000040100000000080200000000001400000000002800000000008f281c06038ebf70381c060ff140028140028140028140028140028ff060381c0efff1c060381cf701080601080601080601080601080ef381c06038fff70381c060ff140028140028140028140028140028ff060381c0efff1c060381cf701080601080601080601080601080ef381c06038fff70381c060ff140028140028140028140028140028ff060381c0ef10000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n- preset_name: ELC 11\n  visible_pieces: eb060381c0af28000000008040100000000180200000000201400000000402800000000808f281c06038ebf70381c060ff140028140028140028140028140028ff060381c0efff1c060381cf701080601080601080601080601080ef381c06038fff70381c060ff140028140028140028140028140028ff060381c0efff1c060381cf701080601080601080601080601080ef381c06038fff70381c060ff140028140028140028140028140028ff060381c0ef10000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n- preset_name: ELC 12\n  visible_pieces: eb060381c0af280000000080601000000001c020000000028140000000040380000000080af281c06038ebf70381c060ff140028140028140028140028140028ff060381c0efff1c060381cf701080601080601080601080601080ef381c06038fff70381c060ff140028140028140028140028140028ff060381c0efff1c060381cf701080601080601080601080601080ef381c06038fff70381c060ff140028140028140028140028140028ff060381c0ef10000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n- preset_name: OLC\n  visible_pieces: fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff70000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n- preset_name: 2c PLC\n  visible_pieces: 000000100000000000200000000000400000040201f7402010000001000000000002000000000004000000000008000000000000000000808101000000000000000000100000000000200000000000000000020604000000000000000000400000000201e340200808101808101ebffd780810180810100402c7804000000002000000000000000000206040000000000000000004000000000008000000000000000000808101000000000000000000100000000000000000000000400000000000800000000402c7804000000002000000000004000000000000000000\n- preset_name: PLC cross\n  visible_pieces: 000000000000c7ffffffff7f9feffffffffe3fdffffffffd7ebffffffffbfc7ffffffff7f9feffffffffe30000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n- preset_name: PLC F2L\n  visible_pieces: 000000000000effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff70000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n- preset_name: PLC LL\n  visible_pieces: fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff70000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n- preset_name: Done\n  visible_pieces: ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\n</code></pre>"},{"location":"methods/3x3x3x3/3block/#summary","title":"Summary","text":"<ol> <li>4-Cross \u2014 Solve four out of the six cross pieces</li> <li>Middle Block \u2014 Solve four 2c3c pairs between the four cross pieces</li> <li>Left Block \u2014 Blockbuild or pair pieces to solve the Left Cell</li> <li>Right Block \u2014 Blockbuild or pair pieces to solve the Right Cell</li> <li>OLL-4 - Orient LC 2c, 3c, and 4c pieces using 3D algorithms</li> <li>PLL-4 - Permute LC 2c, 3c, and 4c pieces using 3D techniques</li> </ol>"},{"location":"methods/3x3x3x3/3block/#steps","title":"Steps","text":""},{"location":"methods/3x3x3x3/3block/#4-cross","title":"4-Cross","text":"<p>Solve the four 2c cross pieces in a ring in the M slice. Leave the L and R cross pieces unsolved.</p>"},{"location":"methods/3x3x3x3/3block/#middle-block","title":"Middle Block","text":"<p>Tip</p> <p>For the entirety of F2L, the last layer is held on the I cell, as opposed to CFOP where it is held on the U cell. This allows us to see more information at once.</p> <p>Create and insert 4 F2L-a (2c3c) pairs into the 4/6 cross. This will solve 2/3 of the M slice. Because the Left and Right cells don\u2019t have their cross pieces, you can use them to aid with building and inserting the pairs.</p>"},{"location":"methods/3x3x3x3/3block/#left-block","title":"Left Block","text":"<p>Solve the Left cell. This is done in 3 blocks, hence the name of the method. The first block consists of the cross edge, followed by two 2c3c F2L-a pairs that are opposite of each other. This solves the middle column of the left cell. The final two blocks consist of a 2c3c pair, and two 3c4c pairs.</p>"},{"location":"methods/3x3x3x3/3block/#right-block","title":"Right Block","text":"<p>Solve the Right cell. This is also done by breaking it up into the 3 blocks, except now you don\u2019t have an empty opposite cell to aid you in making pairs. You could just solve the cross edge, and then finish the whole solve using CFOP style F2L and Last Cell. You can also do it the 3 blocks way, except having less freedom means that it is slightly trickier to set up the correct cases.</p>"},{"location":"methods/3x3x3x3/3block/#last-layer","title":"Last Layer","text":"<p>This is done in the exact same way as CFOP.</p>"},{"location":"methods/3x3x3x3/3block/#big-cubes","title":"Big cubes","text":"<p>Pair up only the pieces you need during the step of 3-block you\u2019re on. For example: after solving 4 centers, pair up 4 cross ridges. For last cell, you can either just orient everything, and then do an RKT 4<sup>3</sup> solve, or you can pair everything and end up with an RKT 3<sup>3</sup> solve.</p>"},{"location":"methods/3x3x3x3/cfop/","title":"CFOP","text":"<p>3D CFOP can be easily implemented on the 4D Rubik\u2019s Cube. This method was also called Sheerin-Zhao Method (Hybrid) V1, named after the people who discovered its higher dimensional equivalence.</p> <p>Prerequisites</p> <ul> <li>Knowledge of how the 4D puzzle moves</li> <li>Notation</li> <li>RKT</li> <li>3D CFOP with 2-look OLL &amp; PLL</li> </ul>"},{"location":"methods/3x3x3x3/cfop/#summary","title":"Summary","text":"<ol> <li>Cross \u2014 Build a cross by solving six 2c pieces on the O or D cell</li> <li>F2L-a \u2014 Join twelve 2c+3c pairs together and insert them into the first two layers</li> <li>F2L-b \u2014 Join eight 3c+4c pairs together and insert them into the first two layers</li> <li>OLL-4 \u2014 Orient LC 2c, 3c, and 4c pieces using 3D EOLL and OCLL</li> <li>PLL-4 \u2014 Permute 2c pieces of the LL using EPLL, then solve the rest like a 3<sup>3</sup></li> </ol>"},{"location":"methods/3x3x3x3/cfop/#steps","title":"Steps","text":""},{"location":"methods/3x3x3x3/cfop/#cross","title":"Cross","text":"<p>Using the same techniques from 3D, intuitively place the cross 2c pieces such that they lie between their centers, correctly oriented. After this step, the cross should be kept on the D layer.</p>"},{"location":"methods/3x3x3x3/cfop/#f2l-a","title":"F2L-a","text":"<p>Find a pair of 2c and 3c pieces. Find a way to bring them onto the P slice using easy intuitive setups. Now, you should be able to pair them up using \u201cnormal\u201d looking 3x3x3 moves.</p> <p>Repeat this until you have solved all 12 2c3c pairs of F2L-a.</p> <p>Misoriented pairs</p> <p>It is possible to insert a pair into its slot, but rotated in place. Make sure to line it up so that it looks like a normal 3x3x3 case before inserting the pair. Oftentimes, this just means doing a Ux2 or Uz2 move beforehand.</p>"},{"location":"methods/3x3x3x3/cfop/#f2l-b","title":"F2L-b","text":"<p>Find any 3c piece that doesn\u2019t have a U cell colour. Find its respective 4c piece.</p> <ul> <li>If they both have the same coloured sticker on the U cell, use RKT on the U cell to pair them up.</li> <li>If the 4c is stuck in a slot in the D cell, bring the edge over the slot such that its colour on the I cell matches the 4c piece\u2019s colour on the I cell. Then use RKT to pair them up.</li> <li>If the 3c is stuck in a slot in the middle layer, bring the 4c on top of it until its colour on the I cell matches the 3c piece\u2019s colour on the I cell. Then use RKT to pair them up.</li> <li>If none of the above cases occurred, then you kind of just have to fiddle around with it or pick a different pair to solve.</li> </ul> <p>Repeat for all eight 3c4c pairs of F2L-b.</p>"},{"location":"methods/3x3x3x3/cfop/#oll-4","title":"OLL-4","text":""},{"location":"methods/3x3x3x3/cfop/#2c-oll-4","title":"2c OLL-4","text":"<p>Use EOLL algorithms from 2-look OLL to orient the 2c pieces. This can always be done in 2 EOLL algorithms (or less).</p>"},{"location":"methods/3x3x3x3/cfop/#3c-oll-4","title":"3c OLL-4","text":"<p>Use RKT on the last cell to set up the slice layers of the last cell into configurations that look like possible OCLL cases. Then use the OCLL algorithms to solve that case. This can always be done in 3 OCLL algorithms (or less)</p> <p>3c monotwist</p> <p>It\u2019s possible to have just one 3c piece twisted in place. To avoid this situation, make sure that your last OCLL algorithm will solve all of the 3c pieces. For example if you have five 3c pieces left, you can\u2019t set it up into an H OCLL case, because that will leave you with one unoriented 3c piece. Instead, you can set up three of the 3c pieces into a Sune case, which would then leave you with two unsolved pieces. You can then solve those two pieces using a T or U case OCLL algorithm.</p>"},{"location":"methods/3x3x3x3/cfop/#4c-oll-4","title":"4c OLL-4","text":"<p>Use RKT on the last cell to set up the 4c pieces into possible OCLL cases. Rotate the last cell to U, such that your OCLL case is in the IU plane, then execute that algorithm with RKT on I.</p> <p>4c monoflip</p> <p>It\u2019s possible to have just one 4c piece flipped in place. To avoid this situation, make sure that your last OCLL algorithm will solve all of the 4c pieces. For example if you have five 4c pieces left, you can\u2019t set it up into an H OCLL case, because that will leave you with one unoriented 3c piece. Instead, you can set up three of the 4c pieces into a Sune case, which would then leave you with two unsolved pieces. You can then solve those two pieces using a T or U case OCLL algorithm.</p>"},{"location":"methods/3x3x3x3/cfop/#pll-4","title":"PLL-4","text":""},{"location":"methods/3x3x3x3/cfop/#2c-pll-4","title":"2c PLL-4","text":"<p>It is always possible to solve 2c permutation using just U-perms, but many cases have faster methods. There are seven cases for 2c PLL-4:</p> <ul> <li>Solved</li> <li>Adjacent swap - Do a 90-degree twist of I to turn this case into a 3-cycle, then use a 3D U-perm algorithm to solve it, such as <code>M2 U M U2 M' U M2</code> (7 STM) to cycle IL \u2192 IF \u2192 IR.</li> <li>Opposite swap - Do a 90-degree twist of I to turn this case into a pair of adjacent swaps, then use a 3D Z-perm algorithm to solve it, such as <code>M2 U M2 U M' U2 M2 U2 M'</code> (9 STM) to swap IF \u2194 IR and IB \u2194 IL.</li> <li>Adjacent 3-cycle (clockwise) - Use <code>[[RD, ID], {1-2}LO]</code> = <code>(RD ID RU IU) RO (IF RF IB RB) (RI)</code> (9 STM + 1 move RKT debt) to cycle IF \u2192 IU \u2192 IR.</li> <li>Adjacent 3-cycle (counterclockwise) - Use <code>[[RF, IF], {1-2}LI]</code> = <code>(RF IF RB IB) RI (ID RD IU RU) (RO)</code> (9 STM + 1 move RKT debt) to cycle IR \u2192 IU \u2192 IF.</li> <li>Double adjacent swap (right-handed) - Use <code>[[RU, IU] IR2 RU, IDR]</code> = <code>(RU IU RD IFR RU) IDR (RD IFR RU ID RD) (IUR)</code> (11 STM + 1 move offset) to swap IF \u2194 IU and IR \u2194 IB.</li> <li>Double adjacent swap (left-handed) - Use <code>[[RU, IU] IR2 RU, IUR]</code> = <code>(RU IU RD IFR RU) IUR (RD IFR RU ID RD) (IDR)</code> (11 STM + 1 move offset) to swap IF \u2194 ID and IR \u2194 IB.</li> </ul> <p>This is currently no known reliable way to recognize which case you have.</p>"},{"location":"methods/3x3x3x3/cfop/#pll-3","title":"PLL-3","text":"<p>From here, you use RKT to solve the rest of the puzzle like a whole 3<sup>3</sup>. The CFOP method is recommended for this because you arrive at this step inspectionless, meaning that in a speedsolve, you don\u2019t really have the time to count Edge Orientation, or plan a Roux First Block. Finding 4 cross pieces is pretty easy inspectionless.</p> <p>RKT parity</p> <p>If the \u201ctop face\u201d of the LL is 180 degrees off from the rest of the puzzle, you have to use a special 4D algorithm. See RKT for algorithms.</p> <p>RKT parity avoidance</p> <p>You can avoid RKT parity by using 2-look PLL. When you get to PLL, correct any RKT debt you have. Then put the solved LL corner in the IUFL spot. Now you can do whichever A-perm you have (clockwise or anticlockwise). Finally, just solve the 3c with EPLL algorithms.</p>"},{"location":"methods/3x3x3x3/octachoroux/","title":"Octachoroux","text":"<p>Octachoroux</p> <ul> <li><code>Algorithms:</code> 3D Roux + RKT Parity</li> <li><code>Move count:</code> way too many</li> </ul> <p>This method is Rowan Fortier\u2019s attempt to bring the Roux method to the 3x3x3x3.</p>"},{"location":"methods/3x3x3x3/octachoroux/#summary","title":"Summary","text":"<ol> <li><code>1st Block</code> \u2014 Solve a 1x2x3x3 block using blockbuilding techniques.</li> <li><code>2nd Block</code> \u2014 Solve a 1x2x3x3 block on the other side of the puzzle.</li> <li><code>CMLC</code> \u2014 Orient and permute the corners of the U cell.</li> <li><code>L/R</code> \u2014 Solve the Left and Right cells.</li> <li><code>M slice</code> - Permute the M slice.</li> </ol>"},{"location":"methods/3x3x3x3/octachoroux/#steps","title":"Steps","text":""},{"location":"methods/3x3x3x3/octachoroux/#1st-block","title":"1st Block","text":"<p>Start with the \u201ccross piece\u201d of the 1st block. Then build four 2c3c and four 3c4c pairs around it, to complete the 1x2x3x3 block. No RKT is needed for this step, as none of the other pieces have been solved yet.</p>"},{"location":"methods/3x3x3x3/octachoroux/#2nd-block","title":"2nd Block","text":"<p>Use the free M slice to help you build the pairs to make the 2nd 1x2x3x3 block on the opposite side of the puzzle from the 1st block.</p>"},{"location":"methods/3x3x3x3/octachoroux/#cmlc","title":"CMLC","text":"<p>Use the same strategies from CFOP, but only for the 4c pieces. This step feels like solving the last cell of a 2<sup>4</sup>, except you have to use 3<sup>4</sup> algorithms so that you don\u2019t mess up other pieces.</p>"},{"location":"methods/3x3x3x3/octachoroux/#lr","title":"L/R","text":"<p>Insert the UR and UL 2c pieces using setup moves and EPLL algorithms. Now set up the 3c pieces that need to go to L/R into the IDF spot with the L/R colour on the I cell and the U colour on the D cell. Then move the spot where that L/R edge needs to go above that edge and insert that piece using the RKT algorithm of M D2 M\u2019 D2 (2RO\u2019 IF\u2019 RO2 IF 2RO IF\u2019 RO2 IF). Repeat this for all of the edges (pretty tedious).</p>"},{"location":"methods/3x3x3x3/octachoroux/#m-slice","title":"M slice","text":"<p>Now all that\u2019s left to be solve is the M slice of the puzzle. Notice how the M slice is more like a 3<sup>3</sup> than the PLC of CFOP. The centers are already permuted too! However, this step is much more painful than normal RKT PLC due to the strange parities that can happen.</p> <p>tricky situations</p> <ul> <li>A 3c piece can look \u201cmirrored\u201d in place.</li> <li>A single 3c piece can be rotated wrong.</li> </ul>"},{"location":"no/","title":"No","text":""},{"location":"no/#_1","title":"No","text":"<p> NO </p>"},{"location":"puzzles/","title":"Puzzles","text":"<p>In hypercubing, we generalize the notion of a twisty puzzle beyond 3D space. The best introduction to hypercubing is the standard 3x3x3x3 4D Rubik\u2019s cube.</p> <p>See the navigation sidebar for a list of puzzles that have wiki pages.</p>"},{"location":"puzzles/2x2x2x2/","title":"2x2x2x2","text":"<p>2x2x2x2</p> <p></p> <p>Shape: Tesseract</p> <p>Pieces: 16</p>"},{"location":"puzzles/2x2x2x2/#history","title":"History","text":"<p>The 2x2x2x2 (normally referred to as the 2<sup>4</sup>) is a 4-dimensional twisty puzzle in the shape of a hypercube that is cut in half on each of the 4 axes.</p> <p>The first official 2<sup>4</sup> solve on the Hall of Fame was done by Jay Berkenbilt in 2004 using MC4D, although it was probably solved several times before then.</p>"},{"location":"puzzles/2x2x2x2/#permutations","title":"Permutations","text":"<p>The 16 4c pieces of the 2x2x2x2 can be placed in any even permutation. In order to identify positions that are a whole-puzzle rotation apart from each other, we fix one 4c, leaving 15 4c pieces that can be permuted. Each 4c can be placed in \\(\\frac{4!}{2}\\) orientations, except the last, which can be placed in only \\(4\\) orientations. Thus, the number of permutations of the puzzle is \\(\\frac{15!}{2} \\cdot \\left(\\frac{4!}{2}\\right)^{14} \\cdot 4 \\approx 3.36 \\cdot 10^{27}.\\)</p>"},{"location":"puzzles/2x2x2x2/#physical-version","title":"Physical version","text":"<p>Since 2013, Melinda Green has been refining her physical 2x2x2x2. See her project home page for more details.</p>"},{"location":"puzzles/2x2x2x2/#see-also","title":"See also","text":"<ul> <li>Leaderboard section for 2x2x2x2</li> </ul>"},{"location":"puzzles/3x3x3/","title":"3x3x3","text":"<p>There\u2019s not much we can say about the traditional Rubik\u2019s cube that hasn\u2019t already been said on Wikipedia or the Speedsolving.com Wiki.</p>"},{"location":"puzzles/3x3x3/#333-with-1d-vision","title":"3x3x3 with 1D vision","text":"<p>What if you were a 2D being trying to solve a 3D Rubik\u2019s Cube? This is directly analogous to us 3D beings trying to solve a 4D cube, and MagicCube3D has a setting to view the 3x3x3 with 1D vision. The first known solver was Markk in December 2022.</p>"},{"location":"puzzles/3x3x3x3/","title":"3x3x3x3","text":"<p>3x3x3x3</p> <p></p> <p>Shape: Tesseract</p> <p>Pieces: 8 1c, 24 2c, 32 3c, 16 4c</p> <p>The 3x3x3x3 (normally referred to as the 3<sup>4</sup>) is a 4-dimensional twisty puzzle in the shape of a hypercube that has 2 cuts along each of the 4 axes. It is a direct higher dimensional analogy of the 3x3x3 Rubik\u2019s Cube.</p> <p>The 3<sup>4</sup> is recommended as one\u2019s first introduction to solving higher dimensional puzzles.</p>"},{"location":"puzzles/3x3x3x3/#pieces","title":"Pieces","text":"<p>The 3<sup>4</sup> has 81 hypercubies, of which 72 are movable. It has 8 1c, 24 2c, 32 3c, and 16 4c pieces. The 3c pieces can be rotated in 6 different ways, and the 4c pieces in 12 different ways.</p>"},{"location":"puzzles/3x3x3x3/#turning","title":"Turning","text":"<p>Each turn of the 3<sup>4</sup> is a rotation of one of its cubic cells (which can be oriented in any of 24 orientations of a cube). A normal move disturbs 8 4c, 12 3c, and 4 2c pieces.</p>"},{"location":"puzzles/3x3x3x3/#history","title":"History","text":"<p>The 3<sup>4</sup> has always been the main focus of the community. The first solve was done by Don Hatch in ~1988 using MC4D. Afterwards, the Hall of Fame gradually began to increase in size. It eventually closed on December 7th, 2022 due to it reaching 500 solvers.</p>"},{"location":"puzzles/3x3x3x3/#permutations","title":"Permutations","text":"<p>The 16 4c pieces of the 3x3x3x3 can be placed in any even permutation. Each 4c can be placed in \\(\\frac{4!}{2}\\) orientations, except the last, which can be placed in only \\(4\\) orientations, due to the existence of monoflip. The 32 3c pieces can be in any permutation, and can have \\(3!\\) orientations, except the last, which can only have \\(3\\). The 24 2c pieces can be in any permutation, and can have \\(2!\\) orientations, except the last, which is determined by the others. However, the permutation parity of the 2c pieces and 3c pieces are linked. Thus, the number of permutations of the puzzle is \\(\\left[\\frac{16!}{2} \\cdot \\left(\\frac{4!}{2}\\right)^{15} \\cdot 4\\right] \\cdot \\left[32! \\cdot 3!^{31} \\cdot 3\\right] \\cdot \\left[\\frac{24!}{2} \\cdot 2!^{23}\\right] \\approx 1.76 \\cdot 10^{120}.\\)</p>"},{"location":"puzzles/3x3x3x3/#speedsolving","title":"Speedsolving","text":"<p>(See the leaderboards for the current records)</p> <p>There were a few hypercube speedsolving competitions during the early days of hypercubing, with the controversy at the time being if they were to allow macros or not. One of the first competitions happened in 2010, with the fastest time being 15:57 by Mateusz Burnicki (using prepared macros) Some contestants received a t-shirt with an image of the 3<sup>4</sup> in MC4D on it.</p> <p>In mid 2017, The speedsolving scene was single handedly revived by Tetrian22, lowering his best from 37:07 to 10:11 in just under 10 months.</p> <p>Starting in November 2022, a 3<sup>4</sup> speedsolving frenzy began due to the popularity of the recently created Hyperspeedcube program, and its keyboard controls. The record bounced between Hactar and Grant as it smashed through all the barriers, finally lowering to sub-2 minutes in May 2023.</p>"},{"location":"puzzles/3x3x3x3x3/","title":"3x3x3x3x3","text":"<p>3x3x3x3x3</p> <p></p> <p>Shape: Penteract</p> <p>Pieces: 10 1c, 40 2c, 80 3c, 80 4c, 32 5c</p> <p>The 3x3x3x3x3 or 3<sup>5</sup> is a 5-dimensional twisty puzzle in the shape of a penteract that has 2 cuts along each of the 5 axes. The 3<sup>5</sup> is recommended as one\u2019s first introduction to solving 5D puzzles.</p>"},{"location":"puzzles/3x3x3x3x3/#pieces","title":"Pieces","text":"<p>The 3<sup>5</sup> has 243 hypercubies, of which 232 are movable. It has 10 1c, 40 2c, 80 3c, 80 4c, and 32 5c pieces. 1c pieces are called centers, 2c pieces ridges, 3c pieces peaks, 4c pieces edges, and 5c pieces corners.</p>"},{"location":"puzzles/3x3x3x3x3/#turning","title":"Turning","text":"<p>Each turn of the 3<sup>5</sup> is a rotation of one of its hypercube cells. A hypercube can be reoriented in 192 different ways; a lot of ways just to turn a single side! However in most programs, only some of these moves are able to be done with 2 clicks.</p>"},{"location":"puzzles/3x3x3x3x3/#programs","title":"Programs","text":"<p>There are 3 programs that currently have implementations of the 3<sup>5</sup>: MPU, MC5D, and MC7D. When HSC2 releases, it will be the 3<sup>5</sup> program of choice with its amazing piece filters and keybind settings. Until then, the 3 programs all come with their different pros and cons.</p>"},{"location":"puzzles/3x3x3x3x3/#mpu","title":"MPU","text":"<p>3<sup>5</sup> in MPU</p> <p></p> <p>Magic Puzzle Ultimate objectively has the nicest view of the 3<sup>5</sup> out of all the programs. The projection is as symmetrical as possible, treating all dimensions equally. It lacks piece filters such that you can only toggle all pieces with a certain number of colours on or off, which makes finding pieces extremely time consuming. To turn the sides you have to click on 3 different 5c pieces.</p>"},{"location":"puzzles/3x3x3x3x3/#mc5d","title":"MC5D","text":"<p>3<sup>5</sup> in MC5D</p> <p></p> <p>This program was designed specifically for 5D puzzles. The pros are that it has a feature to locate a certain piece, as well as an extensive macro system. However, the puzzle is projected in an interesting way that uses the 4D inside-to-outside projection twice. This projection makes many of the stickers overlap. Additionally, the program uses Euler angles for rotation, meaning that sometimes you get stuck at the poles when reorienting the puzzle with the mouse. There are some buttons in the bottom-right of the UI that rotate the puzzle to make up for those issues.</p>"},{"location":"puzzles/3x3x3x3x3/#mc7d","title":"MC7D","text":"<p>3<sup>5</sup> in MC7D</p> <p></p> <p>Magic Cube 7D was made by Andrey Astrelin, and has a different way of projecting higher dimensions. The dimensions higher than 4 are represented with stickers that are smaller than the others. Many of them are also duplicates of each other because they are attached to the other stickers of that piece. While not being the nicest to look at, it does have very useable piece filters and nice 2-click controls, making it a prime candidate to use for one\u2019s first 3<sup>5</sup> solve.</p>"},{"location":"puzzles/3x3x3x3x3/#permutations","title":"Permutations","text":"<p>The 32 5c pieces of the 3x3x3x3x3 can be placed in any even permutation, and each 5c can be placed in \\(\\frac{5!}{2}\\) orientations, including the last one. The 80 4c pieces can be in any even permutation, and can each have \\(4!\\) orientations, except the last which can only have \\(\\frac{4!}{2}\\) orientations. The 80 3c pieces can be in any permutation, and can each have \\(3!\\) orientations, except the last which can only have \\(\\frac{3!}{2}\\) orientations. Finally, the 40 2c pieces can be in any permutation with the same parity as that of the 3c pieces, and each one can have 2 orientations, except the last, whose orientation is determined by the rest of the 2c pieces.<sup>1</sup> Thus, the number of permutations of the puzzle is \\(\\left[\\frac{32!}{2} \\cdot \\left(\\frac{5!}{2}\\right)^{32}\\right] \\cdot \\left[\\frac{80!}{2} \\cdot \\frac{4!^{80}}{2}\\right] \\cdot \\left[80! \\cdot \\frac{3!^{80}}{2}\\right] \\cdot \\left[\\frac{40!}{2} \\cdot 2^{39}\\right] \\approx 7.02 \\cdot 10^{560}.\\)</p>"},{"location":"puzzles/3x3x3x3x3/#speedsolving","title":"Speedsolving","text":"<p>(See the leaderboards for the current records)</p> <p>A full solve of the 3<sup>5</sup> had not even been recorded until 2024-03-21 with Rowan Fortier\u2019s first solve, uploading all 15 hours of footage to YouTube. Sadly this did not count as the first speedsolve because it was done over multiple days in different sessions. But a few days later, Luna managed to do it in one sitting, achieving a time of 3h 39m, automatically getting the first world record.</p> <ol> <li> <p>http://www.gravitation3d.com/magiccube5d/permutations.html \u21a9</p> </li> </ol>"},{"location":"puzzles/4d-skewb/","title":"4D Skewb","text":"<p>There are many puzzles that could be called a \u20184D skewb\u2019. Each one has some characteristics similar to the skewb. By constructing the skewb in a certain way, and replacing 3D objects of the definition with similar 4D objects, you can construct a 4D puzzle that has some things in common with the skewb.</p>"},{"location":"puzzles/4d-skewb/#cube-like","title":"Cube-like","text":""},{"location":"puzzles/4d-skewb/#vertex-turning-hypercube","title":"Vertex turning hypercube","text":"<p>Vertex turning hypercube</p> <p></p> <p>The skewb is a vertex-turning cube with the cuts passing through the origin. If you replace the 3D cube in the definition with the 4D hypercube, you get the half-cut vertex-turning hypercube. This puzzle has 32 edge pieces, 64 X-centers, and 8 center pieces. Both the X-centers and the centers are 1c pieces. </p> <p>In three dimensions, a plane perpendicular to the vertex axis passes through 1 corner, then 3, then 3, then 1 corner. This causes a plane passing through the origin to go between the two layers of 3 corners, which is why the skewb has corners. In four dimensions, a hyperplane perpendicular to the vertex axis passes through 1, 4, 6, 4, then 1 corner. Therefore, a hyperplane passing through the origin passes directly through 6 vertices, and there are no corner pieces on this 4D puzzle. Similarly, the pattern of cuts on one cell of the puzzle looks like a dino cube, not a skewb.</p>"},{"location":"puzzles/4d-skewb/#skewb-lookalike","title":"Skewb lookalike","text":"<p>Skewb lookalike</p> <p></p> <p>You can place a cut that passes between the layers of four and six corners. Through this process, you get two cuts per axis and three layers per axis. This puzzle has 16 vertex pieces, 64 X-centers, and 24 ridge pieces. Like the skewb, the vertex pieces are separated into two orbits, but this puzzle has a middle layer on each axis. The cut pattern on the cells of this puzzle resembles a 3D skewb with additional trivial tips. </p> <p>By rectifying the hypercube, the trivial tip cuts on the cut patterns of the cells are removed, meaning the cells look like cuboctahedral skewbs.</p>"},{"location":"puzzles/4d-skewb/#demi-vertex-turning-hypercube","title":"Demi vertex turning hypercube","text":"<p>Demi vertex turning hypercube</p> <p></p> <p>On the cube, the vertices can be separated into two tetrahedral subsets (the orbits of the skewb\u2019s corners). Each cut corresponds to one corner in the tetrahedron. On the hypercube, a similar partitioning of the vertices results in two sets of 8, each at the vertices of the 16-cell, or dually, the facets of a differently-oriented hypercube. If you only cut along vertex axes corresponding to these cuts, you will get a puzzle with only 4 cuts, half as many as the vertex turning hypercube. This puzzle has 8 corners and 8 centers. Unlike on the skewb, only half of the vertices of the hypercube have a corner piece, and all the corner pieces are in one orbit.</p>"},{"location":"puzzles/4d-skewb/#demi-skewb-lookalike","title":"Demi skewb lookalike","text":"<p>Demi skewb lookalike</p> <p></p> <p>If you only use the axes along half the vertices as above, but you use the cut depths of the skewb lookalike, it results in a puzzle that still has three layers per axis, but only half as many axes. The cut pattern on the cells of this puzzle also resembles a 3D skewb, but with only 4 trivial tips per cell. The puzzle has 8 corner pieces, 8 dual corner pieces of a different shape, 32 X-centers, and 24 ridge pieces.</p> <p>As before, the hypercube can be rectified, which removes the trivial tips from the cut patterns of the cells.</p> <p></p> Extra turns <p>In the two demi puzzles, the 8 vertices are arranged like the cells of a hypercube. This means they are actually shapemods of hypercubic puzzles. As such, they have an additional shapeshifting move in which you turn one layer by 90\u00b0. There is no analogous move on the skewb. In particular, the demi vertex turning hypercube is a shapemod of a 2x2x2x2, and the demi skewb lookalike is a shapemod of a 3x3x3x3, but with the 8 corner pieces that would be at the center of the cells missing.</p> <p>Because the 16-cell axis system, or the vertex turning hypercube system, is composed of two disjoint hypercube axis systems, these puzzles also have additional shapeshifting moves in which you turn a layer 90\u00b0. Unlike those in the previous section, though, performing one of these turns would bandage the puzzle. If you unbandaged these puzzles, you would get additional cuts parallel to the cells, resulting in the axis system of a 24-cell.</p>"},{"location":"puzzles/4d-skewb/#simplex-like","title":"Simplex-like","text":"<p>The skewb can be constructed in a different way: take four axes corresponding to a tetrahedron, and cut perpendicular to each axis through the origin. The tetrahedron is the 3D simplex, so if you replace it with the 5-cell, the 4D simplex, you get a new puzzle in 4D. This puzzle has several types of pieces, but since the shape of the puzzle does not yet exist, we can\u2019t name them after their position. Thus, we will name the pieces by how many layers they are turned by. For the skewb, there are 4 pieces that are in one layer, 6 pieces that are in two layers, and 4 pieces that are in three layers. We will call these 1g, 2g, and 3g pieces. This 4D puzzle will have 5 1g pieces, 10 2g pieces, 10 3g pieces, and 5 4g pieces. The skewb has a symmetry (90\u00b0 rotation of the puzzle) that swaps 1g and 3g pieces and sends 2g to 2g pieces. Similarly, the 4D equivalent has a symmetry that swaps 1g and 4g pieces and swaps 2g and 3g pieces. Like the skewb, the cuts on this puzzle can each be offset in a consistent direction while preserving the functionality of the puzzle.</p> <p>Now, we can describe how to construct the skewb\u2019s cubic shape. On each face of the cube, there is one 2g piece in its center. Thus, given our abstractly constructed skewb, we can construct a plane perpendicular to each 2g piece\u2019s axis of symmetry. The shape bounded by all 6 of these planes is a cube.</p>"},{"location":"puzzles/4d-skewb/#2g-carved-simplex","title":"2g carved simplex","text":"<p>2g carved simplex</p> <p></p> <p>Like in 3D, you can put a hyperplane perpendicular to the symmetry axis of each 2g piece. Since there are 10 2g pieces, this creates a polychoron with 10 triangular-bipyramidal cells called the joined 5-cell. On this puzzle, the 1g pieces are 4c at the tetrahedral vertices, the 2g pieces are 1c at the cell centers, the 3g pieces are 3c at the triangular edges, and the 4g pieces are 6c at the triangular-bipyramidal vertices. Unlike on the skewb, where the 1g and 3g pieces look alike, here, the 1g and 4g pieces are distinguishable by their number of colors, and so are the 2g and 3g pieces.</p>"},{"location":"puzzles/4d-skewb/#2g-3g-carved-simplex","title":"2g-3g carved simplex","text":"<p>2g-3g carved simplex</p> <p></p> <p>You can also put hyperplanes perpendicular to the symmetry axis of both the 2g and 3g pieces. This gives the puzzle a 20-celled shape called the bijungato-10-cell. On this puzzle, the 1g and 4g pieces are both 4c at tetrahedral vertices, and the 2g and 3g pieces are both 1c at the cell centers. Unlike the previous shape but like the skewb, full symmetry of the puzzle is reflected in the shape.</p> <p>Each cell of the puzzle either has two 1g and one 2g pieces, or two 4g and one 3g pieces. These two orbits of cells are only adjacent across the 2g-3g boundary. Consequently, this puzzle has multiple solved states, where each cell is a solid color, but the color schemes of the two orbits are rotated relative to each other.</p>"},{"location":"puzzles/4d-skewb/#2g-3g-carved-simplex-hemi-colors","title":"2g-3g carved simplex, hemi colors","text":"<p>The puzzle can be recolored with 10 colors by giving opposite cells the same color. By asserting that the solved state has to have the two same-colored cells opposite to each other, it restricts the relative orientations of the two orbits to only one configuration, leading to there being only one solved state. Because of the geometry of the puzzle, a 1g-2g cell is opposite a 4g-3g cell, so the pieces on these cells are not swappable and coloring these two cells the same color leads to no ambiguity in the position.</p>"},{"location":"puzzles/4d-skewb/#2g-3g-ridge-carved-simplex","title":"2g-3g ridge carved simplex","text":"<p>2g-3g ridge carved simplex</p> <p></p> <p>There are 30 square ridges between the 2g and 3g pieces. By constructing a shape bounded by the hyperplanes perpendicular to the symmetry axes of these ridges, you get a 30-cell shape with disphenoidal cells called the bi-10-cell. The 1g and 4g pieces are 12c at triakis-tetrahedral vertices, and the 2g and 3g pieces are 3c at triangular ridges. This shape of the puzzle also reflects the symmetry that swaps 1g and 4g and swaps 2g and 3g.</p>"},{"location":"puzzles/4d-skewb/#prism","title":"Prism","text":"<p>Prism</p> <p></p> <p>By starting with a skewb, you can extend it into the fourth dimension by taking the cartesian product of it with a line segment. This extends the cube to a cubic prism, and the skewb cut planes to hyperplanes all perpendicular to the original cube. This creates a skewb prism, which has exactly the same pieces as the skewb but with shapes that are the prisms of the originals. It allows all the moves of the skewb, and an additional set of moves that involve flipping the new dimension, which appear as reflection moves on the original skewb. By adding more cuts parallel to the original skewb, you can create multi-layer skewb prisms.</p>"},{"location":"puzzles/4d-skewb/#24-cell-like","title":"24-cell-like","text":""},{"location":"puzzles/4d-skewb/#24-cell-skewb-diamond-lookalike","title":"24-cell skewb diamond lookalike","text":"<p>24-cell skewb diamond lookalike</p> <p></p> <p>The 24-cell\u2019s cells are octahedra, which have the same symmetry as the skewb, and its dual the skewb diamond. Construct cutting planes parallel to the cells which pass through the centers of the adjacent cells. This creates a puzzle with 24 vertex pieces, 96 ridge pieces, and 144 X-centers. This puzzle is not half-cut, but each cell\u2019s cut pattern looks like a skewb diamond with trivial tips. It is possible to apply RKT to a cell of this puzzle, in which case it acts like a skewb diamond.</p> <p>By rectifying the 24-cell, the trivial tip cuts on the cut patterns of the cells are removed, meaning the cells look like cuboctahedral skewbs.</p>"},{"location":"puzzles/4d-skewb/#24-cell-skewb-diamond-lookalike-16-cell-cuts","title":"24-cell skewb diamond lookalike, 16-cell cuts","text":"<p>24-cell skewb diamond lookalike, 16-cell cuts</p> <p></p> <p>The 24-cell has a subset of cells that correspond to the cells of the 16-cell. If you only keep those cuts, you get a puzzle similar to the one above, but where 8 of the cells no longer appear to have trivial tips in their cut patterns. This puzzle has 16 large corner pieces, 8 small corner pieces, 96 ridge pieces, and 144 X-centers. Like before, RKT can be applied.</p> <p> </p>"},{"location":"puzzles/4d-skewb/#24-cell-skewb-diamond-lookalike-8-cell-cuts","title":"24-cell skewb diamond lookalike, 8-cell cuts","text":"<p>24-cell skewb diamond lookalike, 8-cell cuts</p> <p></p> <p>The 24-cell also has a subset of cells that correspond to the cells of the 8-cell, or hypercube. If you only keep those cuts, you get another puzzle similar to the one above, but where 16 of the cells do not appear to have trivial tips in their cut patterns, and 8 of the cells appear to have only the trivial tip cuts. This puzzle has 8 large corner pieces, 16 small corner pieces, 32 ridge pieces, and 8 center pieces. Unlike before, RKT cannot be applied to the skewb diamond cells. This puzzle is a shapemod of the 3x3x3x3 without corner pieces.</p>"},{"location":"puzzles/hemimegaminx/","title":"Hemimegaminx","text":"<p>Hemimegaminx</p> <p></p> <p>Shape: Hemi-dodecahedron</p> <p>Pieces: 6 1c, 15 2c, 10 3c</p> <p>The hemimegaminx is a twisty puzzle in the shape of a hemi-dodecahedron. In MagicTile, it inhabits the projective plane.</p> <p>The puzzle can be constructed by identifying opposite faces on a megaminx. On this realization of the puzzle, opposite faces will turn in opposite directions. In order to be a true hemimegaminx, opposite faces should also be colored the same, so the puzzle will have 6 colors total.</p>"},{"location":"puzzles/hemimegaminx/#permutations","title":"Permutations","text":"<p>The 10 3c pieces of the hemimegaminx can be placed in any even permutation. Each 4c can be placed in \\(3!\\) orientations, except the last, which can be placed in only \\(3\\) orientations. The 15 2c pieces can be placed in any even permutation, and each one has \\(2\\) orientations, except the last, whose orientation is determined by the other pieces. Thus, the number of permutations of the puzzle is \\(\\left[\\frac{10!}{2} \\cdot 3!^{9} \\cdot 3\\right] \\cdot \\left[\\frac{15!}{2} \\cdot 2^{14}\\right] \\approx 5.87 \\cdot 10^{29}.\\)</p>"},{"location":"puzzles/hemimegaminx/#physical-version","title":"Physical version","text":"<p>In 2019, after several prototypes, Oskar van Deventer built the first working hemimegaminx. In 2024, Akkei created another physical hemimegaminx and did the first known timed solve on it.</p>"},{"location":"puzzles/hypercuboids/","title":"Hypercuboids","text":""},{"location":"puzzles/hypercuboids/#introduction","title":"Introduction","text":"<p>A hypercuboid is the multi-dimensional version of a cuboid. In a general context, we define a hypercuboid as an \\(n\\)-dimensional puzzle denoted by \\(a_1 \\times a_2 \\times \\dots \\times a_n\\).  For the sake of clarity and consistency, we will use \\(a_1,a_2, \\dots a_n\\) as non-decreasing values.  </p>"},{"location":"puzzles/hypercuboids/#structure","title":"Structure","text":"<p>A hypercuboid, as defined, is composed of \\(2n\\) cells, each of which is \\((n-1)\\)-dimensional.</p> <p>Given \\(k \\geq 0\\) and \\(n \\geq 1\\), the elementary symmetric polynomial \\(e_k(x_1, x_2, \\dots, x_n) = \\sum_{Y} \\prod_{y\\in Y} y\\), where \\(Y\\) ranges over subsets of \\(\\{x_1, \\dots, x_k\\}\\) where \\(|Y| = k\\). In other words, it is the sum of all terms, each of which are product of distinct \\(x_i\\) taken \\(k\\) at a time.</p> <ul> <li>For example: \\(e_1(x_1,x_2,x_3,x_4,x_5) = x_1 + x_2 + x_3 + x_4 +x_5\\), i.e. the sum of terms of 1 element, chosen in \\(x_1, x_2, x_3, x_4, x_5\\).   </li> <li>Another example: \\(e_2(x_1,x_2,x_3,x_4) = x_1 x_2 + x_1 x_3 + x_1 x_4 + x_2 x_3 + x_2 x_4 + x_3 x_4\\), i.e., the sum of the products of all possible unordered pairs made with \\(x_1, x_2, x_3, x_4\\).</li> </ul> <p>Note that \\(e_k(x_1, \\dots, x_n)\\) has \\(\\binom{n}{k}\\) terms. Then, we also see that \\(e_0(x_1, \\dots, x_n)=1\\).</p> <p>Using the above notation, the \\(a_1 \\times a_2 \\times \\dots \\times a_n\\) hypercuboid, where \\(a_i &gt; 1\\), has \\(2^k\\cdot e_{n-k}(a_1-2, \\dots, a_n-2)\\) pieces which are \\(k\\)-colored.</p> <p>For example, consider the \\(2 \\times 3 \\times 5 \\times 7\\) hypercuboid.</p> <ul> <li> <p>For 1-colored pieces we have: \\(2^1 \\cdot e_3(0,1,3,5)=2^1\\cdot (0\\cdot1\\cdot3 + 0\\cdot 3 \\cdot 5 + 1 \\cdot 3 \\cdot 5 + 0\\cdot 1 \\cdot5 )=\\) \\(=2 \\cdot (0+0+15+0)=30\\)  pieces.  </p> </li> <li> <p>For 2-colored pieces we have: \\(2^2 \\cdot e_2(0,1,3,5)=2^2\\cdot ( 0\\cdot 1+ 0\\cdot 3 +0 \\cdot 5  + 1\\cdot3 +1\\cdot 5 + 3\\cdot 5  )=\\) \\(=4 \\cdot (0+0+0+3+5+15)=92\\)  pieces.    </p> </li> <li> <p>For 3-colored pieces we have:   \\(2^3 \\cdot e_1(0,1,3,5)=2^3\\cdot (0+1+3+5  )=\\) \\(=8 \\cdot 9=72\\)  pieces.</p> </li> <li> <p>For 4-colored pieces we have: \\(2^4 \\cdot e_0(0,1,3,5)=2^4\\cdot 1=  16\\) pieces. </p> </li> </ul> <p>If \\(a_1, \\dots, a_m\\) are all equal to \\(1\\) and \\(a_{m+1} &gt; 1\\), the cuboid is a floppy cuboid. In this case, the number of \\(k\\)-colored pieces is equal to the number of \\((k-2m)\\)-colored pieces on the \\(a_{m+1} \\times \\dots \\times a_n\\) hypercuboid, when \\(k \\geq 2m\\). This includes the case where \\(k = 2m\\), in which case the floppy cuboid has pieces corresponding to the 0-colored pieces of the lower dimensional hypercuboid.</p>"},{"location":"puzzles/hypercuboids/#4d-hypercuboids","title":"4D Hypercuboids","text":"<p>In 4 dimensions, a hypercuboid is denoted as \\(a \\times b \\times c \\times d\\). \\(a \\times b \\times c \\times d\\) is composed of 8 cells: 2 \\((a \\times b \\times  c)\\)-cells, 2 \\((a \\times b \\times  d)\\)-cells, 2 \\((b \\times c \\times  d)\\)-cells  and 2 \\((a \\times c \\times  d)\\)-cells. In the following sections, we will denote some of these cells using the classic 3-dimensional puzzle names, in particular: </p> <ul> <li>\u201ctower cell\u201d will indicate a \\(2 \\times 2 \\times  3\\)-cell;</li> <li>\u201cdomino cell\u201d  will indicate a  \\(2 \\times 3 \\times  3\\)-cell;</li> <li>\u201d \\(n\\) -cubic cell\u201d will indicate a  \\(n \\times n \\times  n\\)-cell.</li> </ul>"},{"location":"puzzles/hypercuboids/#general-solving-strategies","title":"General solving strategies","text":"<ul> <li>Hypercuboids in the form \\(1 \\times a \\times b \\times c\\) can be solved by first orienting the \\(a \\times b \\times c\\)-cells, then solving the puzzle like a 3-dimensional \\(a \\times b \\times c\\).</li> <li>Hypercuboids in the form \\(2 \\times a \\times b \\times c\\) can be solved first by solving the \\(a \\times b \\times c\\)-cells and then solving the opposite, eventually adapting the solution for new possible cases.</li> <li>If 2 dimensions have the same values, the puzzle can be seen as a duoprism. </li> <li>If 3 dimensions have the same values, i.e. there is a couple of \\(n\\)-cubic cells, RKT can be used on these cells.</li> <li>If 4 dimensions have the same values, we have a hypercube.</li> </ul>"},{"location":"puzzles/hypercuboids/#some-notable-4d-hypercuboids","title":"Some notable 4D hypercuboids","text":"<p>In some cases an idea of a possible solution method provided by Ema will be present but not spoiled.</p>"},{"location":"puzzles/hypercuboids/#1333","title":"1x3x3x3","text":"Puzzle 4c pieces 3c pieces 2c pieces 1c pieces 1x1x3x3 16 24 12 2 Solve idea (click to reveal) <ul> <li>Orient both cubic cells. </li> <li>Solve 3^3 cube, paying attention to corner orientation.</li> </ul>"},{"location":"puzzles/hypercuboids/#2223","title":"2x2x2x3","text":"Puzzle 4c pieces 3c pieces 2c pieces 1c pieces 2x2x2x3 16 8 0 0 Solve idea (click to reveal) <ul> <li>Solve the middle 3-colored pieces of a tower cell (similar to solving a \\(1 \\times 2 \\times 2 \\times 2\\) ).</li> <li>Orient both \\(2\\)-cubic cells at the same time, slicing the solved part for exchanging pieces,being careful to use an even number of slice moves.     </li> <li>Use RKT to solve the cubic cells, using the same tower cells as R.   </li> <li>Fix tower cell middle layer.  </li> </ul>"},{"location":"puzzles/hypercuboids/#2233","title":"2x2x3x3","text":"Puzzle 4c pieces 3c pieces 2c pieces 1c pieces 2x2x3x3 16 16 4 0 Solve idea (click to reveal) <ul> <li>Solve a domino cell.     </li> <li>Orient the opposite domino cell, potentially re-solving the first cell.     </li> <li>Move pieces on the correct layers of the last cell.     </li> <li>Solve last domino cell using 3-dimensional cuboid algorithms an even number of times and conjugating between them.   </li> </ul>"},{"location":"puzzles/hypercuboids/#2333","title":"2x3x3x3","text":"Puzzle 4c pieces 3c pieces 2c pieces 1c pieces 2x3x3x3 16 24 12 2 Solve idea (click to reveal) <ul> <li>Orient both 3-cubic cells at the same time.      </li> <li>Solve first cubic cell.     </li> <li>Solve the second cubic cell using RKT.    </li> </ul>"},{"location":"puzzles/hypercuboids/#2224","title":"2x2x2x4","text":"Puzzle 4c pieces 3c pieces 2c pieces 1c pieces 2x2x2x4 16 16 0 0"},{"location":"puzzles/hypercuboids/#2345","title":"2x3x4x5","text":"Puzzle 4c pieces 3c pieces 2c pieces 1c pieces 2x3x4x5 16 48 44 12 <p>The smallest 4-dimensional \u201cbrick\u201d hypercuboid.  </p>"},{"location":"puzzles/hypercuboids/#4d-hypercuboids-in-mpult","title":"4D hypercuboids in MPUlt","text":"<p>Here is a way to create your own  4D hypercuboid in MPUlt. The result would not be isometric, but still working.</p> <p>Step 1: Recognize the form of your hypercuboid in one of the following</p> <ul> <li>\\(a \\times b \\times c \\times d\\),</li> <li>\\(a \\times a \\times b \\times c\\),</li> <li>\\(a \\times a \\times b \\times b\\),</li> <li>\\(a \\times b \\times b \\times b\\),</li> <li>\\(a \\times a \\times a \\times a\\).</li> </ul> <p>Step 2: Recognize the values of the letters, then substitute the letter with the corresponding string from the following table:</p> Value String 2 0.0 3 0.333 -0.333 4 0.5 0.0 -0.5 5 0.6 0.2 -0.2 -0.6 6 0.667 0.333 0.0 -0.333 -0.667 7 0.714 0.429 0.143 -0.143 -0.429 -0.714 8 0.75 0.5 0.25 0.0 -0.25 -0.5 -0.75 9 0.778 0.556 0.333 0.111 -0.111 -0.333 -0.556 -0.778 <p>So if \\(a=3\\), you need to change \u201cCUT-A\u201d with \u201c0.333 -0.333\u201d in the general puzzle code, and so on.</p> <p>Step 3: Insert the created code in \u201cMPUlt_puzzles.txt\u201d file, save and enjoy your puzzle.</p>"},{"location":"puzzles/hypercuboids/#case-abcd","title":"Case axbxcxd","text":"<p>General code: <pre><code>Puzzle NAME_AXBXCXD\nDim 4\nNAxis 4\nFaces 1,0,0,0 0,1,0,0 0,0,1,0 0,0,0,1\nGroup 1,0,0,0/0,1,0,0 1,0,0,0/0,0,1,0 1,0,0,0/0,0,0,1\nAxis 1,0,0,0\nTwists 0,1,0,0/0,0,1,0 0,1,0,0/0,0,0,1 0,0,1,0/0,0,0,1\nCuts CUT-A\nAxis 0,1,0,0\nTwists 1,0,0,0/0,0,1,0 1,0,0,0/0,0,0,1 0,0,1,0/0,0,0,1\nCuts CUT-B\nAxis 0,0,1,0\nTwists 1,0,0,0/0,1,0,0 1,0,0,0/0,0,0,1 0,0,0,1/0,1,0,0\nCuts CUT-C\nAxis 0,0,0,1\nTwists 1,0,0,0/0,1,0,0 1,0,0,0/0,0,1,0 0,0,1,0/0,1,0,0\nCuts CUT-D\n</code></pre></p>"},{"location":"puzzles/hypercuboids/#case-aabc","title":"Case axaxbxc","text":"<p>General code:  <pre><code>Puzzle NAME_AXAXBXC\nDim 4\nNAxis 3\nFaces 1,0,0,0 0,0,1,0 0,0,0,1\nGroup 1,0,0,0/1,1,0,0 1,0,0,0/0,0,1,0 1,0,0,0/0,0,0,1\nAxis 1,0,0,0\nTwists 0,1,0,0/0,0,1,0 0,1,0,0/0,0,0,1 0,0,1,0/0,0,0,1\nCuts CUT-C\nAxis 0,0,1,0\nTwists 1,0,0,0/1,1,0,0 1,0,0,0/0,0,0,1 0,0,0,1/0,1,0,0\nCuts CUT-B\nAxis 0,0,0,1\nTwists 1,0,0,0/1,1,0,0 1,0,0,0/0,0,1,0 0,0,1,0/0,1,0,0\nCuts CUT-A\n</code></pre></p>"},{"location":"puzzles/hypercuboids/#case-aabb","title":"Case axaxbxb","text":"<p>General code:  <pre><code>Puzzle NAME_AXAXBXB\nDim 4\nNAxis 2\nFaces 1,0,0,0 0,0,1,0\nGroup 1,0,0,0/1,1,0,0 1,0,0,0/0,0,1,0 0,0,1,0/0,0,1,1\nAxis 1,0,0,0\nTwists 0,0,1,0/0,0,1,1 0,1,0,0/0,0,1,0 0,1,0,0/0,0,1,1\nCuts CUT-A\nAxis 0,0,1,0\nTwists 1,0,0,0/1,1,0,0 0,0,0,1/1,0,0,0 0,0,0,1/1,1,0,0\nCuts CUT-B\n</code></pre></p>"},{"location":"puzzles/hypercuboids/#case-abbb","title":"Case axbxbxb","text":"<p>General code:  <pre><code>Puzzle NAME_AXBXBXB\nDim 4\nNAxis 2\nFaces 1,0,0,0 0,0,0,1\nGroup 1,0,0,0/1,1,0,0 1,0,0,0/1,0,1,0 1,0,0,0/0,0,0,1\nAxis 1,0,0,0\nTwists 0,1,0,0/0,1,1,0 0,1,0,0/0,0,0,1\nCuts CUT-B\nAxis 0,0,0,1\nTwists 1,0,0,0/1,1,0,0 1,0,0,0/1,0,1,0\nCuts CUT-A\n</code></pre></p>"},{"location":"puzzles/hypercuboids/#case-aaaa","title":"Case axaxaxa","text":"<p>General code:  <pre><code>Puzzle NAME_AXAXAXA\nDim 4\nNAxis 1\nFaces 1,0,0,0\nGroup 1,0,0,0/1,1,0,0 1,0,0,0/1,0,1,0 1,0,0,0/1,0,0,1\nAxis 1,0,0,0\nTwists 0,1,0,0/0,1,1,0 0,1,-1,0/0,0,0,1 0,2,-1,-1/0,1,1,-2\nCuts CUT-A\n</code></pre></p>"},{"location":"puzzles/hypercuboids/#5d-hypercuboids","title":"5D+ Hypercuboids","text":"<p>These hypercuboids haven\u2019t been studied yet, except for some \u201csimpler\u201d versions with lots of \\(1\\)\u2019s.</p>"},{"location":"puzzles/nxnxnxn/","title":"NxNxNxN","text":"<p>4x4x4x4</p> <p></p> <p>Shape: Tesseract</p> <p>NxNxNxN, or N<sup>4</sup> is a generic term for a 4-dimensional twisty puzzle in the shape of a hypercube with N layers per axis. It is a direct higher dimensional analogy of the NxNxN Rubik\u2019s Cube.</p> <p>This page is concerned with the case where N is greater than 3. The 2x2x2x2 and 3x3x3x3 have their own pages.</p>"},{"location":"puzzles/nxnxnxn/#pieces","title":"Pieces","text":"<p>The N<sup>4</sup> has \\(N^4 - (N-2)^4\\) hypercubies. If N is even, all hypercubies are movable, and if N is odd, all but 8 are movable. It has \\(8(N-2)^3\\) 1c, \\(24(N-2)^2\\) 2c, \\(32(N-2)\\) 3c, and \\(16\\) 4c pieces. These pieces come in many subtypes.</p> <ul> <li>1c<ul> <li>Centers: These pieces are at the centers of the facets. When \\(N \\geq 3\\) is odd, 8 of these pieces exist and they are immovable. They are not present when \\(N\\) is even.</li> <li>T-centers: These pieces exist in orbits of 48 between the facet centers and the ridge centers. When \\(N \\geq 5\\) is odd, there are \\(\\frac{N-3}{2}\\) orbits. They are not present when \\(N\\) is even.</li> <li>Y-centers: These pieces exist in orbits of 96 between the facet centers and the edge centers. When \\(N \\geq 5\\) is odd, there are \\(\\frac{N-3}{2}\\) orbits. They are not present when \\(N\\) is even.</li> <li>X-centers: These pieces exist in orbits of 64 between the facet centers and the corners. When \\(N \\geq 5\\) is odd, there are \\(\\frac{N-3}{2}\\) orbits. When \\(N \\geq 4\\) is even, there are \\(\\frac{N-2}{2}\\) orbits.</li> <li>Semi-oblique centers: These pieces exist in orbits of 192. There are several subtypes, each of which have \\(\\frac{(N-3)(N-5)}{4}\\) orbits when \\(N \\geq 7\\) is odd, and \\(\\frac{(N-2)(N-4)}{4}\\) when \\(N \\geq 6\\) is even.<ul> <li>TY-centers: These pieces are between the facet centers, ridge centers, and edge centers.</li> <li>TX-centers: These pieces are between the facet centers, ridge centers, and corners.</li> <li>YX-centers: These pieces are between the facet centers, edge centers, and corners.</li> </ul> </li> <li>Oblique centers: These pieces exist in orbits of 192 off all hyperplanes of symmetry. They come in two chiralities. When \\(N \\geq 9\\) is odd, there are \\(\\frac{(N-3)(N-5)(N-7)}{8}\\) orbits of each chirality. When \\(N \\geq 8\\) is even, there are \\(\\frac{(N-2)(N-4)(N-6)}{8}\\) orbits of each chirality.</li> </ul> </li> <li>2c<ul> <li>Middle ridges: These pieces are at the centers of the ridges. When \\(N \\geq 3\\) is odd, they come in one orbit of 24. They are not present when \\(N\\) is even.</li> <li>T-ridges: These pieces exist in orbits of 96 between the ridge centers and the edge centers. When \\(N \\geq 5\\) is odd, there are \\(\\frac{N-3}{2}\\) orbits. They are not present when \\(N\\) is even.</li> <li>X-ridges: These pieces exist in orbits of 96 between the ridge centers and the corners. When \\(N \\geq 5\\) is odd, there are \\(\\frac{N-3}{2}\\) orbits. When \\(N \\geq 4\\) is even, there are \\(\\frac{N-2}{2}\\) orbits.</li> <li>Oblique ridges: These pieces exist in orbits of 192, but they are not chiral. When \\(N \\geq 7\\) is odd, there are \\(\\frac{(N-3)(N-5)}{4}\\) orbits of each chirality. When \\(N \\geq 6\\) is even, there are \\(\\frac{(N-2)(N-4)}{4}\\) orbits of each chirality.</li> </ul> </li> <li>3c<ul> <li>Middle edges: These pieces are at the centers of the edges. When \\(N \\geq 3\\) is odd, they come in one orbit of 32. They are not present when \\(N\\) is even.</li> <li>Wings: These pieces exist in orbits of 64 between the edge centers and the corners. When \\(N \\geq 5\\) is odd, there are \\(\\frac{N-3}{2}\\) orbits. When \\(N \\geq 4\\) is even, there are \\(\\frac{N-3}{2}\\) orbits of each chirality.</li> </ul> </li> <li>4c<ul> <li>Corners: These pieces are at the corners. When \\(N \\geq 2\\), they come in one orbit of 16.</li> </ul> </li> </ul>"},{"location":"puzzles/nxnxnxn/#turning","title":"Turning","text":"<p>Each turn of the N<sup>4</sup> is a rotation of one of its cubic cells, or a slice layer between two parallel cuts. Each layer turned can be oriented in any of 24 orientations of a cube.</p>"},{"location":"puzzles/physical/","title":"Physical Puzzles","text":"<p>Warning</p> <p>It is highly recommended to learn how virtual puzzles work first before trying to understand the physical puzzles. See Why not start with the physical 2x2x2x2?.</p> <p>Physical 3x3x3x3</p> <p></p> <p>Physical puzzles refer to higher dimensional puzzles that are physically built in real life (using only 3 dimensions). This involves clever designs, strange symmetry-abusing tricks, and lots and lots of magnets. Often, these puzzles are too impractical to use, defeating their sole purpose. For an explanation of how these puzzles work, see the theory page.</p> <p>For a documentary about the history of physical puzzles as of December 2022, see Rowan\u2019s video.</p>"},{"location":"puzzles/physical/#physical-puzzles-that-have-been-built","title":"Physical puzzles that have been built","text":"<ul> <li>Melinda\u2019s 2x2x2x2</li> <li>Grant\u2019s 2x2x2x3</li> <li>Grant\u2019s 2x2x3x3</li> <li>Grant\u2019s 2x3x3x3</li> <li>Grant\u2019s 1x1x1x1</li> <li>Grant\u2019s 3x3x3x3</li> <li>Dominik\u2019s 4D Pyraminx</li> <li>Tymon\u2019s 1x2x2x2</li> <li>Tymon\u2019s 1x2x2x3</li> <li>Tymon\u2019s 1x2x3x3</li> <li>Tymon\u2019s 1x3x3x3</li> </ul>"},{"location":"puzzles/physical/#designs-that-havent-been-built-yet","title":"Designs that haven\u2019t been built yet","text":"<ul> <li>AxBxCxD (any hypercube or hypercuboid with layers bigger than 1)</li> <li>1x1xAxB series</li> <li>Markk\u2019s duoprisms</li> <li>{5}x{4} duoprism</li> <li>Akkei\u2019s 2x2x2x2x2</li> <li>2<sup>6</sup> using 64 skewbs</li> </ul>"},{"location":"puzzles/physical/1x2x2x2/","title":"Tymon\u2019s 1x2x2x2","text":"<p>Tymon\u2019s 1x2x2x2</p> <p></p> <p>4D Shape: Hypercuboid</p> <p>Physical Shape: Cube</p> <p>Pieces: 8 5c</p> <p>Magnets: 384</p> <p>Completed: 2024 Jan 11</p>"},{"location":"puzzles/physical/1x2x2x2/#history","title":"History","text":"<p>Tymon F began some initial tests for this puzzle in October 2023. The first 2 pieces were fully assembled and magnetized by December 2023. Finally (coincidentally exactly 1 year after he discovered hypercubing), Tymon completed the 1x2x2x2 hypercuboid on 2024-01-11. Afterwards, he started work on creating the cuboids up to 1x3x3x3.</p>"},{"location":"puzzles/physical/1x2x2x2/#moves","title":"Moves","text":"<p>Legal moves of a layer include basic 2x2x2 90\u00b0 twists, 180\u00b0 twists in any plane which also rotate pieces in 4d axis, or a combination of both.</p> <p></p>"},{"location":"puzzles/physical/1x2x2x2/#solving","title":"Solving","text":"<p>Beside basic stickers (white, yellow, orange, red, green, blue) every piece on the puzzle has pink and purple stickers which indicate in which 4d orientation the piece is. In the solved state every piece must have the same 4d axis orientation. The 1x2x2x2 is not much more difficult than the 2x2x2. It can be solved by: orienting 5c pieces in 4d axis, except \u201cOLL parity\u201d (because of the extra axis, a single 5c can be missoriented) the rest of the puzzle can be solved like a 3d 2x2x2. Tymon made a YouTube video showing an example solve of the puzzle.</p>"},{"location":"puzzles/physical/1x2x2x3/","title":"Tymon\u2019s 1x2x2x3","text":"<p>Tymon\u2019s 1x2x2x3</p> <p></p> <p>4D Shape: Hypercuboid</p> <p>Physical Shape: Cuboid</p> <p>Pieces: 8 5c, 4 4c</p> <p>Magnets: 512</p> <p>Completed: 2024 Jan 15</p>"},{"location":"puzzles/physical/1x2x2x3/#history","title":"History","text":"<p>A few days after completing the physical 1x2x2x2 Tymon F finished assembling four new 4c pieces that combined with the previous 5c pieces to create a physical analog of the 1x2x2x3 puzzle. This one was another important milestone on the way to create a physical 1x3x3x3 puzzle.</p>"},{"location":"puzzles/physical/1x2x2x3/#moves","title":"Moves","text":"<p>Legal moves of a layer include basic 2x2x2 90\u00b0 and 180\u00b0 twists that rotate pieces without changing their 4d orientation, 4d 180\u00b0 twists that besides moving pieces in 3d, rotate them in 4d axis, or a combination of both.</p> <p></p>"},{"location":"puzzles/physical/1x2x2x3/#solving","title":"Solving","text":"<p>Besides basic stickers (white, yellow, orange, red, green, blue) every piece on the puzzle has pink and purple stickers which indicate in which 4d orientation the piece is. In the solved state every piece must have the same 4d axis orientation. The 1x2x2x3 is a bit more complicated than 2x2x3. It can be solved by: orienting 4c piece in 4d axis, orienting 5c pieces in 4d axis, solving the rest of the puzzle like a 2<sup>3</sup>. Tymon made a YouTube video showing an example solve of the puzzle.</p>"},{"location":"puzzles/physical/1x2x3x3/","title":"Tymon\u2019s 1x2x3x3","text":"<p>Tymon\u2019s 1x2x3x3</p> <p></p> <p>4D Shape: Hypercuboid</p> <p>Physical Shape: Cuboid</p> <p>Pieces: 8 5c, 8 4c, 2 3c</p> <p>Magnets: 688</p> <p>Completed: 2024 Jan 24</p>"},{"location":"puzzles/physical/1x2x3x3/#history","title":"History","text":"<p>Over a week after completing the physical 1x2x3x3, Tymon F finished assembling another four 4c pieces and two new 3c pieces that combined with the 1x2x3x3 to create the physical 1x2x3x3 puzzle. This was the last puzzle made with the goal of creating a physical 1x3x3x3.</p>"},{"location":"puzzles/physical/1x2x3x3/#moves","title":"Moves","text":"<p>Legal moves of a layer include normal 2x3x3 90\u00b0 and 180\u00b0 twists that rotate pieces without changing their 4d orientation, 4d 180\u00b0 twists that change the pink/purple stickers, or a combination of both.</p>"},{"location":"puzzles/physical/1x2x3x3/#solving","title":"Solving","text":"<p>Besides basic stickers (white, yellow, orange, red, green, blue) every piece on the puzzle has pink and purple stickers which indicate in which 4d orientation the piece is. In the solved state every piece must have the same 4d axis orientation. The 1x2x3x3 puzzle is much more complicated than smaller hypercuboids, but it can be solved by: orienting 3c pieces in 4d axis, orienting 4c piece in 4d axis, orienting 5c pieces in 4d axis, solving the rest of the puzzle like 3d 2x3x3. Tymon made a YouTube video showing an example solve of the puzzle.</p>"},{"location":"puzzles/physical/1x3x3x3/","title":"Tymon\u2019s 1x3x3x3","text":"<p>Tymon\u2019s 1x3x3x3</p> <p></p> <p>4D Shape: Hypercuboid</p> <p>Physical Shape: Cube</p> <p>Pieces: 8 5c, 12 4c, 6 3c, 1 2c (2 1c)</p> <p>Magnets: 936</p> <p>Completed: 2024 Jan 26</p>"},{"location":"puzzles/physical/1x3x3x3/#history","title":"History","text":"<p>Two days after finishing the 1x2x3x3 Tymon F completed his final goal, creating a physical analog of the 1x3x3x3 puzzle. To do this he had to assemble another four 4c pieces, four 3c pieces and one 2c piece that represents two 1c pieces on the virtual puzzle. This ended Tymon\u2019s journey of creating all physical puzzles from the AxBxCx1 family.</p>"},{"location":"puzzles/physical/1x3x3x3/#moves","title":"Moves","text":"<p>Legal moves of a layer include 90\u00b0 twists, 180\u00b0 twists in any plane, or a combination of both.</p> <p></p>"},{"location":"puzzles/physical/1x3x3x3/#solving","title":"Solving","text":"<p>Every piece on the puzzle has pink and purple stickers which indicate which 4d orientation the piece is. In the solved state every piece must have the same 4d axis orientation. 1x3x3x3 is harder than the 3d Rubik\u2019s cube, but it can be solved by: orienting 3c pieces in 4d axis, orienting 4c pieces in 4d axis, orienting 5c pieces in 4d axis, except \u201cOLL parity\u201d (because of the extra axis, a single 5c can be missoriented), then solving the rest of the puzzle like a 3d Rubik\u2019s cube. Tymon made a YouTube video explaining the puzzle as well as showing an example solve.</p>"},{"location":"puzzles/physical/1x3x3x3/#gyro","title":"Gyro","text":"<p>This puzzle has two 1c pieces that are physicaly represented by one 2c piece (the core). Technically the puzzle is solved only when all of the other pieces have the pink sticker on the outside cell (because pink is outside on the core piece). To be able to solve the puzzle with purple color facing outwards, Tymon created a gyro algorithm that flips all pieces inside out and puts the core outside of the puzzle. This represents that pink/purple axis is flipped and now the puzzle is only solved when all of the pieces are oriented with purple on the ouside. The gyro can be reversed to get back to default projection.</p> <p></p>"},{"location":"puzzles/physical/1x3x3x3/#oll-parity","title":"OLL Parity","text":"<p>Becuase of the extra freedom of the 4th dimension a monoflip (single missoriented corner) can occur. It can be solved by doing one of the 4d moves, to set up a valid OLL case or just rotate corners and undoing 4d move. A single corner can also be rotated with a simple commutator.</p>"},{"location":"puzzles/physical/1x3x3x3/#alternative-solved-state","title":"Alternative Solved state","text":"<p>The original solved state well represents which sticker on a piece is on the inside and which one is on the outside, but some people prefer a solved state with edges rotated 4 dimensionaly. This is because then the overall look of the puzzle is less chaotic and more friendly to non hypercubers.</p> <p></p>"},{"location":"puzzles/physical/2x2x2x2x2/","title":"2x2x2x2x2","text":"<p>2x2x2x2x2</p> <p></p> <p>5D Shape: Hypercube</p> <p>Physical Shape: \u201cRectangular prism\u201d</p> <p>Pieces: 32 5c</p> <p>Designed: 2023 Feb 13</p> <p>The Physical 2x2x2x2x2 (2<sup>5</sup>) is a valid design that represents its virtual counterpart, designed by Akkei, Grant, and Andreas. Unlike the restricted 2x2x2x2x2, this puzzle would have the full freedom and moves of the virtual puzzle.</p>"},{"location":"puzzles/physical/2x2x2x2x2/#history","title":"History","text":"<p>In the Hypercubers Discord, Akkei and Andreas were discussing how to represent the symmetries of a 5D 5c piece in 3D. They came upon a certain colouring of the rhombic triacontahedron that worked.</p> <p></p> <p>Grant</p> <p>I see</p> <p>HHHHHHHHHMMMMMMMMM</p> <p>I seeeee</p> <p>Akkei quickly finished rendering the full puzzle, with all 32 pieces: </p> <p>A few hours later, Grant figured out a simpler way to arrange the stickers. The previous approach required each face of each rhombic triacontahedron to take on three colours, but Grant\u2019s approach only required each face of each rhombic triacontahedron to take on one solid colour.  </p> <p>Two days later, after an extensive voice chat, he rendered a different version where the one-colour stickers were rearranged so that the pieces were oriented in a more readable way: </p> <p>This rearrangement works because the rhombic triacontahedron encodes the same information as a compound of five cubes, where each cube represents a sticker of the five-dimensional puzzle.</p>"},{"location":"puzzles/physical/2x2x2x3/","title":"Grant\u2019s 2x2x2x3","text":"<p>Grant\u2019s 2x2x2x3</p> <p></p> <p>4D Shape: Hypercuboid</p> <p>Physical Shape: Rectangular prism</p> <p>Pieces: 16 4c, 8 3c</p> <p>Magnets: 1152</p> <p>Completed: 2022 Feb 3</p> <p>Grant\u2019s 2x2x2x3 is a physical 4D twisty puzzle that was designed and 3D printed by Grant S. It works almost the same as its virtual counterpart, with the restrictions of only certain moves being canonical, plus the extra gyro algorithms needed to rotate the puzzle 4 dimensionally.</p>"},{"location":"puzzles/physical/2x2x2x3/#history","title":"History","text":"<p>In December of 2021, Melinda green posted this image to the Hypercubers Discord server, jokingly calling it a 2x2x2x3:</p> <p></p> <p>Afterwards, Luna started sketching out some ideas of possible layouts for an actual 2x2x2x3.</p> <p></p> <p>She invented the design for the 3c pieces, shown above, by dividing the edges of a cube into 12 sections, grouping 4 sets of 3 together symmetrically.</p> <p>This is when Grant joined the server, and shared his 3D printed 2x2x2x2. Rowan then challenged him to build Luna\u2019s design for the 2x2x2x3. After a lot of time tweaking the designs, printing them, magnetizing them, and assembling them, the 2x2x2x3 was completed on February 3rd 2022.</p> <p></p>"},{"location":"puzzles/physical/2x2x2x3/#how-does-it-work","title":"How Does it Work?","text":"<p>The 2x2x2x3 follows the same basic principles as Melinda\u2019s 2x2x2x2, except gyros get more complicated. Grant made a YouTube video showing off the legal twists, and how they exactly matched those of the virtual puzzle in MPU.</p>"},{"location":"puzzles/physical/2x2x3x3/","title":"Grant\u2019s 2x2x3x3","text":"<p>Grant\u2019s 2x2x3x3</p> <p></p> <p>4D Shape: Hypercuboid</p> <p>Physical Shape: Rectangular prism</p> <p>Pieces: 16 4c, 16 3c, 4 2c</p> <p>Magnets: 1728</p> <p>Completed: 2022 May 14</p>"},{"location":"puzzles/physical/2x2x3x3/#history","title":"History","text":"<p>After the invention of grant\u2019s 2x2x2x3, hypercubers were already thinking about what was next. The 2x2x3x3 has an extra middle layer that the 2x2x2x3 doesn\u2019t have, which introduces the 2c piece to the design. Hactar designed the new 2c piece, and then Grant made the first rendering of what a physical 2x2x3x3 would look like.</p> <p></p> <p>It took a while to get the designs just right, but after printing and assembling 4 of the new 2c pieces and 8 more 3c pieces, the puzzle was completed on May 14th, 2022.</p>"},{"location":"puzzles/physical/2x2x3x3/#functionality","title":"Functionality","text":"<p>In order to prove that it was fully functional, it had to be shown that moves matched the virtual puzzle, and that it was possible to gyro the puzzle into different orientations.</p> <p>The gyro starts by removing the middle layer, and then gyroing just like the 2x2x2x3, which involves separating that middle layer and then gyroing like a 2x2x2x2. Next, the middle layer has some four-dimensional black magic done to it, and then finally the puzzle is reassembled into the gyroed state.</p> <p>Grant later realized that some of the 2x2x3 cell moves aren\u2019t accessible, meaning that we actually need a second type of gyro! This secondary gyro involves centering a 2x2x3 cell, and then making the middle layer stick out. Now the puzzle was fully functional.</p>"},{"location":"puzzles/physical/2x3x3x3/","title":"Grant\u2019s 2x3x3x3","text":"<p>Grant\u2019s 2x3x3x3</p> <p></p> <p>4D Shape: Hypercuboid</p> <p>Physical Shape: Rectangular prism</p> <p>Pieces: 16 4c, 24 3c, 12 2c, 2 1c</p> <p>Magnets: 2496</p> <p>Completed: 2022 Jul 6</p> <p>The next logical step to take after Grant built his 2x2x3x3 was the 2x3x3x3, which once again requires a new piece type: the 1c. But this was no big deal because a 1-colored piece only has 1 color.</p> <p>The production went pretty smoothly, and after printing 8 more 3c and 2c pieces, and 2 of the new 1c pieces, the puzzle was completed on July 6th, 2022.</p> <p>Now given what we\u2019ve seen before with the previous gyro algorithms, you\u2019d think that the 2x3x3x3 needs an extremely long complicated recursive gyro, and although the design of the puzzle has at least 15 different possible types of gyros, it turns out that it actually doesn\u2019t need one at all! All the moves are accessible from this state, which makes for a really nice solving experience.</p> <p>The 4th ever physical 4D puzzle was constructed, bringing us closer and closer to our ultimate goal: the physical 3x3x3x3.</p>"},{"location":"puzzles/physical/3x3x3x3/","title":"Grant\u2019s 3x3x3x3","text":"<p>Physical 3x3x3x3</p> <p></p> <p>4D Shape: Tesseract</p> <p>Physical Shape: Rectangular prism with 8 pieces sticking out</p> <p>Pieces: 8 1c, 24 2c, 32 3c, 16 4c</p> <p>Magnets: 3,840</p> <p>Completed: 2022 July 22</p> <p>Permutations: \\(1.7\\times 10^{120}\\)</p>"},{"location":"puzzles/physical/3x3x3x3/#history","title":"History","text":"<p>With the expansion of Melinda\u2019s 2x2x2x2 through the hypercuboid series, only 1 puzzle remained unmade: the physical 3x3x3x3. A true 4-dimensional analog of the classic 3x3x3 Rubik\u2019s Cube.</p> <p>Melinda Green</p> <p>I can\u2019t believe progress is being made towards the holy grail. The cost and effort doesn\u2019t matter since one will have to be made if it\u2019s at all possible. (The main reason to be sure it\u2019s right) It also doesn\u2019t matter how clumsy it is to operate, though of course to get it into multiple people\u2019s hands, you\u2019ll want to explore every possible way to improve it.</p> <p>At first, it was not clear how to expand the physical 2x3x3x3 into the 3x3x3x3, as it would need extra pieces that would no longer make it a nice cuboid shape. This is because we have one more slice layer than the number of dimensions we\u2019re trying to simulate. For example a 3x3x3 has 3 slice layers, so to represent it in 2D space, some of the pieces have to stick out like this:</p> <p></p> <p>After months and months of effort, Grant completed assembling the puzzle on July 22nd, 2022. To this day, Grant has not scrambled or solved the physical 3x3x3x3 due to it being extremely big, heavy, and awkward to use. The most that was done on it was a checkerboard algorithm, but he did make a video showing off all of the hypercuboids and their legal twists.</p> <p></p> <p>In April 2023, Akkei made a new program that simulated the physical 3<sup>4</sup>, and then Hyperespy became the first person to ever fully solve the physical 3<sup>4</sup>. The actual gyros are pretty painful to do, but luckily the program does them for you :)</p> <p>In just under 6 months, the community went from having one physical 4d puzzle, to having five!</p> <p>On 2024-07-19, The Cube Dude became the first person ever to solve the physical 3<sup>4</sup> in real life.</p>"},{"location":"puzzles/physical/4d-pyraminx/","title":"Dominik\u2019s 4D Pyraminx","text":"<p>Dominik\u2019s 4D Pyraminx</p> <p></p> <p>4D Shape: 5-cell</p> <p>Physical Shape: Tetrahedron + small Octahedron</p> <p>Pieces: 5 4c, 10 3c</p> <p>Magnets: 180 Completed: 2023 Dec 28</p>"},{"location":"puzzles/physical/4d-pyraminx/#introduction","title":"Introduction","text":""},{"location":"puzzles/physical/4d-pyraminx/#history","title":"History","text":"<p>Based on some ideas for the 4D pyraminx, Dominik first created a paper model in mid-December of 2023. After some suggestions from Melinda Green he created the prototype with magnets which was the first functioning version of this design. In April 2024 he finished an improved 3d printed version of the puzzle. </p>"},{"location":"puzzles/physical/4d-pyraminx/#how-does-it-work","title":"How does it work?","text":"<p>The 4D pyraminx can be moved like a pyraminx but with some additional legal moves. The edges that are in the position of the trivial tips can\u2019t legally be twisted.</p> <p>There are a few ways to project a 5-cell into 3d space. In a vertex-first projection the \u201chidden\u201d cell is on the \u201coutside\u201d of the others while in a cell-first projection it is on the \u201cinside\u201d. My design for the 4D pyraminx represents the latter way. In a solved state we have 4 colors on the outside and one on the inside of the puzzle.</p> <p></p> <p>2D visualizations of 3D perspective projections of the first iteration of a pentatope-based fractal: a) vertex-first, b) cell-first, c) face-first, d) edge-first.</p> <p> </p> <p>(pictures: projections Source, vertex first pyraminx, cell first pyraminx Source)</p>"},{"location":"puzzles/physical/4d-pyraminx/#the-pieces","title":"The Pieces","text":"<p>There are ten tetrahedron-shaped 3-colored edge pieces where the fourth face is split into three colors.</p> <p></p> <p>Then there are five octahedron-shaped 4-colored center pieces where four of the faces are split into three colors of the adjacent faces.</p> <p></p> <p>The five 4-colored trivial tips can also be represented by tetrahedrons but with the current design they would need to be a separate arrangement. So this puzzle without the trivial tips represents just the truncated pyramnix.</p> <p></p>"},{"location":"puzzles/physical/4d-pyraminx/#chirality","title":"Chirality","text":"<p>For the pieces to fit together in the correct color arrangement they need to have the same chirality. There is a left-handed and a right-handed version of the pieces and the centers and trivial tips need to have the same order of colors. Since the edges are allowed to be in more states the chirality doesn\u2019t matter as much but if the chiralities don\u2019t line up one color will be \u201cfavored\u201d in a certain orientation.</p>"},{"location":"puzzles/physical/4d-pyraminx/#moves","title":"Moves","text":"<p>There are some legal moves that don\u2019t represent a movement in the 4D puzzle.</p>"},{"location":"puzzles/physical/4d-pyraminx/#edge-migration","title":"Edge Migration","text":"<p>You can move edges to a corresponding position on the \u201cfree center\u201d and back.</p> <p> </p>"},{"location":"puzzles/physical/4d-pyraminx/#reorient-edges","title":"Reorient Edges","text":"<p>Edges can be in two states in relation to a center. They can align with the split face towards the center which will be call a \u201ccorrect\u201d state or the split face can be away from the center which will be called an \u201cincorrect\u201d state. In the latter case the edge can legally be oriented in three different ways.</p> <p> </p> <p></p> <p>Next we have moves which do represent a movement in the 4D puzzle. Unlike the normal 3D pyraminx the tips can\u2019t legally be twisted. Other than that the four different moves of turning two layers of the pyraminx is legal. In the 4D version of the puzzle we have 20 different of such slice moves. Here are the four axes of rotations that are allowed for each 2-layered pyramid.</p> <p> </p> <p>If you perform such a move on each of the four sides of the tetrahedron you get a total of 16 moves. For the missing four moves we can \u201cequip\u201d the free octahedron with the edges by swapping them onto it and perform the rest of the rotations that way.</p> <p> </p> <p> </p> <p>After the rotation you have can move the edges back.</p> <p> \u2026</p> <p>This is not necessary for a solve, though, since you have access to all the edge pieces through the 16 other moves.</p>"},{"location":"puzzles/physical/4d-pyraminx/#legal-states","title":"Legal States","text":"<p>To keep the puzzle in a legal state sometimes after certain rotations we need to make edge reorientations. When performing a non-standard slice move an edge that isn\u2019t in a correct state regarding the center that has rotated can after a turn show a split face.</p> <p></p> <p>If it isn\u2019t in a tip position it needs to be reoriented for otherwise the puzzle can get into an illegal or impossible state and also the color alignment becomes unknown for practical purposes when the puzzle is scrambled.</p> <p>How does this work? Before the rotation the colors A and B are on the outside.</p> <p></p> <p>After a non-standard rotation either A or B will be on the inside and then there are two possible cases. Firstly, if the edge is \u201ccorrect\u201d then the split face will remain touching the rotated center and the full face with color C will show on the outside.</p> <p></p> <p>The other case is when the edge is \u201cincorrect\u201d. Here the split face will be on the outside and the full color C will be touching the center.</p> <p> </p> <p>As a rule you can now rotate the edge in the \u201cdown\u201d direction in regards to the the rotation (where the center would be in the \u201cup\u201d direction) as shown here.</p> <p> </p> <p>This way we can simulate a 3-cycle of the faces A, B and C with the 4-sided shape of the tetrahedron.</p>"},{"location":"puzzles/physical/4d-pyraminx/#gyro","title":"Gyro","text":"<p>While it isn\u2019t necessary for a solve it is possible to reorient the whole puzzle by what\u2019s usually called a gyro. There might be better ways to do it but here is one way that can be done in four steps.</p>"},{"location":"puzzles/physical/4d-pyraminx/#step-1","title":"Step 1","text":"<p>First you have to align the free octahedron with one of the \u201couter\u201d edges. Regarding the colors it\u2019s best to look at the colors of the adjacent octahedron. In this step you have two cases. Either the edge is already correct the you don\u2019t have to do anything or the edge is incorrect then you have to reorient it towards the free octahedron.</p> <p> </p>"},{"location":"puzzles/physical/4d-pyraminx/#step-2","title":"Step 2","text":"<p>Now you have to separate one 2-layered pyramid next to the aligned free octahedron. Here you have to watch out for the three edges facing you. In case they are \u201cincorrect\u201d you have to reorient them towards you. Then you can move it together towards the free octahedron.</p> <p> </p>"},{"location":"puzzles/physical/4d-pyraminx/#step-3","title":"Step 3","text":"<p>Here you have to look at what\u2019s left of the \u201cupper pyramid\u201d. The topmost piece and the \u201cinner\u201d piece have to be reoriented in case they are incorrect. This time the direction you have to reorient them towards is \u201cdown\u201d, which means it\u2019s just like you would do in a normal slice move. One handy thing is that for the \u201cinner\u201d piece you simply have to look on the inside by only taking these three pieces off and if you see a whole face you can just leave the piece there. If the face is 3 colored you can just take it and rotate it together with the other pieces and it will be correct.</p> <p> </p>"},{"location":"puzzles/physical/4d-pyraminx/#step-4","title":"Step 4","text":"<p>The last step only involves the last edge. Again, if it\u2019s incorrect you first have to reorient it, this time towards the \u201cdown\u201d direction. And then you take the piece and move it \u201cover the Pyraminx\u201d, like this, and simply put it in the right spot.</p> <p> </p> <p>That\u2019s all there is to the gyro and here we have all in one movement.</p> <p></p>"},{"location":"puzzles/physical/4d-pyraminx/#comparison-of-moves-with-mc4d","title":"Comparison of Moves with MC4D","text":"Dominik\u2019s Pyraminx MagicCube 4D"},{"location":"puzzles/physical/4d-pyraminx/#example-solve","title":"Example solve","text":"<p>Here is a link to a video of an example scramble and solve of the puzzle: </p> <p>Also you can watch a tutorial of how to solve it here: </p>"},{"location":"puzzles/physical/4d-pyraminx/#notes-for-a-solve","title":"Notes for a solve","text":"<p>The 4D pyraminx can end up with a single edge flipped incorrectly unlike the 3D pyraminx. This state can be solved with an algorithm that flips two edges, the right slice move and an additional two edges flip. But if a piece was moved in a wrong way accidentally it can also end up in a state that\u2019s not solvable like this. The reason for this is that there are three states that flipping an edge moves between: (a) solved state, (b) one edge correct and the other two flipped and (c) all edges incorrect.</p> <p>Going from (c) to (a) requires two flips so the method above can flip edge A from (b) to (a) or (c) but then edge B will go to state (b). In the following tree diagram it can be seen how all 2 flip moves only lead to looping between unsolved states:</p> <p></p>"},{"location":"puzzles/physical/restricted-2x2x2x2x2/","title":"Restricted 2x2x2x2x2","text":"<p>Restricted 2x2x2x2x2</p> <p></p> <p>5D Shape: Penteract</p> <p>Physical Shape: Rectangular prism</p> <p>Pieces: 32 5c</p> <p>Magnets: 768 (without buffer)</p> <p>The restricted 2x2x2x2x2 or 2<sup>5</sup> (also called the physical domino reduced 2x2x2x2x2) is a physical puzzle that represents the state space of a virtual 2<sup>5</sup> puzzle, with one of the axes only being able to do 180 degree turns. This puzzle is like the 5D equivalent of scrambling a 2<sup>3</sup> with only <code>&lt;U,D,R2,F2,L2,B2&gt;</code>, which makes the solve way easier than the non-restricted version.</p> <p>The first known restricted 2<sup>5</sup> was made by Grant Staten which he showed off in a YouTube video. Hyperespy also made a version using foldable paper cubes to cover the pieces.</p> <p></p>"},{"location":"puzzles/physical/restricted-2x2x2x2x2/#pieces-and-twists","title":"Pieces and Twists","text":"<p>There are 32 5c pieces, but each piece can only be oriented in 12 ways instead of 60 because of the axis restriction. And just like Melinda\u2019s physical 2<sup>4</sup>, this puzzle has certain legal moves that a solver must follow. Each twist of this puzzle is like rotating a tesseract. You can take off half of it and do any reorientation like you would on the physical 2<sup>4</sup>. This includes simple rotations and gyros. The only thing you can\u2019t do is a 90 degree twist of the square layers (this results in a legal puzzle state, but is not analogous to any move on the virtual 2<sup>5</sup>). See Hyperespy\u2019s video for a full overview of the canonical moves and a way to scramble the puzzle quickly.</p>"},{"location":"puzzles/physical/restricted-2x2x2x2x2/#how-to-make-one","title":"How to make one","text":"<p>Buffer pieces magnet layout</p> <p></p> <p>Order a 2<sup>4</sup> DIY kit from Melinda Green. Then assemble it with a mirrored colour scheme from your current 2<sup>4</sup>, but with the same magnet layout. For the 5D stickers 192 are needed in total, with half (96) of them being black and the other half grey. This means that each normal physical 2<sup>4</sup> piece gets 6 stickers on it. A good option is to order a couple of custom sticker sets online such as these.</p> <p>Grant used buffer pieces when making his version in order to make it obvious to avoid doing illegal twists. If you want to add buffer pieces, you need 8 monocolored hypercubies with a custom magnet layout. Although there\u2019s only a few different illegal twists that are even possible so it\u2019s not too tricky to avoid altogether.</p>"},{"location":"puzzles/physical/2x2x2x2/","title":"Melinda\u2019s 2x2x2x2","text":"<p>Melinda\u2019s 2x2x2x2</p> <p></p> <p>4D Shape: Tesseract</p> <p>Physical Shape: Rectangular prism</p> <p>Pieces: 16 4c</p> <p>Magnets: 384</p> <p>Permutations: \\(3.3*10^{27}\\)</p> <p>See Melinda\u2019s 2x2x2x2 website for her project overview.</p>"},{"location":"puzzles/physical/2x2x2x2/#history","title":"History","text":""},{"location":"puzzles/physical/2x2x2x2/#invention","title":"Invention","text":"<p>Many hypercubers, including Melinda Green (one of the developers of MC4D) wanted to create a physical 3<sup>4</sup>, but sadly it just seemed too complicated. Eventually, she decided to focus on the 2<sup>4</sup> due to its simplicity of only having 16 4c pieces.</p> <p>Throughout 2013 and 2014, Melinda was in contact with Oskar van Deventer, and together they tried to think of any possible mechanism for a physical 2<sup>4</sup>. Originally they were determined to find a good mechanism that didn\u2019t have to rely on magnets, but after several failed attempts a magnetic mechanism was the only solution. In 2017, Melinda built the first prototype and shared an unlisted YouTube video showing it off to the mailing list members.</p> <p>A few months later, Melinda built a 2nd prototype using 3D printing from a company called Shapeways (which just so happened to offer 8 colors, 6 of them being standard Rubik\u2019s Cube colors, plus pink and purple (this is where the standard 4D colour scheme comes from)).</p>"},{"location":"puzzles/physical/2x2x2x2/#popularization","title":"Popularization","text":"<p>Professor Erno Rubik inspecting a physical 2<sup>4</sup> at G4G 2018</p> <p></p> <p>At the Gathering For Gardner conference of 2018, Roice Nelson got to show his physical 2<sup>4</sup> to Erno Rubik. It was reported that his only comment was something along the lines of \u201cnone of the derivative puzzles matter and that only his original invention is important\u201d.</p> <p>Also in 2018, the YouCuber CanChrisSolve? made a series of videos where he solved the physical 2<sup>4</sup>, which have now amassed over 100,000 views combined! A month later, a Spanish YouCuber called TheMaoiSha made a video explaining the physical 2<sup>4</sup> which now sits at over 800,000 views, exposing the world of hypercubing to more and more people.</p> <p>Because of all this recognition, many new people bought the puzzle, but it was still pretty expensive because of the costs of 3d printing and the labor of manual assembly. Eventually Melinda moved away from 3D printing in favour of injection molding, which greatly reduced the price while increasing the quality dramatically.</p> <p>Where can I buy one?</p> <p>Read this section of Melinda\u2019s website.</p>"},{"location":"puzzles/physical/2x2x2x2/#how-does-the-physical-2x2x2x2-work","title":"How Does the Physical 2x2x2x2 Work?","text":"<p>Animations showing how the virtual and physical 2<sup>4</sup> transform into each other</p> <p> </p> <p>Each twist and rotation on the virtual 2<sup>4</sup> is possible to do on the physical 2<sup>4</sup>, albeit with certain moves requiring some extra setup. See the canonical moves page for a more detailed explanation.</p> <p>Also see Melinda\u2019s shorter video on the official canonical moves.</p> <p>In December of 2017, Melinda made a longer video fully explaining the puzzle, including its canonical moves, scrambling, and more.</p>"},{"location":"puzzles/physical/2x2x2x2/canonical-moves/","title":"Physical 2x2x2x2 Canonical Moves &amp; Notation","text":"<p>Info</p> <p>Watch Melinda Green\u2019s video for a quick overview of the canonical moves</p> <p>The Canonical Moveset is a set of moves agreed upon by the community for solving the physical 2<sup>4</sup>. To get accepted into the official Hall of Fame, you must follow the canonical moves exactly. Make sure that you have already solved a virtual 2<sup>4</sup>, and are familiar with how the pieces of the physical 2<sup>4</sup> correspond. Also make sure that you know your 3D rotations (<code>x</code> <code>y</code> <code>z</code>) very well.</p>"},{"location":"puzzles/physical/2x2x2x2/canonical-moves/#canonical-moves","title":"Canonical Moves","text":""},{"location":"puzzles/physical/2x2x2x2/canonical-moves/#simple-rotations","title":"Simple Rotations","text":"<p>Simple Rotations</p> <p></p> <p>A lot of the whole puzzle reorientations can be reached without the need for the gyro algorithm. These are called simple rotations, and consist of rotaing the L and R cells together in opposing directions (as to not change the state of the puzzle, only its orientation).</p> <p><code>zy</code> <code>yz</code> <code>yw</code> <code>wy</code> <code>zw</code> <code>wz</code></p>"},{"location":"puzzles/physical/2x2x2x2/canonical-moves/#cell-twists","title":"Cell Twists","text":"<p>The left and right cells of the puzzle can be twisted into any reorientation of a cube. In other words, there are 23 different twists of the L/R cells:</p> <p>Left cell twists: <code>Ly</code> <code>Ly'</code> <code>Ly2</code> <code>Lx2</code> <code>Lz2</code> <code>Lx2,y</code> <code>Lx2,y'</code> <code>Lx</code> <code>Lx,y</code> <code>Lx,y'</code> <code>Lx,y2</code> <code>Lx'</code> <code>Lx',y</code> <code>Lx',y'</code> <code>Lx',y2</code> <code>Lz</code> <code>Lz,y</code> <code>Lz,y'</code> <code>Lz,y2</code> <code>Lz'</code> <code>Lz',y</code> <code>Lz',y'</code> <code>Lz',y2</code></p> <p>Right cell twists: <code>Ry</code> <code>Ry'</code> <code>Ry2</code> <code>Rx2</code> <code>Rz2</code> <code>Rx2,y</code> <code>Rx2,y'</code> <code>Rx</code> <code>Rx,y</code> <code>Rx,y'</code> <code>Rx,y2</code> <code>Rx'</code> <code>Rx',y</code> <code>Rx',y'</code> <code>Rx',y2</code> <code>Rz</code> <code>Rz,y</code> <code>Rz,y'</code> <code>Rz,y2</code> <code>Rz'</code> <code>Rz',y</code> <code>Rz',y'</code> <code>Rz',y2</code></p> <p>Each move here either starts with an L or an R, followed by the rotations (separated by commas).</p>"},{"location":"puzzles/physical/2x2x2x2/canonical-moves/#insideoutside-twists","title":"Inside/Outside Twists","text":"<p>Ix2 twist</p> <p></p> <p>The I and O cells are the sides with the next most turning freedom after L and R. This was referred to as an \u201caxial twist\u201d in Melinda\u2019s video. The canonical moves for the I/IO cells are <code>Ix</code> <code>Ix'</code> <code>Ix2</code> <code>Ox</code> <code>Ox'</code> <code>Ox2</code></p> <p>These twists can be difficult to perform for speedsolving, so most people tend to split it up by temporarily doing 2 illegal 90 degree twists that yield the same result. Be careful though, as this can lead to an illegal state if you accidentally screw up while doing it this way.</p>"},{"location":"puzzles/physical/2x2x2x2/canonical-moves/#slab-twists","title":"Slab Twists","text":"<p>U2 twist</p> <p></p> <p>The remaining canonical twists involve picking up a 2x2x4 \u201cslab\u201d off the puzzle, and rotating it 180 degrees in the same plane. These slabs you can pick up are the U, F, D, and B cells. Because the slabs can only be turned 180 degrees those moves will just be referred to as <code>U2</code> <code>F2</code> <code>D2</code> <code>B2</code></p>"},{"location":"puzzles/physical/2x2x2x2/canonical-moves/#gyro","title":"Gyro","text":"<p>If you try to scramble the puzzle with the moves above, you will quickly notice that the two colours on the x-axis aren\u2019t mixing with the other colours. This is because the reduced symmetry of the physical puzzle, relative to the virtual puzzle, restricts what we can do. As a result, we use a sequence of non-canonical moves that rotate the puzzle four-dimensionally in a way that changes the x-axis. This sequence of moves is called the Gyro, and will allow us to access all the rest of the puzzle rotations: <code>xz</code>, <code>zx</code>, <code>yx</code>, <code>xy</code>, <code>xw</code>, and <code>wx</code>.</p> <p></p> <p>There are several different Gyro algorithms, some of which cycle different axes. Melinda has several videos about different gyro algorithms, the shortest known one being 6 snaps. Below is a common gyro algorithm that several people in the community use.</p> <ul> <li>Take the left endcap off and put it on the right so it becomes the right endcap (this brings the puzzle into the inverted state)</li> <li><code>Ly</code> <code>Ry'</code></li> <li>Take the right endcap off and put it on the left so it becomes the left endcap (this brings the puzzle back into the normal state)</li> <li><code>Rx2</code> <code>B2</code> <code>D2</code> <code>Lx2</code></li> </ul>"},{"location":"puzzles/physical/2x2x2x2/canonical-moves/#expanded-canonical-moveset","title":"Expanded Canonical Moveset","text":"<p>The expanded canonical moveset is what is accepted for the Hypercubing.xyz leaderboards. These moves all correspond perfectly with twists on the virtual puzzle, but weren\u2019t allowed in the canonical moveset because people agreed not to for some reason.</p>"},{"location":"puzzles/physical/2x2x2x2/canonical-moves/#extra-slab-twists","title":"Extra slab twists","text":"<p>Several new slab twists are added. For the U cell, this means going from having just <code>Uy2</code> to now having <code>Uy2</code> <code>Ux,y2</code> <code>Ux',y2</code> <code>Ux</code> <code>Ux'</code> <code>Ux2</code> <code>Uz2</code></p>"},{"location":"puzzles/physical/2x2x2x2/canonical-moves/#extra-io-cell-twists","title":"Extra I/O cell twists","text":"<p><code>Iz2</code> <code>Iy2</code> <code>Oz2</code> <code>Oy2</code> are added (although they are very hard to fingertrick and perform quickly).</p>"},{"location":"puzzles/physical/2x2x2x2/canonical-moves/#scramble-notation","title":"Scramble notation","text":"<p>Scrambles use comma-separated cell twists and the special move <code>#</code>. <code>#</code> represents a <code>Uy2</code> move followed by a \u201cleft-to-right restack,\u201d which consists of taking the left endcap off and putting it on the right side of the puzzle. This is not a legal move during solves, but does result in a legal puzzle state so it is used during scrambles.</p>"},{"location":"puzzles/physical/2x2x2x2/image-generator/","title":"Physical 2x2x2x2 Image Generator","text":"<p>Generate an image of a physical 2x2x2x2 by inputting moves using canonical moves notation, or by specifying the color per sticker. You can also do this directly from the URL by adding <code>?&amp;moves=</code> or <code>?&amp;stickers=</code> at the end, and using - to separate (and <code>H</code> instead of <code>#</code> for gyro).</p> Generate by move input <p>Moves that the generator will accept: <code>zy</code> <code>yz</code> <code>xz</code> <code>zx</code> <code>yx</code> <code>xy</code> <code>yw</code> <code>wy</code> <code>xw</code> <code>wx</code> <code>zw</code> <code>wz</code> <code>Ly</code> <code>Ly'</code> <code>Ly2</code> <code>Lx2</code> <code>Lz2</code> <code>Lx2,y</code> <code>Lx2,y'</code> <code>Lx</code> <code>Lx,y</code> <code>Lx,y'</code> <code>Lx,y2</code> <code>Lx'</code> <code>Lx',y</code> <code>Lx',y'</code> <code>Lx',y2</code> <code>Lz</code> <code>Lz,y</code> <code>Lz,y'</code> <code>Lz,y2</code> <code>Lz'</code> <code>Lz',y</code> <code>Lz',y'</code> <code>Lz',y2</code> <code>Ry</code> <code>Ry'</code> <code>Ry2</code> <code>Rx2</code> <code>Rz2</code> <code>Rx2,y</code> <code>Rx2,y'</code> <code>Rx</code> <code>Rx,y</code> <code>Rx,y'</code> <code>Rx,y2</code> <code>Rx'</code> <code>Rx',y</code> <code>Rx',y'</code> <code>Rx',y2</code> <code>Rz</code> <code>Rz,y</code> <code>Rz,y'</code> <code>Rz,y2</code> <code>Rz'</code> <code>Rz',y</code> <code>Rz',y'</code> <code>Rz',y2</code> <code>Ix</code> <code>Ix'</code> <code>Ix2</code> <code>Ox</code> <code>Ox'</code> <code>Ox2</code> <code>U2</code> <code>F2</code> <code>B2</code> <code>D2</code> <code>#</code> Input moves: (separated by spaces) </p> <p>Generate Image</p> <p><p></p></p> <p><p></p> </p> Generate by sticker input <p>Colors: <pre><code>W = white\nY = yellow\nR = red\nO = orange\nG = green\nB = blue\nM = magenta (purple)\nP = pink\nS = silver (gray)\n</code></pre> Piece/Sticker order: <code>LUBO</code> <code>LUBI</code> <code>LUFI</code> <code>LUFO</code> <code>LDBO</code> <code>LDBI</code> <code>LDFI</code> <code>LDFO</code> <code>RUBI</code> <code>RUBO</code> <code>RUFO</code> <code>RUFI</code> <code>RDBI</code> <code>RDBO</code> <code>RDFO</code> <code>RDFI</code></p> <p>Input stickers by piece: (separated by spaces) </p> <p>Generate Image</p> <p><p></p></p>"},{"location":"puzzles/physical/2x2x2x2/scramble-generator/","title":"Physical 2x2x2x2 Scramble Generator","text":"<p>See Scramble notation. In particular, <code>#</code> represents a <code>Uy2</code> followed by a left-to-right restack.</p> <p>The starting orientation is:</p> <ul> <li>R = red</li> <li>U = white</li> <li>F = green</li> <li>O = pink</li> </ul> <p>Scrambles: 5</p> <p> Generate Scrambles</p> <p>Scrambles</p> <p><p></p> </p>"},{"location":"software/","title":"Software","text":"<p>Since building physical representations of higher-dimensional puzzles is challenging, we use computer software to simulate them.</p>"},{"location":"software/#what-program-should-i-download","title":"What program should I download?","text":"<p>We recommend Hyperspeedcube to get started.</p> <p>If you want macro support (recorded sequences of moves) or other 4D puzzles, Magic Cube 4D is a good option.</p> <ul> <li>For 5D+ puzzles: Magic Cube 5D, Magic Cube 7D, and Magic Puzzle Ultimate</li> <li>For puzzles in non-Euclidean geometries: MagicTile</li> <li>For 3D puzzles: pCubes</li> </ul> <p>For hypercubing on mobile devices, see Android apps or iOS apps.</p>"},{"location":"software/#general-cubing-hypercubing","title":"General cubing &amp; hypercubing","text":"What do the icons mean? <ul> <li> Mouse controls</li> <li> Keyboard controls</li> <li> Customizable keyboard controls</li> <li> Find/filter piece by color</li> <li> Find/filter pieces by type</li> <li> Timer</li> <li> Macros</li> <li> Move input</li> <li> Custom colors</li> <li> Custom puzzles</li> <li> VR support</li> </ul> Program Platforms Features Puzzles Hyperspeedcube  \u2022   {1-9}<sup>{3-4}</sup> Magic Cube 4D  \u2022   4D via Schl\u00e4fli symbol MagicTile  \u2022   2D tilings Magic Puzzle Ultimate  \u2022   3D+ doctrinaire Magic Cube 7D  \u2022   {3-5}<sup>{4-7}</sup> Magic Cube 7D with Keybinds<sup>1</sup>  \u2022   {2-5}<sup>{4-7}</sup> Magic Cube 5D  \u2022   {2-7}<sup>5</sup> Magic Cube 4D VR  \u2022   3<sup>4</sup> Flat Hypercube  \u2022   {1-32k}<sup>{1-32k}</sup> Gelatinbrain<sup>2</sup>  \u2022   many cursed things pCubes nearly every 3D puzzle Ultimate Magic Cube platonic 3D Ultimate Magic Cube 2  \u2022   platonic + misc 3D Twizzle Explorer  \u2022   many 3D puzzles IsoCubeSim  \u2022   AxBxC, N-layer megaminx Geraniums Pot  \u2022   rotating-circle puzzles circleguy  \u2022   rotating-circle puzzles"},{"location":"software/#specific-puzzles","title":"Specific puzzles","text":"Program Platforms Features Puzzle Magic Hyperbolic Tile {6,3,3} (7 quotients) Magic Simplex 5D  \u2022   5D simplex (+ recuts) Magic120Cell  \u2022   120-cell (+ recolorings) Nan Ma\u2019s 11-cell  \u2022   11-cell Twisty Prisms  \u2022   certain 3D prisms qCubes and qMinx  \u2022   cubes, (hemi)dodecahedra Zasharan2\u2019s physical 2<sup>4</sup>  \u2022   Physical 2x2x2x2"},{"location":"software/#1d-and-2d-puzzles","title":"1D and 2D puzzles","text":"<ul> <li>k-Card Game</li> <li>Loopover</li> <li>Heav\u2019s Relocation Puzzle</li> <li>Slidysim</li> <li>Luna\u2019s \u201cGreen\u201d (generalization of Lights Out and Green The Board)</li> <li>Sphenic Biaxe</li> </ul>"},{"location":"software/#complex-laminated-puzzles","title":"Complex &amp; laminated puzzles","text":"<ul> <li>Complex Loopover</li> <li>Complex Cube</li> <li>Luna\u2019s Complex Puzzles</li> <li>Milo\u2019s laminated puzzles</li> <li>Ema\u2019s Complex Hemicube Puzzle</li> </ul>"},{"location":"software/#other","title":"Other","text":"<ul> <li>Nan Ma\u2019s puzzles (Reflecube, Lollipop, Clockwork Cube, and more)</li> <li>Akkei\u2019s physical 3<sup>4</sup> program</li> <li>Rayzchen\u2019s 3to4++ (Physical 3<sup>4</sup>) (web version)</li> <li>Arnaud Ch\u00e9ritat\u2019s Hungarian Rings</li> <li>Magic Cube 3D</li> <li>MagmaMcFry\u2019s Quaternion Cube</li> <li>TwistyPuzzles by CasualCuber</li> <li>Banderson\u2019s \u201csus non-associative puzzle\u201d</li> <li>Quantum Loopover by Nan Ma and Melinda Green</li> </ul>"},{"location":"software/#android-apps","title":"Android apps","text":"<p>Hypercubing on mobile devices is not recommended; however, if this is your only option, these apps are available for Android:</p> <ul> <li>Magic Cube 4D (Raynefork) (recommended)</li> <li>Magic Cube 4D (superseded by Raynefork)</li> <li>The Tesseract Puzzle</li> <li>4D Hypercube Puzzle</li> </ul>"},{"location":"software/#ios-apps","title":"iOS apps","text":"<p>There are no known apps for hypercubing on iOS.</p> <p>If you\u2019re able to connect an external mouse &amp; keyboard, the web version of Hyperspeedcube may work on mobile devices but it\u2019s not officially supported.</p>"},{"location":"software/#tools","title":"Tools","text":"<ul> <li>Orb, for planning puzzle cut depths</li> <li>RocKeT, for finding RKT cancels for 3D algorithms</li> <li>Hypersolve, for generating short 2<sup>4</sup> solutions and scrambles</li> <li>hscfilter, for generating HSC1 filter strings</li> <li>Hyperscrambler, for generating custom HSC1 scrambles</li> <li>mousekeybinds, for adding keyboard controls to mouse-controlled programs</li> <li>Grippy, for analyzing algorithms using grip theory</li> <li>Discrete Hopf Fibration, for exploring swirlchora to build puzzles from</li> </ul>"},{"location":"software/#games","title":"Games","text":"<p>This is not a complete list of 4D games. This is specifically 4D software that hypercubers often recommend for understanding 4D geometry better.</p> <ul> <li>4D Blocks</li> <li>Tesserxel (4D physics)</li> </ul>"},{"location":"software/#visualizations","title":"Visualizations","text":"<ul> <li>IMAC2 Rubik4D by Oradimi, melokye, and MMeche</li> </ul> <ol> <li> <p>Runs on macOS via Wine; download here: MC7D-KB wine wrapper made by thatcomputerguy \u21a9</p> </li> <li> <p>Full name: gelatinbrain\u2019s Virtual Magic Polyhedra (permutationpuzzles)\u00a0\u21a9</p> </li> </ol>"},{"location":"software/hyperspeedcube/","title":"Hyperspeedcube","text":"<p>Hyperspeedcube (HSC) is a modern, beginner-friendly 3D and 4D Rubik\u2019s cube simulator with customizable mouse and keyboard controls and advanced features for speedsolving. It\u2019s been used to break numerous speedsolving records and runs on all major operating systems plus the web. Hyperspeedcube was first released in early 2022 and is developed by Andrew Farkas (a.k.a. HactarCE).</p> <p> </p>"},{"location":"software/hyperspeedcube/#downloadinstallation","title":"Download/installation","text":"<ul> <li> <p> Download Hyperspeedcube</p> </li> <li> <p> Use Hyperspeedcube online</p> </li> </ul> <p>HSC does not have an installer. On Windows, open <code>hyperspeedcube_win64.zip</code> and move <code>hyperspeedcube.exe</code> out of  to a folder on your computer.</p> <p>Features missing from the web version</p> <ul> <li>Saving &amp; loading logs to file (can still save/load via clipboard)</li> <li>Awareness of alternate keyboard layouts</li> <li>Antialiasing</li> </ul>"},{"location":"software/hyperspeedcube/#troubleshooting","title":"Troubleshooting","text":"<p>If none of the instructions below help, join the Hypercubers Discord server and start a thread in the <code>#\u2753help</code> forum. Mention in your post that you\u2019ve read the FAQ.</p>"},{"location":"software/hyperspeedcube/#windows","title":"Windows","text":"My antivirus thinks Hyperspeedcube is malicious <p>Try opening the Windows Security app, and digging around in the settings there to disable it, then try the download again.</p> \u201cWindows protected your PC\u201d <p>Microsoft Defender SmartScreen prevented an unrecognized app from starting. Running this app might put your PC at risk.</p> <p>Click More info and then Run anyway.</p> <p>In order to prevent that message from appearing, Hactar would have to spend a lot of money to buy a Microsoft developer license and go through a lot of hassle every time there is a new release of HSC. You\u2019ll only have to click through the warnings once.</p> \u201cThe program can\u2019t start because VCRUNTIME140.dll is missing from your computer.\u201d <p>You need to install the Microsoft Visual C++ Redistributable. Here is a direct download.</p> \u201cHyperspeedcube crashed. A crash report has been saved to \u2026\u201d <p>First, make sure your graphics drivers are up-to-date! This is the most common cause of Hyperspeedcube crashes. Here is a video tutorial if you don\u2019t know how to update your drivers.</p> <p>If you still get an error message, then follow these steps:</p> <ol> <li>Press +R, type <code>%LocalAppData%</code>, and press Enter</li> <li>Open the <code>Temp</code> folder</li> <li>Find the file named in the error message and send it to Hactar either in a GitHub issue or a new thread in the <code>#\u2753help</code> forum on Discord</li> </ol>"},{"location":"software/hyperspeedcube/#macos","title":"macOS","text":"\u201c\u2018Hyperspeedcube.app\u2019 cannot be opened because the developer cannot be verified.\u201d <p>macOS cannot verify that this app is free from malware.</p> <p>Go to System Settings \u2192 Privacy &amp; Security, then scroll down to Security. Select App Store and identified developers, then click Open Anyway.</p> <p>In order to prevent that message from appearing, Hactar would have to spend a lot of money to buy an Apple developer license and go through a lot of hassle every time there is a new release of HSC.</p>"},{"location":"software/hyperspeedcube/#linux","title":"Linux","text":"<p>Check that you have up-to-date graphics drivers installed. If that doesn\u2019t help, you\u2019re on your own.</p> <p>If there\u2019s any changes you make to the Hyperspeedcube source code to get it working, please open an issue or PR on GitHub. If you\u2019re able to make an package for HSC for your package manager, please let me know either on Discord or GitHub Issues.</p>"},{"location":"software/hyperspeedcube/#history","title":"History","text":""},{"location":"software/hyperspeedcube/#10","title":"1.0","text":"<p>On April 24th, 2020, Hactar wrote a small program called Keyboard Speedcube that simulated a 3<sup>3</sup> using keybinds inspired by Ryan Heise\u2019s Rubik\u2019s Cube Simulator. In October 2021, rudimentary 4D support was added and a screenshot was posted on the Hypercubers Discord server. A month later, Rowan Fortier asked Hactar if he could receive an early version of the program, and showcased it in a YouTube video. Shortly before the video\u2019s release, the project was renamed to Hyperspeedcube.</p> <p> </p> <p>The first official release was v0.1.0 in January 2022, featuring customizable keybinds and support for the 3<sup>3</sup> and 3<sup>4</sup>. Over the next year, many community-requested features were added, including mouse controls and more n<sup>3</sup> and n<sup>4</sup> puzzles. (See the changelog for a complete list of releases and changes.)</p> <p>Hyperspeedcube began to see widespread use after the addition of mouse controls and more advanced piece filters in August 2022, kickstarting the hyperspeedsolving revolution. The web version was released in January 2023.</p> <p>Shortly after the web version was released, Hactar and Luna began reading the MPU source code, intending to make a tool to ease the process of writing MPU puzzle definitions. Instead, they were able to replicate MPU\u2019s puzzle generation algorithms, and Hactar set to work on a new puzzle simulator using this backend. Over the next year, they adapted the algorithm to use Conformal Geometric Algebra in the hopes of supporting curved cuts, but this proved too challenging in higher dimensions. Together with Milo, they built a puzzle definition system using Lua, since it is a well-known programming language with a simple type system that is easy to embed, sandbox, and extend with custom types.</p> <p>The first dev build of the new version, Hyperspeedcube v2.0.0-pre.1, was released on July 16th, 2023, and supported Lua shape definitions but not twists. As of mid-2024, HSC 2.0 is still in active development.</p>"},{"location":"software/hyperspeedcube/#20","title":"2.0","text":"<p>HSC 2.0 is the next major update in the works, with no set release date as of yet. Below is a list of upcoming features:</p> <ul> <li>Build nearly any puzzle in 3D to 7D space</li> <li>Complete overhaul of the graphics engine</li> <li>Built-in timer for speedsolves, including a configurable autosplitter</li> <li>Timeline of progress during solve</li> <li>More piece filter customization</li> </ul> <p>See Hactar\u2019s website for more details.</p>"},{"location":"software/hyperspeedcube/#development-screenshots","title":"Development screenshots","text":""},{"location":"software/hyperspeedcube/#early-shape-generation-and-twisting-prototypes-late-2022","title":"Early shape generation and twisting prototypes (late 2022)","text":""},{"location":"software/hyperspeedcube/#graphics-debugging-early-2024","title":"Graphics debugging (early 2024)","text":""},{"location":"software/hyperspeedcube/#ui-development-mid-2024","title":"UI development (mid 2024)","text":""},{"location":"software/magiccube4d/","title":"Magic Cube 4D","text":"<p>Magic Cube 4D (MC4D) was one of the first ever programs capable of simulating higher dimensional twisty puzzles. It was first released in 1988 and was developed by Melinda Green, Don Hatch, Jay Berkenbilt, and Roice Nelson.</p> 3^4^ puzzle in Magic Cube 4D"},{"location":"software/magiccube4d/#downloadinstallation","title":"Download/installation","text":"<p>Magic Cube 4D requires Java to be installed. Once you have Java, go to the Superliminal website and click on the <code>Click here to download MagicCube4D</code> button. Save the executable <code>mc4d-4-3-343.jar</code> file somewhere you will remember, as this file is how you open the program.</p>"},{"location":"software/magiccube4d/#alternative-versions","title":"Alternative versions","text":""},{"location":"software/magiccube4d/#dons-version","title":"Don\u2019s version","text":"<p>Don\u2019s version contains some 2D puzzles, many 3D puzzles, and some interesting 4D puzzles. It also has a menu for 5D and 6D puzzles, however they don\u2019t work when you select them. Don\u2019s version can be downloaded directly from his GitHub release.</p>"},{"location":"software/magiccube4d/#troubleshooting","title":"Troubleshooting","text":"<p>Try reading MC4D\u2019s FAQ on the superliminal website. If you\u2019re still having an issue, try asking for help on the Discord server or mailing list.</p> my computer wants to open the <code>.jar</code> file with notepad <p>This means that you haven\u2019t installed Java properly. Make sure to get the newest version from Java\u2019s website. After the installation, right click on the <code>mc4d-4-3-343.jar</code> file, and click <code>open with Java(TM) Platform SE Binary</code>.</p> facecolors.txt doesn\u2019t change my colors <ol> <li>Try closing and reopening the program, and then reloading the puzzle using the menu.</li> <li>If you\u2019re on windows and you have show file extensions off in settings, then you may have accidentally named the file <code>facecolors.txt.txt</code>. Try renaming it to just <code>facecolors</code>. (Alternatively, enable show file extensions in settings)</li> </ol>"},{"location":"software/magicpuzzleultimate/","title":"Magic Puzzle Ultimate","text":"<p>Magic Puzzle Ultimate (MPU or MPUlt) is a higher-dimensional puzzle simulator developed by Andrey Astrelin that can simulate nearly any symmetric doctrinaire puzzle and supports, including user-defined ones.</p> <p>Download MPU</p> 32-cell puzzle in MPU"},{"location":"software/magicpuzzleultimate/#records","title":"Records","text":"<p>Some records for the shortest and first solutions of a puzzle are kept on the Superliminal Wiki page.</p>"},{"location":"software/magicpuzzleultimate/#virtual-puzzles","title":"Virtual Puzzles","text":"<p>While we\u2019re waiting for Hyperspeedcube 2.0 to release, Magic Puzzle Ultimate is a great program to get your feet wet in the world of other 4D puzzles.</p> <p>Open the location where your <code>MPUlt</code> folder is. Next, open the <code>MPUlt_puzzles.txt</code> file. This file is a big list of all the puzzles in the program. Now you can copy &amp; paste the puzzles that you want below under their appropriate <code>Block</code>. Just save the file, reopen MPUlt, and the puzzle you added will be in the menu.</p>"},{"location":"software/magicpuzzleultimate/#puzzle-definitions","title":"Puzzle Definitions","text":"3D Puzzles 3x3x3 3x3x3<pre><code>Puzzle 3x3x3\nDim 3\nNAxis 1\nFaces 1,0,0\nGroup 1,0,0/1,1,0 1,0,0/1,0,1\nAxis 1,0,0\nTwists 0,1,0/0,1,1\nCuts -0.33 0.33\n</code></pre> Skewb Skewb<pre><code>Puzzle Skewb\nDim 3\nNAxis 1\nFaces 1,0,0\nGroup 1,0,0/1,1,0 1,0,0/1,0,1\nAxis 1,1,1\nTwists 1,-1,0/1,0,-1\nCuts 0\n</code></pre> Compy Rainbow Compy Rainbow<pre><code>Puzzle Compy_Rainbow\nDim 3\nNAxis 1\nFaces 1,0,0 0.6667,0.6667,0.6667\nGroup 1,0,0/1,1,0 1,0,0/1,0,1\nAxis 1,1,1\nTwists 1,-1,0/1,0,-1\nCuts -0.45 0.45\nFixedMask 2\n</code></pre> Cuboctahedron Cuboctahedron<pre><code>Puzzle Cuboctahedron\nDim 3\nNAxis 2\nFaces 1,0,0 0.667,0.667,0.667\nGroup 1,0,0/1,1,0 1,0,0/1,0,1\nAxis 1,0,0\nTwists 0,1,0/0,1,1\nCuts 0.5 -0.5\nAxis 1,1,1\nTwists 1,-1,0/1,0,-1\nCuts 0.5 -0.5\n</code></pre> 4D Puzzles Tesseract Family 2x2x1x1 2x2x1x1<pre><code>Puzzle 2x2x1x1\nDim 0\nNAxis 2\nFaces 1,0,0,0 0,0,0,0.5\nGroup 1,0,0,0/1,1,0,0 1,0,0,0/0,0,1,0 1,0,0,0/0,0,0,1 0,1,0,0/0,0,1,0 0,1,0,0/0,0,0,1 0,0,1,0/0,0,1,1\n</code></pre> 2x2x2x1 2x2x2x1<pre><code>Puzzle 2x2x2x1\nDim 4\nNAxis 2\nFaces 1,0,0,0 0,0,0,0.5\nGroup 1,0,0,0/1,1,0,0 1,0,0,0/1,0,1,0 1,0,0,0/0,0,0,1\nAxis 1,0,0,0\nTwists 0,1,0,0/0,1,1,0 0,1,0,0/0,0,0,1\nCuts 0 0\nAxis 0,0,0,1\nTwists 1,0,0,0/1,1,0,0 1,0,0,0/1,0,1,0\nCuts\n</code></pre> 2x2x2x3 2x2x2x3<pre><code>Puzzle 2x2x2x3\nDim 4\nNAxis 2\nFaces 1,0,0,0 0,0,0,1.5\nGroup 1,0,0,0/1,1,0,0 1,0,0,0/1,0,1,0 1,0,0,0/0,0,0,1\nAxis 1,0,0,0\nTwists 0,1,0,0/0,1,1,0 0,1,0,0/0,0,0,1\nCuts 0\nAxis 0,0,0,1\nTwists 1,0,0,0/1,1,0,0 1,0,0,0/1,0,1,0\nCuts 0.5 -0.5\n</code></pre> 2x2x3x3 2x2x3x3<pre><code>Puzzle 2x2x3x3\nDim 4\nNAxis 2\nFaces 1,0,0,0 0,0,1.5,0\nGroup 1,0,0,0/1,1,0,0 1,0,0,0/0,0,1,0 0,0,1,0/0,0,1,1\nAxis 1,0,0,0\nTwists 0,0,1,0/0,0,1,1 0,1,0,0/0,0,1,0 0,1,0,0/0,0,1,1\nCuts 0\nAxis 0,0,1,0\nTwists 1,0,0,0/1,1,0,0 0,0,0,1/1,0,0,0 0,0,0,1/1,1,0,0\nCuts 0.5 -0.5\n</code></pre> 2x2x3x4 2x2x3x4<pre><code>Puzzle 2x2x3x4\nDim 4\nNAxis 3\nFaces 1,0,0,0 0,0,1.5,0 0,0,0,2\nGroup 1,0,0,0/1,1,0,0 1,0,0,0/0,0,1,0 1,0,0,0/0,0,0,1\nAxis 1,0,0,0\nTwists 0,1,0,0/0,0,1,0 0,1,0,0/0,0,0,1 0,0,1,0/0,0,0,1\nCuts 0\nAxis 0,0,1,0\nTwists 1,0,0,0/1,1,0,0 1,0,0,0/0,0,0,1 0,0,0,1/0,1,0,0\nCuts 0.5 -0.5\nAxis 0,0,0,1\nTwists 1,0,0,0/1,1,0,0 1,0,0,0/0,0,1,0 0,0,1,0/0,1,0,0\nCuts 1 0 -1\n</code></pre> 2x3x4x5 2x3x4x5<pre><code>Puzzle 2x3x4x5\nDim 4\nNAxis 4\nFaces 1,0,0,0 0,1.5,0,0 0,0,2,0 0,0,0,2.5\nGroup 1,0,0,0/0,1,0,0 1,0,0,0/0,0,1,0 1,0,0,0/0,0,0,1\nAxis 1,0,0,0\nTwists 0,1,0,0/0,0,1,0 0,1,0,0/0,0,0,1 0,0,1,0/0,0,0,1\nCuts 0\nAxis 0,1,0,0\nTwists 1,0,0,0/0,0,1,0 1,0,0,0/0,0,0,1 0,0,1,0/0,0,0,1\nCuts 0.5 -0.5\nAxis 0,0,1,0\nTwists 1,0,0,0/0,1,0,0 1,0,0,0/0,0,0,1 0,0,0,1/0,1,0,0\nCuts 1 0 -1\nAxis 0,0,0,1\nTwists 1,0,0,0/0,1,0,0 1,0,0,0/0,0,1,0 0,0,1,0/0,1,0,0\nCuts 1.5 0.5 -0.5 -1.5\n</code></pre> 3x3x3x1 3x3x3x1<pre><code>Puzzle 3x3x3x1\nDim 4\nNAxis 2\nFaces 1.5,0,0,0 0,0,0,0.5\nGroup 1,0,0,0/1,1,0,0 1,0,0,0/1,0,1,0 1,0,0,0/0,0,0,1\nAxis 1,0,0,0\nTwists 0,1,0,0/0,1,1,0 0,1,0,0/0,0,0,1\nCuts 0.5 -0.5\nAxis 0,0,0,1\nTwists 1,0,0,0/1,1,0,0 1,0,0,0/1,0,1,0\nCuts\n</code></pre> 3x3x3x2 3x3x3x2<pre><code>Puzzle 3x3x3x2\nDim 4\nNAxis 2\nFaces 1.5,0,0,0 0,0,0,1\nGroup 1,0,0,0/1,1,0,0 1,0,0,0/1,0,1,0 1,0,0,0/0,0,0,1\nAxis 1,0,0,0\nTwists 0,1,0,0/0,1,1,0 0,1,0,0/0,0,0,1\nCuts -0.5 0.5\nAxis 0,0,0,1\nTwists 1,0,0,0/1,1,0,0 1,0,0,0/1,0,1,0\nCuts 0\n</code></pre> 4x4x4x4 4x4x4x4<pre><code>Puzzle 4^4\nDim 4\nNAxis 1\nFaces 1,0,0,0\nGroup 1,0,0,0/1,1,0,0 1,0,0,0/1,0,1,0 1,0,0,0/1,0,0,1\nAxis 1,0,0,0\nTwists 0,1,0,0/0,1,1,0 0,1,-1,0/0,0,0,1 0,2,-1,-1/0,1,1,-2\nCuts 0.5 0 -0.5\n</code></pre> Other {4}x{4} 3 {4}x{4} 3<pre><code>Puzzle {4}x{4} 3\nDim 4\nNAxis 2\nFaces 1,0,0,0 0,0,1,0\nGroup 1,0,0,0/1,1,0,0 1,0,0,0/0,0,1,0 0,0,1,0/0,0,1,1\nAxis 1,0,0,0\nTwists 0,1,0,0/0,0,1,0 0,0,1,0/0,0,1,1\nCuts 0.5 -0.5\nAxis 0,0,1,0\nTwists 1,0,0,0/1,1,0,0 1,0,0,0/0,0,0,1\nCuts 0.5 -0.5\n</code></pre> 3^4 Skewb 3^4 Skewb<pre><code>Puzzle 3^4 Skewb\nDim 4\nNAxis 1\nFaces 1,0,0,0\nSimplified\nGroup 1,0,0,0/1,1,0,0 1,0,0,0/1,0,1,0 1,0,0,0/1,0,0,1\nAxis 1,1,1,1\nTwists 0,2,-1,-1/0,1,1,-2 1,-1,0,0/0,0,1,-1\nCuts 0\n</code></pre> 5-5_Duotegum 5-5_Duotegum<pre><code>Puzzle 5-5_Duotegum\nDim 4\nNAxis 1\nFaces -1,1,0,0\nGroup 1,0,0,0/0.809016994,0,0.587785252,0 1,1,0,0/0,0,1,1\nAxis -1,1,0,0\nTwists 0,0,1,0/0,0,0,1 1,1,0,0/0,0,1,1 1,1,0,0/0,0,-1,1\nCuts 0.65\n</code></pre> 16-cell Face Turning 16-cell Face Turning<pre><code>Puzzle 16-cell_FT\nDim 4\nNAxis 1\nFaces 1,1,1,1\nGroup 1,0,0,0/1,1,0,0 1,0,0,0/1,0,1,0 1,0,0,0/1,0,0,1\nAxis 1,1,1,1\nTwists 0,2,-1,-1/0,1,1,-2 1,-1,0,0/0,0,1,-1\nCuts 0.6 -0.6\nFixedMask 2\n</code></pre> Chamfered Pentagonal Duoprism Chamfered Pentagonal Duoprism<pre><code>Puzzle Chamfered_Pentagonal_Duoprism\nDim 4\nNAxis 2\nFaces -1.41429,0,0,0 1.41429,0,0,0 -1,1,0,0\nGroup 1,0,0,0/0.809016994,0,0.587785252,0 1,1,0,0/0,0,1,1\nAxis -1,0,0,0\nTwists 0,1,0,0/0,0.809016994,0,0.587785252 0,0,1,0/0,0,0,1\nCuts 1.3 -1.23\nAxis -1,1,0,0\nTwists 0,0,1,0/0,0,0,1 1,1,0,0/0,0,1,1 1,1,0,0/0,0,-1,1\nCuts 0.85\n</code></pre> Chamfered Tesseract Chamfered Tesseract<pre><code>Puzzle Chamfered_Tesseract\nDim 4\nNAxis 2\nFaces 1,0,0,0 0.70710678,0.70710678,0,0\nGroup 1,0,0,0/1,1,0,0 1,0,0,0/1,0,1,0 1,0,0,0/1,0,0,1\nAxis 1,0,0,0\nTwists 0,1,0,0/0,1,1,0 0,1,0,0/0,1,0,1 0,0,1,0/0,0,1,1\nCuts 0.85 -0.85\nAxis 1,1,0,0\nTwists 0,0,1,0/0,0,1,1 1,-1,0,0/0,0,1,0 1,-1,0,0/0,0,1,1\nCuts 0.57 -0.57\n</code></pre> Octahedral Prism Octahedral Prism<pre><code>Puzzle Octahedral_Prism\nDim 4\nNAxis 2\nFaces 1,0,0,0 0,1,1,1\nGroup 1,0,0,0/0,1,0,0 0,1,0,0/0,1,1,0 0,1,0,0/0,1,0,1\nAxis 1,0,0,0\nTwists 0,1,0,0/0,1,1,0 0,1,1,0/0,0,1,1 0,1,0,0/0,0,1,1\nCuts 0.5 -0.5\nAxis 0,1,1,1\nTwists 0,1,-1,0/0,1,0,-1 1,0,0,0/0,1,-1,0\nCuts 0.5 -0.5\n</code></pre> Snub 24-cell Snub 24-cell<pre><code>Puzzle Snub24cell\nDim 4\nNAxis 2\nFaces 1,0,0,0 0.809017,0.809017,0,0 0.9045085,0.6545085,0.25,0\n#Faces 1,0,0,0 0.809017,0.809017,0,0 0.9045085,0.6545085,0.25,0 0.9045085,0.6545085,-0.25,0\nGroup 0,2,-1,-1/0,1,1,-2 0,1,1,2/0,2,-1,1 2,-2,-2,0/1,-1,-1,3\nAxis 1,0,0,0\nTwists 0,2,-1,-1/0,1,1,-2 0,0,1,0/0,0,0,1 0,1,1,2/0,2,-1,1\nCuts 0.9 -0.9\nFixedMask 2\nAxis 0.809017,0.809017,0,0\nTwists 2,-2,-2,0/1,-1,-1,3 1,-1,-1,-3/2,-2,-2,0 0,0,0,1/0,0,1,0\nCuts 0.95 -0.95\nFixedMask 2\n</code></pre> Square Antiprism Prism Square Antiprism Prism<pre><code>Puzzle Square_Antiprism_Prism\nDim 4\nNAxis 3\nFaces -0.5,0,0,0 0,0,0.42044820,0 0,0.56903559,0.14014940,0\nGroup 0,0,1,0/0,0.38268343,0,0.92387953 0,0,0,1/0,1,0,1 1,0,0,0/0,0,0,1\nAxis 1,0,0,0\nTwists 0,1,0,0/0,1,0,1 0,0,1,0/0,0.38268343,0,0.92387953 0,0,1,0/0,-0.38268343,0,0.92387953\nCuts 0.1666 -0.1666\nAxis 0,0,1,0\nTwists 0,1,0,0/0,1,0,1 1,0,0,0/0,1,0,0 1,0,0,0/0,1,0,1\nCuts 0.1235 -0.1235\nAxis 0,0.56903559,0.14014940,0\nTwists 1,0,0,0/0,0,0,1\nCuts 0.621\n</code></pre> Triangular Antitegmatic Icoschoron Triangular Antitegmatic Icosachoron<pre><code>Puzzle Triangular-antitegmatic_Icosachoron\nDim 4\nNAxis 1\nFaces 1,0,0,0\nGroup 1,0,0,0/0.5,0.866025404,0,0 0,0.577350269,0.816496581,0/0,0,0.612372436,0.790569415\n#1,0,0,0/0.5,sqrt(3)/2,0,0 0,1/sqrt(3),sqrt(2/3),0/0,0,1/sqrt(6),sqrt(5/6)\nAxis 1,0,0,0\nTwists 0,0.577350269,0.816496581,0/0,0,0.612372436,0.790569415 0,0.790569,-0.559017,0.25/0,0.57735,1.22474,0.912871\nCuts 0.75 -0.75\n</code></pre> 5D Puzzles Penteract Family 1x1x1x1x2 1x1x1x1x2<pre><code>Puzzle 1x1x1x1x2\nDim 5\nNAxis 2\nFaces 0.5,0,0,0,0 0,0,0,0,1\nGroup 1,0,0,0,0/1,1,0,0,0 1,0,0,0,0/1,0,1,0,0 1,0,0,0,0/1,0,0,1,0 1,0,0,0,0/0,0,0,0,1\nAxis 1,0,0,0,0\nTwists 0,1,0,0,0/0,1,1,0,0 0,1,0,0,0/0,0,0,0,1\nCuts\nAxis 0,0,0,0,1\nTwists 1,0,0,0,0/1,1,0,0,0\nCuts 0\n</code></pre> 1x1x1x2x2 1x1x1x2x2<pre><code>Puzzle 1x1x1x2x2\nDim 5\nNAxis 2\nFaces 0.5,0,0,0,0 0,0,0,1,0\nGroup 1,0,0,0,0/1,1,0,0,0 1,0,0,0,0/1,0,1,0,0 1,0,0,0,0/0,0,0,1,0 0,0,0,1,0/0,0,0,1,1\nAxis 1,0,0,0,0\nTwists 0,1,0,0,0/0,1,1,0,0 0,1,0,0,0/0,0,0,1,0 0,0,0,1,0/0,0,0,1,1\nCuts\nAxis 0,0,0,1,0\nTwists 1,0,0,0,0/1,1,0,0,0 1,0,0,0,0/1,0,1,0,0 1,0,0,0,0/0,0,0,0,1\nCuts 0\n</code></pre> 1x1x2x2x2 1x1x2x2x2<pre><code>Puzzle 1x1x2x2x2\nDim 5\nNAxis 2\nFaces 0.5,0,0,0,0 0,0,1,0,0\nGroup 1,0,0,0,0/1,1,0,0,0 1,0,0,0,0/0,0,1,0,0 0,0,1,0,0/0,0,1,1,0 0,0,1,0,0/0,0,1,0,1\nAxis 1,0,0,0,0\nTwists 0,1,0,0,0/0,0,1,0,0 0,0,1,0,0/0,0,1,1,0\nCuts\nAxis 0,0,1,0,0\nTwists 1,0,0,0,0/1,1,0,0,0 1,0,0,0,0/0,0,0,1,0 0,0,0,1,0/0,0,0,1,1\nCuts 0\n</code></pre> 1x2x2x2x2 1x2x2x2x2<pre><code>Puzzle 1x2x2x2x2\nDim 5\nNAxis 2\nFaces 0.5,0,0,0,0 0,1,0,0,0\nGroup 1,0,0,0,0/0,1,0,0,0 0,1,0,0,0/0,1,1,0,0 0,1,0,0,0/0,1,0,1,0 0,1,0,0,0/0,1,0,0,1\nAxis 1,0,0,0,0\nTwists 0,1,0,0,0/0,1,1,0,0\nCuts\nAxis 0,1,0,0,0\nTwists 1,0,0,0,0/0,0,1,0,0 0,0,1,0,0/0,0,1,1,0\nCuts 0\n</code></pre> 2x2x2x2x2 2x2x2x2x2<pre><code>Puzzle 2^5\nDim 5\nNAxis 1\nFaces 1,0,0,0,0\nGroup 1,0,0,0,0/1,1,0,0,0 1,0,0,0,0/1,0,1,0,0 1,0,0,0,0/1,0,0,1,0 1,0,0,0,0/1,0,0,0,1\nAxis 1,0,0,0,0\nTwists 0,1,0,0,0/0,1,1,0,0\nCuts 0\n</code></pre> Other Simplex Prism Simplex Prism<pre><code>Puzzle Simplex_Prism\nDim 5\nNAxis 2\nFaces 0,0,0,0,1 1,0,0,0,0\nGroup 1,0,0,0,0 0,0,1,1,0/0,0,1,-1,0 0,2,-1,-1,0/0,1,1,-2,0 0,2,-2,0,0/0,1,1,-1,-2.236068\nAxis 0,0,0,0,1\nTwists 1,0,0,0,0/0,1,-1,0,0 0,0,1,1,0/0,0,1,-1,0 0,2,-1,-1,0/0,1,1,-2,0\nCuts 0\nAxis 1,0,0,0,0\nTwists 0,2,-1,-1,0/0,1,1,-2,0\nCuts 0\n</code></pre> {3,3}x{4} {3,3}x{4}<pre><code>Puzzle {3,3}x{4}\nDim 5\nNAxis 2\nFaces 1,1,1,0,0 0,0,0,1.73205081,0\nGroup 1,1,0,0,0/1,0,-1,0,0 1,1,0,0,0/0,1,-1,0,0 0,0,0,1,0/0,0,0,1,1\nAxis 1,1,1,0,0\nTwists 0,0,0,1,0/0,0,0,1,1 1,-1,0,0,0/1,0,-1,0,0 1,-1,0,0,0/0,0,0,1,0\nCuts -0.33333\nAxis 0,0,0,1,0\nTwists 1,1,0,0,0/1,0,-1,0,0 0,0,0,0,1/1,-1,0,0,0\nCuts 0\n</code></pre>"},{"location":"software/magicpuzzleultimate/#making-your-own-puzzles","title":"Making your own puzzles","text":"<p>If you figure out the notation, you can try adding your own puzzles. You define the symmetry group, rotational axes, cutting planes, possible twists and puzzle boundary.</p> <p>For some definitions of various hypercuboids, see hypercuboids.</p> <p>There is also a general formula for 4D duoprism puzzles, made by Luna:</p> {p}x{q}<pre><code>Puzzle {p}x{q}\nDim 4\nNAxis 2\nFaces 1,0,0,0 0,0,1,0\nGroup 1,0,0,0/1,tan(pi/p),0,0 0,0,1,0/0,0,1,tan(pi/q)\nAxis 1,0,0,0\nTwists 0,1,0,0/0,0,0,1 0,0,1,0/0,0,1,tan(pi/q)\nCuts ...\nAxis 0,0,1,0\nTwists 0,0,0,1/0,1,0,0 1,0,0,0/1,tan(pi/p),0,0\nCuts ...\n</code></pre>"},{"location":"techniques/","title":"Solving Techniques","text":"<p>Hypercubing methods typically rely on a few fundamental techniques. By mastering these, you can even develop your own solutions to new puzzles.</p> <p>Learn Notation before trying to learn any of these techniques</p> <ul> <li>F2L</li> <li>Commutators</li> <li>RKT</li> </ul>"},{"location":"techniques/F2L/","title":"F2L","text":"<p>First 2 Layers (F2L) is a solving technique for cubes and some other puzzles that involves pairing pieces and inserting those pairs into slots to build up the first 2 layers (of a 3-layered puzzle). The first known description of this technique was by John Conway in 1979, but is most commonly credited to Jessica Fridrich due to the massive popularity her website describing the CFOP method had in the early 1990s.</p> <p>The goal of this page is to give you a generalized understanding of higher dimensional F2L, not to hand out algorithms for certain cases. There are so many cases for higher dimensional F2L that it would be nearly impossible to list out all the cases. It\u2019s recommended to have a fairly strong intuitive understanding of 3D F2L before reading this page.</p> <p>Dimensional Analogy</p> <p>In 3D F2L, whenever you twist a side axis, a 1x1x3 block of pieces (containing the F2L slot) goes to the top layer (essentially a 1D line). In 4 dimensions, 2 adjacent sides intersect at a 2D plane. So when you do a twist you\u2019re bringing a 1x1x3x3 block to the top layer, which contains 3 F2L pairs: that being two F2L-b slots and an F2L-a slot. This makes inserting a single pair trickier, because now you need to use more moves to not disturb the other two subslots.</p> <p>Continuing this analogy into 5D, you bring a whole 3D cube\u2019s worth of F2L slots to the top (1x1x3x3x3) that you mustn\u2019t disturb while inserting a single pair. This pattern continues for higher and higher dimensions, meaning that it gets trickier to insert a single pair. Pro solvers of higher dimensional puzzles will wait until they have 3 (or multiples of 3) pairs, then pairs all those pairs into a gigapair, and then insert that gigapair like inserting a lower dimensional pair.</p> <p>Terminology</p> <p>To talk about F2L in a dimensionally neutral way, we need some more terms. Most importantly, the following:</p> <ul> <li>Head: the piece in the pair with the most colours (corner in 3D)</li> <li>Body: the piece in the pair with one less colour (edge in 3D)</li> </ul> <p>For more terms, see the glossary.</p> <p>Regardless of dimension and type of pair, they are broken down into the following categories:</p> <ol> <li>both in top, head facing side axes</li> <li>both in top, head facing top axis</li> <li>body in slot, head in top facing side axis</li> <li>body in slot, head in top facing top axis</li> <li>head in slot facing side axis, body in top</li> <li>head in slot facing base axis, body in top</li> <li>both stuck in slot</li> </ol>"},{"location":"techniques/F2L/#f2l-4a","title":"F2L-4a","text":"<p>F2L-a pairs consist of a 2c and a 3c, exactly the same as in 3D. The solutions feel very similar to 3D cases, but there are a few extra tricks that are possible.</p> Insert <p></p> <p>Normal F2L insert: <code>IU RU IU' RU'</code></p> Hide and reveal <p></p> <p>Notice: same color on top. </p> <p>Can either use RKT on the I cell to pair it or use hide and reveal (preferred).</p> <pre><code>RU IU RU' //pair\nIU2 RU IU' RU' //insert\n</code></pre> 3-mover <p> 3-move insert. Still works if the body is at IU, IF, or ID except you\u2019ll just need an extra RKT move.</p> <p>Notice how the F sticker of the pair matches the F cell colour. (If it doesn\u2019t, then the pair will be flipped after inserting!)</p> Capping <p></p> <ul> <li>Body stuck in slot, solved</li> <li>Head has base color on top</li> <li>Cap head on top of body</li> <li>Push, rotate pair, pull</li> </ul> <p>Solution: <code>IU2 IF RU IR2 RU'</code></p>"},{"location":"techniques/commutators/","title":"Commutators","text":"<p>A commutator (or \u201ccomm\u201d) is a sequence of moves where you do a sequence A, then a sequence B, then the inverse of A, and finally the inverse of B. Usually, you want the intersection of the pieces affected by sequence A and the pieces affected by sequence B to be small but non-empty. In turn, creating a commutator with those sequences makes it easier to solve a puzzle by only affecting a few specific pieces at a time.</p> <p>One of the earliest solutions for the 3x3x3x3 was The Ultimate Solution to a 3x3x3x3 by Roice Nelson, which made heavy use of intuitive setup moves and commutators. Commutators were also much easier to use in MC4D due to its Macro feature, which allowed users to record sequences of moves and then replay them later from any angle.</p>"},{"location":"techniques/commutators/#notation","title":"Notation","text":"<p>Commutator notation extends traditional twisty puzzle notation by adding the following definitions:</p> <ul> <li>Commutators are notated <code>[A, B]</code>, which expands to <code>A B A' B'</code>.</li> <li>Conjugates are notated <code>[A: B]</code>, which expands to <code>A B A'</code>.</li> </ul> <p>Here are some example commutators that can be executed on a 3x3x3:</p> <ul> <li><code>[R, U]</code> expands to <code>R U R' U'</code>.</li> <li><code>[M', U2]</code> expands to <code>M' U2 M U2</code>, which cycles 3 edges on the M slice.</li> <li><code>[D: [M', U2]]</code> expands to <code>D (M' U2 M U2) D'</code>, which cycles 3 slightly different edges. Conjugates are often combined with commutators to influence different sets of pieces.</li> <li><code>[F: [R, U]]</code> expands to <code>[F: R U R' U']</code>, which expands further to <code>F (R U R' U') F'</code>.</li> <li><code>[D, [R, U]]</code> expands to <code>D (R U R' U') D' (U R U' R')</code>, which cycles 3 corners on the F layer.</li> </ul> <p>(Parentheses are added for readability but have no special meaning.)</p>"},{"location":"techniques/commutators/#strategy","title":"Strategy","text":"<p>Once you find commutators for cycling different types of pieces on a puzzle (2c, 3c, etc) then you can almost solve the whole thing! (There may be some situations where you need an algorithm to swap 2 pieces of a type and 2 of a different type.)</p>"},{"location":"techniques/rkt/","title":"RKT","text":"<p>You must know 3<sup>4</sup> notation in order for this page to make sense!</p> <p>RKT is a technique that lets you treat a single cell of a (cell-turning) higher dimensional puzzle as if it were a lower dimensional puzzle. This is very useful because it allows us to do moves that damage fewer pieces. For example: RKT lets you treat a side of a 3<sup>4</sup> just like a 3<sup>3</sup> cube, meaning that you can use all the 3D moves, techniques, and algorithms you already know to solve the full 4D puzzle.</p> <p>The technique has been independently discovered several times, but the term was mainly popularized by Raymond Zhao, such as in his article on RKT.</p>"},{"location":"techniques/rkt/#naming","title":"Naming","text":"<p>Other proposed names:</p> <ul> <li>SFM (Single Facet Manipulation)</li> <li>FRM (Facet Reduction Method)</li> </ul> <p>The name RKT comes from the move set <code>&lt;RK,T*&gt;</code> on n<sup>4</sup> puzzles (in the old notation, the Inside and Outside cells were called Top and Kata). In the new notation it should be called ROI, but the old name stuck.</p> <p>Grant</p> <p>Also it\u2019s the part of the solve where you can get ReKT</p>"},{"location":"techniques/rkt/#doing-moves-with-rkt-n4","title":"Doing moves with RKT (n<sup>4</sup>)","text":"<p>RKT lets us do any n<sup>3</sup> sequence of moves on one side of an n<sup>4</sup>. The beginner\u2019s way to learn this is by \u201ctranslating\u201d 3D algorithms into RKT (although this is not the best way to think about how RKT works because you can really perform any sequence of moves). Below is a simple 3 step guide to translate your algorithms into RKT.</p> <p>Example: Sune algorithm with RKT</p> <p>Say you want to do the Sune algorithm <code>R U R' U R U2 R'</code> with RKT. The first step is to try and think of how you can execute the algorithm using only R moves and cube rotations. <code>R U R' U R U2 R'</code> becomes <code>R z R z' R' z R z' R z R2 z' R'</code>. Now we replace R with RO, and cube rotations with I cell rotations: <code>RO IF RO IF' RO' IF RO IF' RO IF RO2 IF' RO'</code></p> <p></p> <ol> <li>Rewrite the algorithm to only use cube rotations and R moves</li> <li>Rewrite cube rotations in this new algorithm (<code>x</code>, <code>y</code>, or <code>z</code>) to their respective I cell rotation (<code>IR</code>, <code>IU</code>, <code>IF</code>)</li> <li>Replace all R moves with their RO counterpart</li> </ol> <p>This can definitely be very confusing and disorienting to beginners, as you have to think about 3x3x3 moves with only R moves and rotations. It takes a lot of practice to get comfortable with RKT, but it is an extremely powerful technique.</p> <p>The best way to learn RKT before doing your first 3<sup>4</sup> solve is by manually scrambling the last cell using any RO moves and random I cell rotations until it looks scrambled. Then practice doing PLC by solving it with RKT.</p> <p>Tip</p> <p>Even though this technique is called RKT, it is not limited to those types of turns. Thus, you can use LO and I- moves instead, or rotate your view and use RU and D- instead of RK and I-.</p> <p>Another popular way to do RKT is to use wide O cell turns (instead of normal I cell turns). This has the benefit of keeping the cell you\u2019re doing RKT to in the same orientation the entire time. Instead of rotating a side of the I cell to the RI plane, you rotate all the outside layers over the side that you\u2019re twisting.</p>"},{"location":"techniques/rkt/#parity","title":"Parity","text":"<p>RKT Parity</p> <p></p> <p>RKT parity is a state you can get to that appears to rotate a single layer of a cell by 180\u00b0. If you try and fix this with RKT, then the outer layers will be off by 180\u00b0. This means that you must use an algorithm (or intuition) to solve it.</p> <p>There are several 3D supercube algorithms that rotate the U center 180\u00b0, which can be executed using RKT to fix RKT parity:</p> <ul> <li><code>(R U R' U)5</code> (40 STM)</li> <li><code>(L R U2 R' L' U)2</code> (20 STM)</li> </ul> <p>There is also a 9 STM 4D algorithm that solves RKT parity. Here are a few variants of it:</p> <ul> <li>Tetrian22\u2019s variant for U debt: <code>[IU: UR] [IF': UO'] [RF: UR RF'] (UIR)</code></li> <li>Hactar\u2019s variant for R debt: <code>[RO: IU] [RF: IR'] [DF': IU] (IDR)</code></li> </ul>"},{"location":"techniques/rkt/#other-puzzles","title":"Other puzzles","text":"<p>On 2<sup>4</sup>, shorter algorithms are possible because there is no need to worry about messing up other pieces besides corners. A commonly used one is <code>R2 B2 R2 U R2 B2 R2 U'</code><sub>RKT</sub>.</p> <p>On bigger n<sup>4</sup> puzzles (where \\(n&gt;3\\)), it can look like a single slice layer of a cell is off by 180\u00b0. An intuitive way to solve this is to do the 2<sup>4</sup> RKT parity algorithm with wide moves, and then the normal 3<sup>4</sup> RKT parity algorithm. It can also be avoided by just lining up your slice the same way you line up centers in 3D before finishing last 4 edges (when using freeslice).</p>"},{"location":"techniques/rkt/#external-resources","title":"External resources","text":"<ul> <li>3<sup>4</sup> Commutators List by Alvin (RKT parity algs are near the bottom)</li> <li>PLL + RKT parity algs by Eff</li> </ul>"},{"location":"techniques/rkt/#debt","title":"Debt","text":"<p>RKT Debt is when the R cell isn\u2019t aligned with the rest of the puzzle after performing an algorithm or sequence of moves with RKT. For example: after executing a T perm algorithm with RKT the R cell will be misaligned by 90\u00b0. RKT Debt always has to be \u201cpaid back\u201d at some point during the solve. During complicated setup moves for fancy inserts, RKT debt can be used as \u201cammo\u201d. That is, undoing the debt in a useful way to help solve the puzzle. An easy way for beginners to \u201cavoid\u201d debt is to just do a move on a layer that you don\u2019t care about messing up at that point in the solve. For example: in a CFOP solve during the final F2L-b pair insertion, you could do any U* move that fixes the debt.</p>"},{"location":"techniques/rkt/#cancels","title":"Cancels","text":"<p>Sune with RKT: left = normal RKT, right = RKT cancel</p> <p></p> <p>RKT cancelling is a technique that reduces the move count of certain RKT algorithms and triggers by abusing symmetry of rotations. HactarCE made a program called RocKeT to find cancels for 3<sup>4</sup> algorithms. Often, it just involves inserting some flipping moves at certain points throughout the algorithm.</p> <p>Consider <code>R U R' U'</code>. Conventional RKT rotates after every move, but we don\u2019t have to do that many rotations. We can build up multiple moves of RKT debt and then cancel them later:</p> <ul> <li><code>RO UO</code> \u2014 do <code>R U</code> using RKT, building up two moves of RKT debt (<code>R U</code>)</li> <li><code>IF RO'</code> \u2014 do <code>R'</code> using RKT, undoing the debt from <code>U</code></li> <li><code>IF2 UO'</code> \u2014 do <code>U'</code> using RKT, undoing the debt from the <code>R</code></li> </ul> <p>But we can do even better!</p> <ul> <li><code>RO UO</code> \u2014 do <code>R U</code> using RKT</li> <li><code>IUR</code> \u2014 swap <code>R</code> with <code>U</code></li> <li><code>UO' RO'</code> \u2014 do <code>R' U'</code> using RKT (because we swapped <code>R</code> and <code>U</code>), undoing the debt from <code>R U</code></li> </ul> <p>You might notice that this is a conjugate <code>[RO UO: IUR]</code>. This corresponds to the fact that <code>R U R' U'</code> can be written as a conjugate where one part is a pure rotation: <code>[R U: z x2]</code>. When executing this algorithm, we apply it to <code>I</code> with the rotation (so it\u2019s equivalent to <code>R U R' U'</code>) and to the outer layers without the rotation (so <code>[RU: _]</code> expands to <code>R U U' R'</code>, which completely cancels out). This is the fundamental theory behind how to do RKT cancels: by rewriting algorithms as conjugates and commutators with pure rotations.</p> <p>Recall how in 3D you can replace a <code>U y'</code> with <code>Dw</code>. We can do the same thing here: replace <code>IUR</code> with <code>{1-2}OUR</code>, which is a rotation of the outer layers instead of the inner layers. Now it just looks like a normal algorithm with a flip thrown in the middle: <code>RO UO {1-2}OUR RO' UO'</code>. So we can notate it a little more simply: <code>R U {1-2}OUR R' U'</code></p> <p>Here\u2019s a more complex example, the Sune algorithm: <code>RO UO RO' {1-2}OUR UO RO {1-2}OUR UO2 RO'</code>. This algorithm works because you can rewrite Sune using conjugates with rotations: <code>[R U: [R': z x2] [U: z x2]]</code>. Notice that if you remove all rotations from that conjugate, the whole thing cancels out.</p>"},{"location":"techniques/rkt/#simultaneous-rkt","title":"Simultaneous RKT","text":"<p>RKT can be done by using 2 opposite sides (e.g. <code>RO</code> and <code>LO</code> turns) as well as normal I cell turns. This would allow you to execute <code>&lt;R,U,L&gt;</code> gen algorithms easier, at the cost of having to fix RKT debt on both layers. Another interesting way to do this is in a method like Belt Method. After solving the belt, orienting opposite sides, and separating the colours, the user is left with solving 2 opposite cells that can be solved simultaneously using RKT. If you turn one of the sides with the belt going through it, it essentially does a twist to both cells. One case that can be annoying is if you want to do a 180\u00b0 turn on one side, and a 90\u00b0 turn on the other (you would have to wait until both cells\u2019 debt lined up).</p>"},{"location":"techniques/rkt/#higher-dimensional-rkt","title":"Higher Dimensional RKT","text":"<p>The term 2RKT or Double RKT is used to refer to using RKT to do RKT in 5D puzzles. This keeps generalizing to higher dimensions as Triple/Quadruple/3RKT/4RKT. Because RKT lets us treat a single side of an n<sup>d</sup> like an n<sup>d-1</sup>, using RKT on the 3<sup>5</sup> lets us treat a single 4D cell as a 3<sup>4</sup>. And if you know how to use RKT to treat a 3<sup>4</sup> like a 3<sup>3</sup>, then you can do 2RKT. The movecount doubles with each dimension, making it more and more impractical. This is why bigger n<sup>d</sup> puzzles are mostly solved using commutators.</p>"},{"location":"techniques/rkt/#rkt-in-3d","title":"RKT in 3D","text":"<p>If RKT treats a single layer of an n<sup>d</sup> puzzle like an n<sup>d-1</sup> puzzle, then there is a sense in which the last step of the 3<sup>3</sup> Roux method counts as RKT. The last step of Roux is to permute the M-slice like a 3<sup>2</sup> (with mirroring moves allowed).</p> <p>Another thing that \u201cfeels like RKT\u201d is solving 3x3xn cuboids where \\(n&gt;3\\). A typical strategy for these is to solve from the innermost layers to the outermost layers, treating it as several nested 3x3x2 puzzles. Doing an R2 on the whole puzzle does an R2 to each of the subpuzzles.</p>"},{"location":"theory/gods-number/","title":"God\u2019s Number","text":"<p>God\u2019s number is the minimum number of moves that is sufficient to solve a twisty puzzle from any starting position. For 3x3x3, this has been proven to be 20 HTM (or 26 QTM).</p> <p>God\u2019s number for 3<sup>3</sup> took lots of creative mathematical work and 35 years of CPU time to prove \\(\\sim 4.3 \\times 10^{19}\\) states reachable in 20 moves or less. For comparison, the 2<sup>4</sup> has \\(\\sim 3.4 \\times 10^{27}\\) states and 4<sup>3</sup> has \\(\\sim 7.4 \\times 10^{45}\\) states. There isn\u2019t a single nontrivial facet-turning 4D+ hypercube for which God\u2019s number is known, let alone remotely possible to compute.</p> <p>There are three strategies we can use to estimate it:</p> <ol> <li>Setting a lower bound using the branching factor of move sequences</li> <li>Setting an upper bound by analyzing the worst-case solution of every stage in a given method</li> <li>Estimation by measuring move counts produced by a near-optimal solver</li> </ol>"},{"location":"theory/gods-number/#summary","title":"Summary","text":"Puzzle Lower Bound Upper Bound Estimate 2<sup>4</sup> 15 STM 37 STM ~20 \u00b15 3<sup>4</sup> 51 STM 570 STM ~125 \u00b150"},{"location":"theory/gods-number/#2222","title":"2x2x2x2","text":""},{"location":"theory/gods-number/#lower-bound","title":"Lower bound","text":"<p>We can compute a lower bound of 15 in the STM by computing a bound on the number of positions reachable by algorithms of a certain length.</p> Derivation <p>Moves here will be measured using STM. Our focus here is on positions that can be reached by algorithms of a certain length. Note that on the 2<sup>4</sup>, we consider one piece fixed when counting permutations. There are \\(\\sim 3.4 \\times 10^{27}\\) positions on the 2<sup>4</sup>.</p> <p>One position, the solved position, is reachable without making any moves. There are 23 moves on each of the 4 cells that do not affect the fixed piece, so at most 92 one-move positions are reachable by 1 move. For subsequent moves, there are only 69 non-canceling moves since any move on the same axis as the previous move will cancel. Therefore there are at most \\(92 \\times 69^{k-1}\\) reachable by exactly \\(k\\) moves (where \\(k\\ge 1\\)). Let \\(P_n\\) denote the number of positions reachable in \\(n\\) moves or less. Based on the previous analysis,</p> \\[P_n \\le 1+\\sum_{k=1}^n 92 \\times 69^{k-1} = \\frac{23}{17} (69^n-1)+1.\\] <p>Let \\(n_G\\) be God\u2019s number. By definition, \\(P_{n_G}\\) must be equal to the total number of positions. Combining this with the bound on \\(P_n\\), we find</p> \\[P_{n_G} = 3.4\\times 10^{27} \\le \\frac{23}{17} (69^{n_G}-1)+1,\\] <p>which implies \\(n_G \\ge 15\\).</p>"},{"location":"theory/gods-number/#upper-bound","title":"Upper bound","text":"<p>We can compute an upper bound of 37 in the STM by computing the worst-case move count of a known method.</p> Derivation <p>Hypersolve uses a method that has a worst-case of 39 STM. Furthermore, it has been shown that all cases with move counts more than 37 STM are avoidable. Therefore God\u2019s number is at most 37 STM.</p>"},{"location":"theory/gods-number/#estimate","title":"Estimate","text":"<p>Hypersolve typically produces solutions in the range of 20-30 STM. This solver does not produce optimal solutions<sup>1</sup>, but based on its results, God\u2019s number for 2<sup>4</sup> is probably not higher than 20-30.</p>"},{"location":"theory/gods-number/#conclusion","title":"Conclusion","text":"<p>God\u2019s number for 2<sup>4</sup> is definitely between 15 and 37 inclusive, and probably around \\(\\sim 20 \\pm 5\\).</p> <p>Could this be improved?</p> <ul> <li>A better method or lots of compute time might improve slightly on the upper bound. More worst-case scenarios can be checked for avoidability.</li> <li>Unless there is some fundamental breakthrough in our understanding of computation, there\u2019s likely no way to improve on the lower bound. If you\u2019re an expert in quantum computing then perhaps you can devise some clever quantum algorithm to help, but as of 2023 quantum computers haven\u2019t solved a single real-world problem faster than a classical computer so we remain skeptical.</li> </ul>"},{"location":"theory/gods-number/#3333","title":"3x3x3x3","text":""},{"location":"theory/gods-number/#lower-bound_1","title":"Lower bound","text":"<p>We can compute a lower bound of 51 in the STM. This works by showing that algorithms of limited length can generate, at most, only a subset of the possible positions on the 3<sup>4</sup>. We will also demonstrate some known optimizations (often useful for other puzzles), although they do not immediately improve the lower bound in the case of 3<sup>4</sup>.</p> Lower Bound, Winning Ways Method <p>Turns here are measured in the Slice Turn Metric (STM).</p> <p>We can describe turns on the \\(3^4\\) as happening on one of four axes, and with one of three layers. Each layer can be turned in 23 ways, so we have \\(4 \\times 3 \\times 23 = 276\\) turns measured as one move in the STM. After turning a layer, we want subsequent turns to be noncancelling (turning the same layer twice can be written as a single move), so we have \\(276-23=253\\) choices for subsequent turns.</p> <p>From here, we can proceed without the Winning Ways improvement, where we find the number of positions reachable by 50 turns or fewer is at most</p> \\[1 + 276 \\times \\sum_{k=0}^{49}253^k \\approx 1.57 \\times 10^{120} &lt; \\frac{\\left(24!\\times 2^{24}\\right) \\times \\left(32! \\times 6^{32}\\right) \\times (16! \\times 12^{16})}{48} \\approx 1.78 \\times 10^{120}.\\] <p>This shows there are positions on the \\(3^4\\) which require 51 turns or more to solve. In the book Winning Ways for Your Mathematical Plays Vol. 4, the authors optimize this argument (as it applies to the Rubik\u2019s Cube in the half turn metric) by accounting for relations like \\(LR = RL\\). We can apply a similar optimization for the \\(3^4\\).</p> <p>We will refer to the set of possible new positions reachable after exactly \\(n\\) turns as \\(T_n\\). \u201cNew\u201d here means that \\(T_n\\) does not include positions that were in \\(T_{n-1}\\). \u201cExactly\u201d means that positions reachable in more than \\(n\\) turns are not in \\(T_n\\). The number of elements in \\(T_n\\) is \\(|T_n|\\).</p> <p>By the computation from before, there are 276 distinct puzzle states after a single turn. So \\(|T_1|=276\\). Finding \\(|T_2|\\) is more complicated. First, we need to setup a more detailed way of describing turning axes.</p> <p>A primary axis is a line through the core of a puzzle in any of the four cardinal directions. Primary axes have three layers, which we might label \\(-1,\\ 0,\\) and \\(1\\). The white-yellow primary axis\u2019 three primary layers would correspond to the yellow cell (\\(-y\\)), white cell (\\(y\\)), and the slice between the white and yellow cells. A \\textbf{secondary} axis is a line through the center of a facet and any of the pieces in that facet. Importantly, the secondary axis can be described using a single cardinal direction when it is through a ridge piece (the \\(90^\\circ\\) degree cell turns and their doubles). A primary axis, secondary axis, and an angle which we turn by is enough to describe any turn in the STM.</p> <p>We have just 253 noncancelling choices for a second turn. Some of these second turns commute with a first turn, which means we will overcount positions reachable by two algorithms differing by the order of commuting turns. Noncancelling commuting pairs of turns can happen in two ways:</p> <ol> <li> <p>The first and second turns happen in the same primary axis and on different layers (for example, \\(UO\\ \\ \\{2\\}UO' = \\{2\\}UO'\\ \\ UO\\).\\</p> </li> <li> <p>The first turn has primary and secondary axes \\(a\\) and \\(b\\), while the second turn has primary and secondary axes \\(b\\) and \\(a\\)  (for example, \\(OL\\ LO= LO\\ OL\\)).</p> </li> </ol> <p>In describing commuting cases of the first kind, the second turn is one that happens on the same primary axis as the first and on a different layer. There are two other layers, and we can make one of \\(23\\) turns on that layer. This means that after a single turn is made, \\(2\\times 23 = 46\\) of the following turns may lead to commuting cases of the first kind. However, two of these actually lead to single turn puzzle states (like \\(UO\\ \\{2\\}UO = DO\\)) which were counted in \\(T_1\\) and should not be part of \\(T_2\\). So, only 44 of these turns lead to distinct new puzzle states. This means there are \\(\\frac{44\\times 276}{2}\\) distinct new puzzle states reachable by two commuting moves of this first kind.</p> <p>Commuting cases of the second kind can only happen if the first turn\u2019s secondary axis goes through a ridge piece. There are \\(108\\) turns like this. The second turn\u2019s primary/secondary axes are determined by transposing the first turn\u2019s primary/secondary axes, and then can happen in one of three ways on one of three layers. So, we have \\(\\frac{9\\times 108}{2}\\) distinct new puzzle states reachable by two commuting moves of this second kind. NOTE: If the first turn is one of the \\(276-108= 168\\) other turns that cannot be followed by a commuting turn of the second kind, those nine second turns happen on a different primary axis and will neither cancel nor commute.</p> <p>Now we can compute an upper bound on \\(|T_2|\\). There are \\(\\frac{44\\times 276}{2}\\) distinct new puzzle states reachable by two commuting moves of the first kind, and \\(\\frac{9\\times 108}{2}\\) distinct new puzzle states reachable by two commuting moves of the second kind. There are \\(276-23-44-9=200\\) noncancelling, noncommuting second turns. In total, we have \\(|T_2| \\leq \\frac{44\\times 276}{2} + \\frac{9\\times 108}{2} + 9\\times 168 + 200\\times 276 = 63,270\\). As mentioned in the \u201cNOTE\u201d, following one of the other 168 first moves (with secondary axis \\textit{not} through a ridge piece) with one of those nine turns suggested by commuting case of the second kind will never cancel or commute, so we add \\(9\\times 168\\) to complement the \u201cleftovers\u201d that were ignored in the \\(\\frac{9\\times 108}{2}\\) term.</p> <p>To complete the argument, we can derive a recurrence relation (more accurately a recurrence estimate) that gives an upper bound on the size of \\(|T_{n+2}|\\) in terms of \\(|T_n|\\) and \\(|T_{n+1}|\\).</p> <p>In the case where the \\(n+2\\)th turn will not commute or cancel with the \\(n+1\\)th turn, we have at most \\(9\\times 168|T_{n}| + 200\\times |T_{n+1}|\\) possible puzzle states. In the case where the \\(n+2\\)th turn \\textit{will} commute (but still not cancel) with the \\(n+1\\)th turn, we have at most \\(\\left(\\frac{44\\times 253}{2} + \\frac{9\\times 108}{2}\\right)|T_n|\\) possible puzzles states. This gives us the estimate \\(|T_{n+2}| \\leq 200|T_{n+1}| + 7,582|T_n|.\\)</p> <p>This is an order 2 linear recurrence estimate with constant coefficients. We can show that</p> \\[|T_n| \\leq A\\lambda_1^n + B\\lambda_2^n,\\] <p>where</p> \\[ \\begin{array}{c c} \\lambda_{1}=100+\\sqrt{17,582}, &amp; \\lambda_{2}=100-\\sqrt{17,582}, \\\\ A=\\displaystyle \\frac{4,035}{7,582}+\\frac{160,704}{3,791}\\sqrt{\\frac{2}{8,791}}, &amp; B=\\displaystyle \\frac{4,035}{7,582}-\\frac{160,704}{3,791}\\sqrt{\\frac{2}{8,791}}. \\\\ \\end{array} \\] <p>Finally, the number of turns reachable by 50 turns or fewer is at most</p> \\[1+\\sum_{n=1}^{50}|T_n| \\leq 2.52\\times 10^{118} &lt; \\frac{\\left(24!\\times 2^{24}\\right) \\times \\left(32! \\times 6^{32}\\right) \\times (16! \\times 12^{16})}{48} \\approx 1.78 \\times 10^{120}.\\] <p>This shows there are positions on the \\(3^4\\) which require 51 turns or more to solve.</p> <p>Unfortunately, we did not improve the lower bound here. It is worth noting that in the estimate from the beginning (with few optimizations), the actual value of the sum on the LHS is quite close to the number of scrambles possible on the \\(3^4\\) (within the same order of magnitude). Compare this to our new estimate, where the sum is bounded above by a number two orders of magnitude smaller than the number of scrambles possible on the \\(3^4\\). So as we would have expected, our improvements do reduce the size of the estimate, just not quite enough to bring down the number of turns derived.</p> <p>Below is an example of a similar argument used to derive a lower bound of 56 turns in the OBTM. Note that this argument is missing some optimizations that were applied in the STM lower bound derivation.</p> OBTM Lower Bound, Winning Ways Method <p>Moves here will be measured using something equivalent (as far as this discussion is concerned) to OBTM. Our focus here is on positions that can be reached by algorithms of a certain length. Wide moves contribute to algorithm length in the same way that single cell turns do (wide move = single cell move + cube rotation, where cube rotations count as 0 moves), so we will make a simplification by restricting to single cell turns. There are 23 moves on each of the 8 cells, so 184 one-move algorithms are possible at any given time.</p> <p>We know the 3<sup>4</sup> can be scrambled in over 1.7 novemtrigintillion ways. When solving, we have 184 choices for the first turn, and 161 (non cancelling) choices for the following turns. The number of positions reachable by 54 turns or fewer is at most</p> \\[1 + 184 \\times \\sum_{n=0}^{53} 161^n \\approx 1.695 \\times 10^{119} &lt; 1.757 \\times 10^{120}.\\] <p>This shows that there exist positions on the 3<sup>4</sup> that require 55 or more turns to solve.</p> <p>In the book Winning Ways for Your Mathematical Plays Vol. 4, the authors optimize this argument (as it applies to the Rubik\u2019s Cube in the half turn metric) by accounting for relations like \\(LR = RL\\). We can apply a similar optimization for the 3<sup>4</sup>.</p> <p>We will refer to the number of possible 3<sup>4</sup> positions after \\(n\\) moves as \\(u_n\\). It is not too hard to convince ourselves that \\(u_1 = 184\\). After turning one cell, moving the same cell again is what we might call a \u201ccancelling move\u201d, since the two moves could have been measured as a single move. So, we have \\(161\\) non cancelling choices for a second move. We should be able to reduce that \\(161\\) further by avoiding double counting positions reachable by two algorithms which differ only by the order of commuting elements.</p> <p>There are different ways that a pair of moves can commute on 3<sup>4</sup>. One is by the cell turns affecting completely distinct subsets of pieces, which happens when turning opposite cells, like \\(OL\\ IL = IL\\ OL\\). This is analogous to the commuting cases on the Rubik\u2019s Cube as addressed in Winning Ways. There is at least one more way, which can involve certain adjacent cell moves. \\(OL\\ LO = LO\\ OL\\) is one example. We have not yet reached a description of all commuting cases of this kind. Accounting for these may allow us to further improve the lower bound. For now, we will factor out the commutativities that we can describe, which we will call \u201copposite-commuting\u201d moves.</p> <p>First, there are \\(161-23 = 138\\) possible non-cancelling, non-opposite-commuting choices for the second move. We\u2019ll add the opposite-commuting cases separately.</p> <p>There are four \u201cflavors\u201d of opposite-commuting cases: I cell moves with O cell moves, R moves with L moves, U moves with D moves, and B moves with F moves. In any of these, choose any one of the 23 moves possible on each cell (order doesn\u2019t matter), so there are \\(23 \\times 23 = 529\\) opposite-commuting cases of each flavor. Then across the four flavors, we have \\(529\\times 4 = 2,116\\) distinct cases after the second move, when it opposite-commuted with the first. So we have that the number of \\(3^4\\) positions after \\(n\\) moves is at most \\(138u_1 + 2,116 = 27,508\\). That is, we can say \\(u_2 \\leq 27,508\\).</p> <p>As a sanity check, we could note at this point the \\(27,508\\) positions after two turns is better than the \\(184\\times 161 = 29,624\\) positions we would have estimated without accounting for opposite-commutativity of two successive turns here.</p> <p>To complete the argument, we can derive a recurrence relation (more accurately a recurrence estimate) that gives us an upper bound on the size of \\(u_{n+2}\\) in terms of \\(u_n\\) and \\(u_{n+1}\\)</p> <p>In the case where the \\(n+2\\)th move will not opposite-commute (or cancel) with the \\(n+1\\)th move, we have \\(138u_{n+1}\\) possible puzzle states. If the \\(n+2\\)th move is going to opposite-commute with the \\(n+1\\)th move, we might have \\(529\\times 4 = 2,116\\) cases to follow up the \\(n\\)th move. However, one of those four flavors of opposite commuting cases would have cancelled with the \\(n\\)th move, so this time we only have \\(529 \\times 3 = 1,587\\) cases to follow the \\(n\\)th move. This gives us the recurrence estimate \\(u_{n+2} \\leq 138u_{n+1} + 1,587u_{n}\\).</p> <p>Note that as we have defined it, \\(u_n\\) is the number of positions accessible by exactly \\(n\\) moves. If we sum the \\(u_n\\)s from 1 to \\(N\\), that will gives us (an upper bound on) the number of positions accessible by \\(n\\) moves or fewer.</p> <p>In this case, our recurrence estimate is an order 2 linear recurrence with constant coefficients. There exists a method to derive a general formula for \\(u_n\\). In the end, we find</p> \\[u_n = C\\lambda_1^n + D\\lambda_2^n,\\] <p>where</p> \\[ \\begin{array}{c c} \\lambda_{1}=69+46\\sqrt{3}, &amp; \\lambda_{2}=69-46\\sqrt{3}, \\\\ C=\\displaystyle \\frac{1}{4}\\left(-22+13\\sqrt{3}\\right), &amp; D=\\displaystyle \\frac{1}{4}\\left(-22-13\\sqrt{3}\\right). \\\\ \\end{array} \\] <p>Finally, the number of positions reachable by 55 turns or fewer is at most</p> \\[1\\ +\\ \\sum_{n=1}^{55}u_n \\approx 3.865 \\times 10^{118} &lt; 1.757 \\times 10^{120}.\\] <p>This shows that there exist positions on the \\(3^4\\) that require 56 or more turns to solve.</p> <p>We should address the other side of the inequality,</p> \\[1.757 \\times 10^{120} &lt;1\\ +\\ \\sum_{n=1}^{56}u_n \\approx 5.746 \\times 10^{120}.\\] <p>So, the argument as applied here can\u2019t necessarily show that there are positions requiring 57 or more turns to solve.</p>"},{"location":"theory/gods-number/#upper-bound_1","title":"Upper bound","text":"<p>Hactar computed a generous upper bound of 570 STM using CFOP.</p> Step-by-step breakdown <ul> <li>cross: 6 pieces x 4 STM per piece = 24 STM</li> <li>F2L-a: 12 pairs x 13 STM per pair = 156 STM<ul> <li>3 STM to put corner on I (with corner first-cell color not on I)</li> <li>3 STM to put edge on I</li> <li>3 STM to pair + 2 STM to fix RKT debt</li> <li>4 STM to insert</li> </ul> </li> <li>F2L-b: 8 pairs x 26 STM per pair = 208 STM<ul> <li>6 STM to put corner on I (with corner first-cell color not on I)</li> <li>6 STM to put edge on I</li> <li>4 RKT = 7 STM to pair them and fix RKT debt</li> <li>7 STM to insert</li> </ul> </li> <li>ridge OLC: worst case (all ridges bad) is 17 STM</li> <li>edge OLC:<ul> <li>solve at least 3/4 pieces in each slice using OCLL: 3 slices x 11 STM = 33 STM</li> <li>worst case is 3 unsolved edges remaining: 5 RKT + 9 STM = 18 STM<ul> <li>2 RKT to arrange any two edges so that they are adjacent in the same slice but do not form a valid 2-corner OLL case</li> <li>2 RKT to place the last edge in a way that forms a valid 3-corner OLL case</li> <li>1 RKT to fix RKT debt</li> <li>9 STM to solve the OLL case (consider OCLLs with at least one corner solved)</li> </ul> </li> </ul> </li> <li>corner OLC: 58 STM<ul> <li>11 RKT = 23 STM to solve a 2^3 into a state where the D and U layer each contains a valid 3-corner OLC case<ul> <li>if there is exactly one remaining corner unsolved, then misorient two corners when solving one of those 3-corner OLC cases.</li> <li>if there are exactly two remaining corners unsolved, then misorient one corner when solving one of the 3-corner OLC cases.</li> <li>arrange the cases so that the 3 unsolved corners left will form a sune</li> </ul> </li> <li>13 STM to solve each OLL case on U/D using RKT cancels (worst case is double antisune)</li> <li>9 STM to solve the remaining sune case</li> </ul> </li> <li>ridge PLC: 14 STM (2x U perm in the worst case)</li> <li>PLC: 42 STM<ul> <li>solve a 3^3 using God\u2019s algorithm in 20 moves</li> <li>adjust I cell to solve</li> </ul> </li> </ul>"},{"location":"theory/gods-number/#estimate_1","title":"Estimate","text":"<p>We do not have a near-optimal 3<sup>4</sup> solver. Good FMC speedsolves average 200 STM, so God\u2019s number is probably lower than that.</p>"},{"location":"theory/gods-number/#conclusion_1","title":"Conclusion","text":"<p>God\u2019s number for 3<sup>4</sup> is definitely between 56 and 570 inclusive, and probably \\(\\sim 125 \\pm 50\\)<sup>[citation needed]</sup>.</p> <p>Could this be improved?</p> <ul> <li>A better method could easily improve the upper bound, probably to around 300<sup>[citation needed]</sup>.</li> <li>A better manual computation could give a slightly better lower bound.</li> <li>An automated 3<sup>4</sup> solver or search program could give a much better estimate.</li> </ul> <ol> <li> <p>It does eventually converge on optimal solutions when run for a sufficient amount of time, but this amount of time is impractical for all but the simplest scrambles.\u00a0\u21a9</p> </li> </ol>"},{"location":"theory/grip-theory/","title":"Grip Theory","text":"<p>Grip theory is a framework for analyzing many different kinds of twisty puzzles in a geometry-independent way. It was first developed on the TwistyPuzzles forum in 2009 in this thread. Grip theory was originally used to describe doctrinaire puzzles in 3D, but it can be extended to describe bandaged puzzles, jumbling puzzles, higher-dimensional puzzles, and more.</p>"},{"location":"theory/grip-theory/#basic-grip-theory","title":"Basic grip theory","text":""},{"location":"theory/grip-theory/#the-333","title":"The 3x3x3","text":"<p>Consider a cube in 3-dimensional euclidean space. Rotations of this 3-dimensional space form a group: \\(SO(3)\\). This group is said to be acting on the 3D space. Consider a subset of these rotations that sends the cube to itself. These rotations form a subgroup of order 24, which is isomorphic to the symmetric group \\(S_4\\), although it goes by many other names. To see how this subgroup acts on the cube, we can define the 6 sides of the cube (as subsets of 3D space), and label them e.g. \\(R\\), \\(U\\), \\(F\\), \\(L\\), \\(D\\), and \\(B\\). Because we restricted our attention to rotations that preserve the cube, the image of any side under any rotation will always also be one of the sides. Thus we can define an action of the group on the 6-element set of sides \\(\\{R, U, F, L, D, B\\}\\).</p> <p>A piece of the 3x3x3 can be thought of as a subset of the cube, and it is incident with one or more of its faces. Corners are incident with 3 faces, edges with 2, centers with 1, and the core with 0. At any time each piece has 3 important properties:</p> <ul> <li>Set of faces with which it was incident when solved. This defines which piece it is, and is reflected in e.g. the stickers that are on the piece.</li> <li>An element of the aforementioned rotation group which sends the piece from its solved state to its current state.</li> <li>Set of faces with which the piece is incident now. This determines whether the piece moves or not when a particular twist is performed.</li> </ul> <p>These properties are redundant: suppose we call these \\(X, g, Y\\) respectively. Then \\(Y = \\{ x \\cdot g \\mid x \\in X\\}\\), or simply \\(Y = X \\cdot g\\); and likewise and \\(X = Y \\cdot g^{-1}\\).</p> <p>When we perform a twist, we choose a face \\(f\\), and a rotation \\(r\\) of the cube that sends the chosen face to itself: \\(f \\cdot r = f\\). Then for each piece one of two things happen:</p> <ul> <li>If the piece is currently incident with \\(f\\), it gets acted on by \\(r\\), sending \\((X, g, Y) \\mapsto (X, gr, Y \\cdot r)\\).</li> <li>If the piece is currently not incident with \\(f\\), it remains unchanged.</li> </ul> <p>For example when we do an <code>R</code> twist, it\u2019s as if the pieces currently incident with the \\(R\\) face underwent an <code>x</code> cube rotation, and other pieces remained static.</p> <p>Note that when twisting around \\(f\\), we didn\u2019t change whether any piece is incident with \\(f\\), meaning the twist can be inverted by using the same face \\(f\\) and the rotation \\(r^{-1}\\).</p>"},{"location":"theory/grip-theory/#the-grips-of-the-333","title":"The grips of the 3x3x3","text":"<p>Instead of working with geometric shapes embedded in 3D space, we can work with abstract sets. Consider a set \\(\\Gamma\\) of 6 abstract objects, called grips:</p> \\[\\Gamma = \\{R, U, F, L, D, B\\}.\\] <p>Next consider a group acting on this set, generated by two 4-cycles that cycle \\(F, U, B, D\\), and \\(R, F, L, B\\) respectively. More precisely, we mean the subgroup \\(G\\) of \\(S_\\Gamma\\) generated by \\((F,U,B,D)\\) and \\((R,F,L,B)\\). We will call this the grip group. This group and its action are isomorphic to the rotations of the cube and their action on the 6 faces we defined above.</p> <p>A piece is identified by a set \\(X \\subseteq \\Gamma\\) \u2013 the set of solved grips. At any time a piece has some attitude \\(g\\), which is an element of the grip group \\(G\\). From that we can also compute the set of active grips, which is defined to be \\(Y = X \\cdot g\\). The grip group acts on the piece like so:</p> \\[(X, g, Y) \\cdot r = (X, gr, Y \\cdot r),\\] <p>so the active grips follow the piece.</p> <p>The attitude of a piece with active grip set \\(Y\\) can be decomposed into two components: the orientation of the piece, which is an element of the stabilizer subgroup \\(\\operatorname{Stab}(Y)\\); and the position, which is the set of active grips \\(Y\\) itself. By the orbit-stabilizer theorem we can identify the orbit \\(X \\cdot G\\) (the possible positions of this piece) with the cosets in \\(G / \\operatorname{Stab}(Y)\\).</p> <p>For example, \\((\\{R, U\\}, (U,R)(L,D)(F,B), \\{R, U\\})\\) is an abstract description of the up-right edge in its solved position, but wrong orientation. We can verify its set of active grips:</p> \\[\\{R, U\\} \\cdot (U,R)(L,D)(F,B) = \\{R, U\\}.\\] <p>Note that the groups \\(\\operatorname{Stab}(X)\\) and \\(\\operatorname{Stab}(X \\cdot g) = \\operatorname{Stab}(Y)\\) are conjugate, and thus isomorphic, and in general we have a fiber bundle:</p> \\[\\operatorname{Stab}(X) \\hookrightarrow G \\rightarrow G / \\operatorname{Stab}(X).\\] <p>Next, define a twist to be a pair of: a grip \\(f\\) we twist around, or axis, and element of \\(\\operatorname{Stab}(f)\\), the transformation. Equivalently, we can choose an arbitrary transformation \\(r \\in G\\) first, and then an axis \\(f\\) from the set \\(\\Gamma^r\\) of fixed points of \\(r\\). As before, the action of a twist \\((f, r)\\) on a piece is:</p> \\[(X, g, Y) \\mapsto \\begin{cases} (X, gr, Y \\cdot r), &amp; \\text{if } f \\in X \\cdot g, \\\\ (X, g, Y), &amp; \\text{if } f \\notin X \\cdot g. \\\\ \\end{cases}\\] <p>For instance, applying the twist with axis \\(U\\) and transformation \\((R,F,L,B)\\), which fixes \\(U\\), to the piece from above, we get a new attitude</p> \\[(U,R)(L,D)(F,B) * (R,F,L,B) = (R,U,F)(L,D,B),\\] <p>and a new active grip set</p> \\[\\{U, R\\} \\cdot (R,F,L,B) = \\{U, F\\}.\\] <p>The set of all positions our piece can move to are all sets of two grips except \\(\\{R, L\\}\\), \\(\\{U, D\\}\\), and \\(\\{F, B\\}\\). These exactly correspond to the edge positions of the 3x3x3. An edge piece is only affected by a twist if one of its colored faces is on the face corresponding to the axis of the twist, and after the twist, the positions of its colored faces moves. This is exactly the behavior of the active grips. Therefore, the piece above is an edge piece.</p> <p>We can similarly construct three more sets of pieces: the corners, with active grips like \\(\\{R, U, F\\}\\), the centers, with active grips like \\(\\{R\\}\\), and the core, with empty active grip set. Note that even though the centers have only one grip, they still have attitude, so the centers on this puzzle are actually super centers.</p>"},{"location":"theory/grip-theory/#states","title":"States","text":"<p>Above we have chosen some set of pieces \\(P\\), a subset of \\(2^\\Gamma\\). Notably it is an invariant subset under the action of the grip group: \\(P \\cdot G = P\\). The state of the puzzle comprises of the states of all pieces, i.e. some set of triples \\((X \\in P, g \\in G, Y \\in P)\\) such that \\(X \\cdot g = Y\\). This defines a relation between \\(P\\), \\(P\\), and \\(G\\). Due to the redundancy, there are three ways to look at it:</p> <ul> <li>A function \\(X \\mapsto g\\), called \\(a\\), indicating that the piece \\(X\\) has attitude \\(a(X)\\), and has active grips \\(Y(X) = X \\cdot a(X)\\).</li> <li>A function \\(Y \\mapsto g\\), also called \\(g\\), indicating that the piece whose active grips are \\(Y\\) has attitude \\(g(Y)\\) and its solved grips were \\(X(Y) = Y \\cdot g(Y)^{-1}\\).</li> <li>A permutation of \\(X\\)\u2019s into \\(Y\\)\u2019s, \\(\\pi : P \\to P\\), together with a choice of \\(g\\) at each fiber such that \\(\\pi(X) = X \\cdot g\\).</li> </ul> <p>Denoting the set of such relations \\(G \\wr P\\), the first description allows us to straightforwardly define a group structure on it. If we treat elements of \\(G \\wr P\\) as functions from \\(P\\) to \\(G\\) in the first sense, then given \\(a, b \\in G \\wr P\\), their product \\(ab\\) is defined by:</p> \\[ab(X) = a(X) b(X \\cdot a(X)).\\] <p>The second and third descriptions allow us to identify \\(G \\wr P\\) as a subgroup of the wreath product \\(G \\wr_P S_P\\) (hence the notation). Indeed, suppose \\(g, h : P \\to G\\) are maps sending active grips to attitudes, and \\(\\pi, \\sigma \\in S_P\\) are permutations of pieces. Defining multiplication as:</p> \\[(\\pi, g) * (\\sigma, h) = (\\pi\\sigma, Y \\mapsto g(\\sigma^{-1}(Y)) h(Y)),\\] <p>we end up with the group structure of the semidirect product \\(S_P \\rtimes G^P\\), with the action of reindexing, i.e. exactly the wreath product \\(G \\wr_P S_P\\). The group \\(G \\wr P\\) is then the subgroup consisting of pairs \\((\\pi, g)\\) that agree:</p> \\[\\forall X \\in P, \\pi(X) = X \\cdot g(\\pi(X)).\\] <p>Note that the \\(\\pi\\)\u2019s are limited to those that preseve the orbits \\(P / G\\), else there doesn\u2019t exist an agreeing \\(g\\). The wreath product thus splits into a product of independent groups, one for each orbit. In turn, for a piece with active grips \\(Y\\), the set of agreeing \\(g(Y)\\)\u2019s is some coset of the stabilizer \\(\\operatorname{Stab}(Y)\\) in \\(G / \\operatorname{Stab}(Y)\\). Within an orbit, all these stabilizers are isomorphic, thus we can write \\(G \\wr P\\) as:</p> \\[\\prod_{O \\in P / G} \\operatorname{Stab}(Y \\in O) \\wr_O S_O,\\] <p>provided we choose a designated element \\(Y\\) in each orbit \\(O\\), and an identification of \\(\\operatorname{Stab}(Y)\\) with its cosets.</p> <p>For our 3x3x3, there are four orbits, corresponding to the four types of piece we defined above:</p> <ul> <li>12 edges with stabilizers \\(\\mathbb{Z}_2\\),</li> <li>8 corners with stabilizers \\(\\mathbb{Z}_3\\),</li> <li>6 faces with stabilizers \\(\\mathbb{Z}_4\\),</li> <li>and 1 core with stabilizer \\(G\\).</li> </ul> <p>The group of puzzle states is thus:</p> \\[(\\mathbb{Z}_2 \\wr S_{12}) \\times (\\mathbb{Z}_3 \\wr S_8) \\times (\\mathbb{Z}_4 \\wr S_6) \\times (G \\wr S_1).\\]"},{"location":"theory/grip-theory/#twists","title":"Twists","text":"<p>A twist acts on a piece, and thus can act on the puzzle state \u2013 a set of pieces. Because the set of states \\(G \\wr P\\) admits a group structure, the action of a twist \\((f, r)\\) is actually equivalent to multiplication on the right by a certain element of \\(G \\wr P\\) \u2013 the state you get if you apply the twist to the solved puzzle:</p> \\[\\pi(X) = \\begin{cases} X \\cdot r, &amp; \\text{if } f \\in X, \\\\ X, &amp; \\text{if } f \\notin X; \\\\ \\end{cases}\\] \\[g(Y) = \\begin{cases} r, &amp; \\text{if } f \\in Y, \\\\ 1, &amp; \\text{if } f \\notin Y. \\\\ \\end{cases}\\] <p>This defines a group homomorphism \\(\\operatorname{twist}_f : \\operatorname{Stab}(f) \\to G \\wr P\\). To be able to talk about a sequence of twists about different axes, we can define the twist group as the free product (coproduct) of the groups of twists about each axis:</p> \\[\\coprod_{f \\in \\Gamma} \\operatorname{Stab}(f),\\] <p>which comes with a free homomorphism \\(\\operatorname{twist} : \\coprod\\limits_{f \\in \\Gamma} \\operatorname{Stab}(f) \\to G \\wr P\\), which simply applies multiple twists in sequence.</p> <p>Often not all puzzle states are reachable by twists. The image of this homomorphism is exactly the set of puzzle states that are. This is a subgroup of \\(G \\wr P\\) and is called the puzzle group.</p> <p>Various reasons why the puzzle group is smaller than \\(G \\wr P\\) are called piece invariants. For example, no twist on a cube ever relocates a center, thus in the puzzle group\u2019s \\(\\mathbb{Z}_4 \\wr S_6\\) component, the \\(S_6\\) permutation is always the identity. For more complicated reasons, in the \\(\\mathbb{Z}_2 \\wr S_{12}\\) component, the sum across all copies of \\(\\mathbb{Z}_2\\) must be \\(0\\) \u2013 this is the edge orientation parity.</p>"},{"location":"theory/grip-theory/#complex-puzzles","title":"Complex puzzles","text":"<p>We do not need to be limited to the pieces that exist on the physical 3x3x3. We can take pieces corresponding to every possible subset of the grip set, thus \\(P = 2^\\Gamma\\), which has \\(2^6 = 64\\) pieces. The puzzle you get when you include all the pieces of another puzzle in this sense is called the complex version of that puzzle.</p> <p>The complex 3x3x3 has 10 types of pieces, which include the core, centers, edges, and corners from the 3x3x3. It also includes the double-axles, with active grips like {<code>R</code>, <code>L</code>}, and the bridges, with active grips like {<code>R</code>, <code>U</code>, <code>L</code>}. The other types of pieces are generated by the anti- automorphism of this puzzle. The anti- automorphism takes every piece with active grip set \\(A\\) to the piece whose active grip set is \\(A^c\\), its complement. Given a twist with axis \\(a\\) and transformation \\(g\\), the composition of two actions of the puzzle: the first action is a rotation of every piece by \\(g^{-1}\\), and the second is the original twist. When viewed on an actual 3x3x3, this automorphism maps moves to wide moves of the opposite faces. The anti- version of a piece is the image of a piece under the anti- automorphism. Thus, we can call the other pieces of the complex 3x3x3 anti-edges, anti-double-axles, anti-centers, and the anti-core. Anti-corners and anti-bridges are isomorphic to the corners and bridges, so they do not need to be recounted.</p>"},{"location":"theory/grip-theory/#more-puzzles","title":"More puzzles","text":"<p>This definition is immediately generalizable by replacing the set of grips \\(\\Gamma\\) and the grip group \\(G\\). For instance, using 12 grips and the grip group of a dodecahedron, we can create a megaminx, and by including all pieces, we can construct the complex megaminx, which has \\(2^{12} = 4096\\) pieces of 96 types<sup>1</sup>.</p> <p>We can also take 8 grips, <code>R</code>, <code>U</code>, <code>F</code>, <code>O</code>, <code>L</code>, <code>D</code>, <code>B</code>, and <code>I</code>, with the grip group being the 192 symmetries of the hypercube. This allows us to construct the 3<sup>4</sup>. One notable feature of this group that is not present in the previous cases is that when we take two adjacent grips (e.g. <code>R</code> and <code>U</code>), there are non-identity elements of the grip group that fix both of these, even though there are also non-identity elements that only fix one of them. This means that RKT is possible on this puzzle.</p>"},{"location":"theory/grip-theory/#more-layers","title":"More layers","text":"<p>More layers can be added to a puzzle by adding more grips. For instance, to build a 5x5x5, we need two grips for every grip of the 3x3x3, which we can call <code>1R</code> and <code>2R</code>, and similarly for the others. The grip group will act identically on the layer-1 grips and the layer-2 grips, but will not swap them. In this way, either layer of a face of the 5x5x5 can be selected by choosing which grip on that face to use. The complex 5x5x5 can be constructed out of this grip system.</p> <p>In general, odd-layered puzzles can be constructed with this approach, but even-layered puzzles are less well-defined. They can be constructed like the odd-layered puzzles with one more layer, but this results in identical grip systems and complex variants. Alternatively, we can use stored grips, but this results in less symmetrical puzzles.</p>"},{"location":"theory/grip-theory/#group-automorphisms","title":"Group automorphisms","text":"<p>There are more automorphisms that these puzzles can have. An inner automorphism of the grip group, which is a conjugate by an element of the group, can be extended to an automorphism of the puzzle by interpreting the inner automorphism as a whole-puzzle rotation. More interesting is what happens when we use a non-inner automorphism. The one we choose should be realizable as conjugation by a permutation of grips, though not necessarily one in the group. We consider the 12-grip complex megaminx. The grip group of this puzzle has an outer automorphism of reflection. By applying this outer automorphism, we obtain a reflection of the whole puzzle, showing that the puzzle is not chiral, even though some pieces are. More interesting is the other outer automorphism of this group, which manifests as an exotic automorphism that takes adjacent grips on the dodecahedron to non-adjacent but non-opposite grips and vice versa. This automorphism is called the co- automorphism, and it shows that complex puzzles can have a higher degree of symmetry than the geometric puzzle they were based on.</p> <p>In general, if we have the grip set \\(\\Gamma\\) with group \\(G\\) acting on it, the normalizer \\(N_{S_\\Gamma}(G)\\) is the subgroup of the automorphism group of \\(G\\) of automorphisms that can be realized as acting on \\(\\Gamma\\). Thus, the cos of the grip system are elements of the group \\(N_{S_\\Gamma}(G)/G\\). This group is a subgroup of \\(\\operatorname{Out}(G)\\), and manifests as additional symmetries of the grip system and the complex puzzle created with it. For example, the cube has two cos: the identity and the reflection. The dodecahedron has four: the identity, the reflection, and the co mentioned above and its inverse. That co applied twice is a reflection, so in a way, it can be considered a square root of the reflection.</p>"},{"location":"theory/grip-theory/#advanced-example","title":"Advanced example","text":"<p>Suppose we have 7 grips, labeled <code>001</code>, <code>010</code>, <code>011</code>, <code>100</code>, <code>101</code>, <code>110</code>, and <code>111</code>, which are acted on by \\(GL_3(\\mathbb{F}_2)\\) in the standard way. This group has order 168. The action of the grip group on the grips can be thought of as the Fano plane: a line is a set of 3 grips where one is the XOR-sum of the other two, and the group is all permutations of the grips that map lines to lines.</p> <p>With the objects above, we can build the complex puzzle and identify its piece types. First, there is clearly the core, with empty active grips, and 7 centers, with only one active grip each (e.g. {<code>001</code>}). Then, among the 15 2-grip pieces, there is only one orbit since the action is 2-transitive, so there is only one piece type, for instance that with active grip set {<code>001</code>, <code>010</code>}. Among 3-grip pieces, there are only two types: those that contain three grips on a line like {<code>001</code>, <code>010</code>, <code>011</code>}, and those that don\u2019t, like {<code>001</code>, <code>010</code>, <code>100</code>}. There are 7 of the former piece type and 28 of the latter type. Finally, for 4-, 5-, 6-, and 7- grip pieces, we can use the anti- automorphism to observe that these pieces are exactly the anti- variants of the 0- through 3-grip pieces. Thus, we have classified all the pieces of the complex Fano plane puzzle.</p>"},{"location":"theory/grip-theory/#extensions-to-grip-theory","title":"Extensions to grip theory","text":""},{"location":"theory/grip-theory/#infinite-grips","title":"Infinite grips","text":"<p>Consider a set of grips \\(\\mathbb{Z}^2\\), whose grip group are the rotations and translations that preserve the lattice. A puzzle constructed like this would have infinitely many twists, and would be unwieldy. A way to simplify this puzzle is to restrict the axes that twists are allowed on. Now, a grip that is not under an allowed twist is called stored. For instance, if twists are only allowed with axes \\((0,0)\\) and \\((1,0)\\), you can make a selection of pieces to make a two-circle puzzle like the Rashkey. However, the complex Rashkey would still have uncountably many pieces, many of which can reach infinitely many attitudes. A solution to this is to only allow pieces with finite active grip sets. If the active grip set of a piece is finite and there are only a finite number of allowed axes, each with finitely many transformations corresponding to a turn, the piece can only reach finitely many attitudes, despite the infinitude of the grip group.</p>"},{"location":"theory/grip-theory/#blocked-grips","title":"Blocked grips","text":"<p>The 3x3x3 is a doctrinaire puzzle. If a corner {<code>R</code>, <code>U</code>, <code>F</code>} and edge {<code>R</code>, <code>U</code>} are bandaged together, the puzzle ceases to be doctrinaire. This can be implemented into grip theory by adding a new kind of grip to pieces: blocked grips. Blocked grips follow the attitude just like active grips. We remove the corner and edge above and replace them with a new piece with active grips {<code>R</code>, <code>U</code>} and blocked grips {<code>F</code>}. When we apply a twist, if its axis would turn a piece along a blocked grip, the entire twist is illegal in this state. This exactly mimics the bandaging of the 3x3x3, because by removing <code>F</code> from the set of active grips of the corner and the set of inactive grips of the edge, it prevent us from performing any twist that would only move one of the two pieces.</p>"},{"location":"theory/grip-theory/#jumbling","title":"Jumbling","text":"<p>We can combine these two notions. Consider the curvy copter (ignore overhang bandaging for now). Clearly, it has at least 12 grips, corresponding to the edges of a cube, with a grip group that contains the rotations of a cube acting on them. However, it should also have jumbling moves, rotations of \\(\\arccos\\frac{1}{3}\\) around one of the 12 allowed axes. If we take the image of all the grips under repeated application of this type of rotation, we end up with a countably infinite dense set of grips with a countably infinite grip group. Each piece of the curvy copter can be compared with every grip to identify its active and bandaged grips. This produces a description of the curvy copter in grip theory. This description can be simplified so there are only finitely many active and bandaged grips per piece.</p>"},{"location":"theory/grip-theory/#non-faithful-actions","title":"Non-faithful actions","text":"<p>In all previous examples, the action on the grip group has been faithful. However, this does not have to be the case. Consider the rotational symmetry of the cube, the octahedral group. This group is a quotient of the binary octahedral group of order 48, so the binary octahedral group can act on 6 grips via its quotient. The resulting puzzle has the same pieces as the complex 3x3x3, but each piece can have twice as many attitudes, and thus twice as many orientations in a given position. Because the binary octahedral group can be interpreted as a group of spinors, the puzzle with the 3x3x3\u2019s pieces but the binary octahedral grip group is the quaternion cube.</p>"},{"location":"theory/grip-theory/#multiplex-puzzles","title":"Multiplex puzzles","text":"<p>Rather than simply assigning pieces a set of active grips, it is possible to create a set of grips combined with endomorphisms of the transforms associated with each grip. This allows for a puzzle like the 3x3x3 where some pieces perform an <code>R</code> while others perform <code>R2</code> or <code>R'</code>. A full multiplex puzzle can be built by including a piece for every combination of these grip-endomorphism pairs for a given set of endomorphisms. A simple example is the Triplex Tetrahedron on this page.</p> <p>Of particular note are puzzles using automorphisms of the transforms, as these preserve symmetry between different versions of the same grip. These include combination puzzles like Entangled 3x3x3s.</p>"},{"location":"theory/grip-theory/#lamination","title":"Lamination","text":"<p>Lamination is a restriction and generalization of grip theory. It allows fewer types of pieces than are described by grip theory, but the pieces it describes are closer to those of actual puzzles. It has multiple related interpretations.</p>"},{"location":"theory/grip-theory/#group-action-interpretation","title":"Group action interpretation","text":"<p>Suppose, as above, there is a grip group that acts on the set of grips. We now select a block system of this action, and each block is called an axis. Now, instead of a piece having a selection of active grips, a piece will have a layer on each axis, where a layer is an assignment of a symbol (WLOG element of \\(\\mathbb{Z}\\)) to each grip in that axis. Then, a twist still has an axis, but now it has a selected layer within that axis, as well as a transformation, an element of the grip group, that pointwise stabilizes the axis. A laminated puzzle is one that, given a selection of axes an selection of layers on each axis, contains a piece for every combination of layers. In this way, it is similar to complex puzzles.</p> <p>For instance, to construct a 3x3x3, first start with the 6 grips <code>R</code>, <code>U</code>, <code>F</code>, <code>L</code>, <code>D</code>, and <code>B</code>. Then, let the axes be <code>x</code> = {<code>R</code>, <code>L</code>}, <code>y</code> = {<code>U</code>, <code>D</code>}, and <code>z</code> = {<code>F</code>, <code>B</code>}. We can choose a set of layers for each axis: the layers of <code>x</code> will be the assignments {<code>R</code>\u21a60, <code>L</code>\u21a60}, {<code>R</code>\u21a61, <code>L</code>\u21a60}, and {<code>R</code>\u21a60, <code>L</code>\u21a61}, and similarly for <code>y</code> and <code>z</code>. Since there are 3 layers per axis and 3 axes, the laminated 3x3x3 has \\(3^3 = 27\\) pieces, exactly as many as a 3x3x3. In fact, the laminated 3x3x3 is exactly the super 3x3x3.</p>"},{"location":"theory/grip-theory/#representation-interpretation","title":"Representation interpretation","text":"<p>Now, we still have a grip group, but instead of acting on a set of grips, it acts linearly on a vector space \\(V\\). The axes are a set of linearly independent subspaces that span \\(V\\) (which implies the \\(V\\) is the direct sum of the axes), and this set should be setwise stabilized by the grip group. A layer is a point in a subspace. A piece as before has one layer per axis, but now, since layers are points in orthogonal subspaces, we can also identify a piece with a point in \\(V\\) whose projections onto the subspaces are its layers. Thus, a twist, being a selection of axis \\(a\\), layer \\(\\lambda\\), and transformation \\(g\\), has the effect of selecting all pieces in an affine space passing through \\(\\lambda\\) parallel to the direct sum of all axes that are not \\(a\\), and applying \\(g\\) to them.</p> <p>Constructing the 3x3x3 is even more geometrically intuitive than before. Now, we have three axes <code>x</code>, <code>y</code>, <code>z</code>, which correspond to the three coordinate axes of \\(\\mathbb{R}^3\\). The grip group acts on \\(\\mathbb{R}^3\\) as the rotational symmetries of the cube, and the layers of <code>x</code> will be the surfaces \\(x=0\\), \\(x=-1\\), and \\(x=1\\), and similarly for <code>y</code> and <code>z</code>. With this approach, the 27 pieces of the laminated 3x3x3 form an arrangement just like that of the actual 3x3x3. However, this approach is not limited to three dimensions, and can be used to construct all the puzzles under doctrinaire grip theory.</p>"},{"location":"theory/grip-theory/#more-layers_1","title":"More layers","text":"<p>Laminated puzzles, as the name suggests, are made of layers, so adding more layers is trivial. Moreover, even-layered puzzles can be constructed as naturally as odd-layered ones. This makes them a more natural description of these puzzles.</p> <ol> <li> <p>https://www.gcsu.edu/sites/files/page-assets/node-808/attachments/powers.pdf \u21a9</p> </li> </ol>"},{"location":"theory/invariants/","title":"Piece invariants","text":"<p>Many puzzles exhibit a phenomenon where the position or orientation of some pieces are determined by the position or orientation of the other pieces. This can often be captured with an invariant, a function of position that does not change when moves are applied, and calculating the invariant can identify whether a position is valid or not. Invariants are useful when computing the total number of positions of a puzzle.</p> <p>The most common kinds of invariants are permutation parity and total orientation.</p>"},{"location":"theory/invariants/#permutation-parity","title":"Permutation parity","text":"<p>The permutation parity of a permutation is the parity of the number of swaps needed to produce it. It is exhibited well in k-Card Game.</p>"},{"location":"theory/invariants/#monoflip","title":"Monoflip","text":"<p>Monoflip is a phenomenon where a single corner piece on the 3x3x3x3 can be flipped in place, with two 2-swaps of stickers, while all other corners are solved. Conversely, if 15 corners on the puzzle are solved, the last corner must either be solved or in one of 3 orientations of the monoflip. This effect is unique to 4D hypercubes. In 3D, having 7 solved corners implies the last corner must also be solved, and in 5D and above, the orientation of the last corner is independent of the orientations of the others.</p> <p>The monoflip exists because the group of orientations of a single corner, ignoring others, is \\(A_4\\), and its commutator subgroup is the Klein four-group \\(\\mathbb{Z}_2 \\times \\mathbb{Z}_2\\). Each element of this group corresponds to either the identity or a monoflip. Its quotient in \\(A_4\\) is \\(\\mathbb{Z}_3\\), which represents an invariant analogous to total corner twist in 3D. This will allow us to prove that the orientation of the last corner, given that the other 15 are solved, must be identity or monoflip.</p> <p>First, we construct a particular set of 8 ridges by choosing two sets of 4 parallel ridges which are mutually orthogonal (for instance, choose two disjoint rings of 4 cells each, and select the ridges which lie between two cells of the same ring). We say these ridges are red. We can take two more sets of 8 ridges the same way, both disjoint from the first one, and we call those ridges green and blue. Notice that if we perform a monoflip on a corner under this coloring, the arrangement of colors does not change.</p> <p>If we pick a particular corner position, we can call its position even. Then, we specify that positions adjacent to even positions are odd, and positions adjacent to odd positions are even. This is well-defined and unique given our original choice. Coordinate-wise, if the coordinates of the corners are in \\(\\{-1,1\\}^4\\), corners whose coordinates have product \\(1\\) can be even and those with product \\(-1\\) can be odd. Then, in any position of the 3x3x3x3, we define the variant of a particular corner based on two factors: the color in the solved position of where the red ridge of the corner is, and whether the position of the corner is even or odd.</p> Even Odd Red 0 0 Green 1 2 Blue 2 1 <p>In effect, in an odd position, the roles of green and blue are swapped. By adding the variant of each corner, we get the invariant of the position.</p> <p>We now analyze how the invariant changes under turns. Since quarter turns form a generating set, we only need to consider those. Each quarter turn fixes one color of ridge and swaps the other two. It also takes corners in even positions to odd positions and vice versa, which swaps blue and green (for the purposes of computing the variant). Thus, it effectively either keeps all colors fixed or 3-cycles them. This has the effect of adding \\(k\\) to the variants of even-positioned corners and subtracting \\(k\\) from the odd-positioned corners for some \\(k \\in \\mathbb{Z}_3\\). Thus, the invariant stays fixed. Since the invariant of the solved position is \\(0\\), it is \\(0\\) in any position and so if 15 corners are solved, the last one can only be in a variant-\\(0\\) position, that is, identity or monoflip.</p>"},{"location":"theory/open-questions/","title":"Open Questions","text":"<p>These are open questions in Hypercubing puzzle theory. They are sometimes written in specific ways, but really we want to solve the general case.</p> <ul> <li>What puzzle property preconditions exist for certain algorithms?<ul> <li>How do we express them?</li> </ul> </li> <li>How do we simplify twist applications to pieces?<ul> <li>E.g., On 3<sup>3</sup>, <code>R U' R' F</code> applied to the DFR corner simplifies to the identity</li> <li>E.g., On 3<sup>3</sup>, <code>D' L2 U R2</code> applied to the DFR corner simplifies to the identity</li> </ul> </li> <li>For a positive integer N, consider the symmetric two-disk puzzle with the lowest twist order that contains the N-acron. Consider the shallowest such puzzle (up to isomorphism) that still contains the N-acron. What is the order of <code>[R, L]</code>?</li> <li>How do we rigorously define \u201cN-acron\u201d or \u201c\\&lt;shape&gt;-acron\u201d?<ul> <li>\u201cN-acron\u201d roughly means \u201cpiece with N grips symmetrically in a ring\u201d but there\u2019s nuance<ul> <li>Do the grips need to be exchangeable?</li> <li>What if there are 2N grips (as in non-symmetric two-disk puzzles)?</li> </ul> </li> </ul> </li> <li>Special positions: what do they look like, are all paths through a puzzle\u2019s state space homotopic to a special path, and can this formalize 4D jumbling?</li> </ul>"},{"location":"theory/open-questions/#missing-terminology","title":"Missing terminology","text":"<p>DO NOT just come up with new words for these</p> <p>We want terms that are meaningful and tie in well with the rest of the theory. Some of these concepts may be well-described by some combination of words, but it\u2019s challenging to come up with a good combination of such words.</p> <p>In other words, we\u2019re looking for a \u201cbasis\u201d for the space of concepts.</p> <ul> <li>More piece types</li> <li>\u201cFor a positive integer N, consider the symmetric two-disk puzzle with the lowest twist order that contains the N-acron. Consider the shallowest such puzzle (up to isomorphism) that still contains the N-acron.\u201d</li> <li>cut depth equivalence classes (Orb phase diagram)</li> <li>\u201cshallowest such puzzle up to isomorphism\u201d</li> </ul>"},{"location":"theory/open-questions/#missing-formalisms","title":"Missing formalisms","text":"<ul> <li>Connectivity of grips<ul> <li>can exchange grips A &amp; B on a single piece</li> <li>can interact (depends on piece types)</li> </ul> </li> <li>Accessible grips<ul> <li>i.e., what grips exist as axes on the puzzle (only 2 on two-disk puzzles)</li> </ul> </li> </ul>"},{"location":"theory/physical/","title":"Physical puzzles","text":"<p>Higher-dimensional (\u201cvirtual\u201d) puzzles naturally exist in more than 3 dimensions. Physical puzzles are a way to make a 3-dimensional object that functions similarly to this higher-dimensional puzzle. They must be able to perform the moves of the puzzle, so everything that can be done on the virtual puzzle can be done on the physical puzzle. However, most physical puzzles are able to perform other moves that are not allowed on the virtual puzzle, and these must be disallowed by the rules of operating the puzzle. The more rules a puzzle requires, the more complicated operating it becomes, and it becomes less interesting. The most interesting and natural physical puzzles implement as many of the restrictions as possible as part of the mechanism.</p> <p>Warning</p> <p>The relationship between virtual and physical puzzles is reversed from what it usually is in 3 dimensions! In the normal case, the physical puzzle has a mechanism that restricts the possible moves, and the unrestricted moves become legal, and a virtual simulation of the puzzle should copy the moves from the physical puzzle. However, when constructing a virtual higher-dimensional puzzle, the legal moves are defined abstractly, and the physical puzzle needs to have restrictions applied to it by rules.</p> <p>The simplest way to construct a physical puzzle is to create the most unrestricted object possible, and apply all restrictions via the rules. We can make one physical piece for each sticker of the virtual puzzle, and observe on the virtual puzzle the permutation of the stickers when applying one move. When we allow this set of moves on the physical puzzle, we get sticker soup. This is the simplest way to construct a physical puzzle, and since it has no mechanism at all, the rules of operation are just the permutation. This is generally considered uninteresting.</p> <p>Since in a virtual puzzle, stickers are part of pieces and cannot be separated, it makes sense to make this a restriction of a physical puzzle as well. In this case, a physical piece is a virtual piece. This applies some design constraints to the puzzle. On the virtual puzzle, there are generally moves that reorient a piece, which has the effect of permuting its stickers. This produces the orientation group of the piece. A physical puzzle built like this must have pieces that can represent that symmetry group.</p>"},{"location":"theory/physical/#melindas-24","title":"Melinda\u2019s 2<sup>4</sup>","text":"<p>The 2<sup>4</sup> has 16 pieces, each with 4 stickers. By performing moves on a virtual 2<sup>4</sup>, a piece can be brought back to its position with any even permutation of stickers. (It is not just the monoflip because that assumes the rest of the puzzle is solved, which is not important here.) In three dimensions, a tetrahedron with its four vertices representing the stickers has the same symmetry. (This is not a coincidence; a 2<sup>4</sup> built on the surface of a hypersphere will have its pieces be spherical tetrahedra with the stickers at the vertices.) Thus, the pieces of Melinda\u2019s 2<sup>4</sup> have tetrahedral symmetry.</p> <p>This is not the only design decision resulting in a usable physical puzzle. Since the pieces of the 2<sup>4</sup> can be arranged in two cubic layers, the pieces are cubes to allow them to stick together in this fashion. This makes many of the moves simply rotating one whole cube of 8 pieces, and the others rotate 4 pieces from each layer in a simple way. These moves are unable to swap a white or yellow sticker with a sticker of a different color, which means the puzzle simulates a cubic prism puzzle: a 2<sup>3</sup>x2<sup>1</sup> cuboid, where the first three axes can turn into each other but the last one cannot in the same way that a 3x3x3x2 is restricted.</p> <p>The virtual 2<sup>4</sup>, on the other hand, does allow moves that take a white or yellow sticker to a sticker of a different color, and the pieces were designed so that this operation is possible. It would be possible to observe those moves, record which piece goes where, and apply that to the physical 2<sup>4</sup>, but this is unwieldy. Instead, Melinda introduced a gyro, a sequence of actions that does the equivalent of a whole-puzzle rotation on the virtual puzzle, but takes a white sticker to a sticker on a different axis. Thus, other moves are accessible by performing the gyro followed by a simple move. On this puzzle, a gyro is usually about six physical twisting actions, but on other puzzles, they can be more complicated, so finding a puzzle that supports a short gyro is valuable.</p>"},{"location":"theory/physical/#restricted-25","title":"Restricted 2<sup>5</sup>","text":"<p>The pieces of a virtual 2<sup>5</sup> have 60 orientations, the even permutations of its 5 stickers. It is difficult to design a piece with this symmetry, so the restricted 2<sup>5</sup> sets one axis to be unswappable with the others, i.e. it is a 2<sup>4</sup>x2<sup>1</sup> in the notation of the previous section. This means the pieces only need to be able to evenly permute 4 of their stickers, which is the same symmetry as the pieces of the physical 2<sup>4</sup>. The pieces from that can thus be reused to build the restricted 2<sup>5</sup>, with one sticker added to each piece. The extra sticker needs to be invariant under all rotations of the piece, so it needs to be applied to every face of the piece.</p> <p>The design of the puzzle is simple: two copies of the physical 2<sup>4</sup>, where the legal moves are doing a whole puzzle rotation on one, doing the same twist on both, or swapping 8 pieces from each half by twisting a side of the puzzle. The design requires a buffer layer (pictured above in purple), because if it were not present, doing a 90\u00b0 rotation of the whole puzzle corresponds to three moves on the virtual restricted 2<sup>5</sup>, which is considered illegal in solves.</p>"},{"location":"theory/physical/#unrestricted-25","title":"Unrestricted 2<sup>5</sup>","text":"<p>It is not impossible to design a piece with 5 stickers that supports all even permutations of its stickers. The symmetry group of this piece is called \\(A_5\\), the alternating group on 5 points, and it is isomorphic to the symmetry of the icosahedron. It is not obvious whether there are actually 5 objects permuted by this group, but there are: the 5 tetrahedra of the compound of 5 tetrahedra, or the 5 cubes of the compound of 5 cubes. Any even permutation of the 5 components of either shape can be realized as a rotation of the whole shape.</p> <p>The compounds of 5 tetrahedra and 5 cubes<sup>1</sup></p> <p> </p> <p>Observe that in the compound of 5 cubes, if you take one cube as fixed, the other four cubes each share one pair of opposite vertices with it. In particular, the arrangement of these 4 other cubes has the same symmetry as the 4 stickers of the piece of the physical 2<sup>4</sup>, or the 4 exchangeable stickers of the restricted 2<sup>5</sup>. Thus, by designing a piece based on this object, the true physical 2<sup>5</sup> can be implemented that shares all the moves of the restricted 2<sup>5</sup>, along with one new gyro move. Because of the complexity of the puzzle, the gyro is very difficult to execute.</p> <p>2<sup>5</sup> gyro, by Akkei</p> <p></p>"},{"location":"theory/physical/#26","title":"2<sup>6</sup>","text":"<p>The virtual 2<sup>6</sup> has pieces, which have 6 stickers each. Each piece must be able to perform all even permutations of all 6 stickers, which results in the group \\(A_6\\) of order 360. A rigid piece in 3 dimensions must have as its symmetry a chiral point group. However, the only discrete chiral point groups in 3 dimensions of order 360 all contain a rotation by \\(\\frac{\\pi}{90}\\), which has order 180. \\(A_6\\) has no elements of order 180, so none of these point groups are isomorphic to \\(A_6\\), and a physical 2<sup>6</sup> with rigid pieces is impossible. (The lowest dimension to have an object with the requisite symmetry is 5, with the 5-simplex.)</p> <p>This does not preclude other designs for a physical 2^6 that have not been developed yet. For instance, a skewb has 6 center pieces, and all even permutations of them are accessible with skewb twists. This means that skewbs can be used as pieces for a physical 2<sup>6</sup>. Whether there is a design for it that does not require manipulating the individual pieces every turn is unknown.</p>"},{"location":"theory/physical/#restricted-26","title":"Restricted 2<sup>6</sup>","text":"<p>There are several ways to restrict a 2<sup>6</sup> to make it able to be made physical. One way is to make it a 2<sup>5</sup>x2<sup>1</sup>, which can be made physical out of two copies of the 2<sup>5</sup> in the same way as the 2<sup>4</sup>x2<sup>1</sup> was made out of the 2<sup>4</sup>. Another way is the 2<sup>4</sup>x2<sup>2</sup>, pictured above. Each piece of the 2<sup>4</sup>x2<sup>2</sup> has four 4-stickers and two 2-stickers. The four 4-stickers can have an even permutation applied to them, or the two 2-stickers can be swapped and an odd permutation can be applied to the four 4-stickers. This enlarges the symmetry group of the piece from \\(A_4\\) to \\(S_4\\), the symmetric group on 4 points. Fortunately, octahedral symmetry acts on the four space diagonals of a cube by \\(S_4\\), and one endpoint from each diagonal corresponds to the vertices of a tetrahedron, used for the stickers on the 2<sup>4</sup>. Therefore, the 4-stickers can be placed on opposite corners of a cube. The stickers on the periphery of the pieces correspond to the 2-stickers, which swap whenever the piece is rotated in a way that does not preserve the original tetrahedron, i.e. one that does an odd permutation. It may require one or more buffer layers.</p> <ol> <li> <p>Images created with Stella software.\u00a0\u21a9</p> </li> </ol>"}]}